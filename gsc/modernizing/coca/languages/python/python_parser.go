// Code generated from java-escape by ANTLR 4.11.1. DO NOT EDIT.

package parser // PythonParser

import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr/antlr4/runtime/Go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type PythonParser struct {
	PythonBaseParser
}

var pythonparserParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	literalNames           []string
	symbolicNames          []string
	ruleNames              []string
	predictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func pythonparserParserInit() {
	staticData := &pythonparserParserStaticData
	staticData.literalNames = []string{
		"", "", "", "", "'def'", "'return'", "'raise'", "'from'", "'import'",
		"'nonlocal'", "'as'", "'global'", "'assert'", "'if'", "'elif'", "'else'",
		"'while'", "'for'", "'in'", "'try'", "'None'", "'finally'", "'with'",
		"'except'", "'lambda'", "'or'", "'and'", "'not'", "'is'", "'class'",
		"'yield'", "'del'", "'pass'", "'continue'", "'break'", "'async'", "'await'",
		"'print'", "'exec'", "'True'", "'False'", "'.'", "'...'", "'`'", "'*'",
		"','", "':'", "';'", "'**'", "'='", "'|'", "'^'", "'&'", "'<<'", "'>>'",
		"'+'", "'-'", "'/'", "'%'", "'//'", "'~'", "'<'", "'>'", "'=='", "'>='",
		"'<='", "'<>'", "'!='", "'@'", "'->'", "'+='", "'-='", "'*='", "'@='",
		"'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'**='", "'//='",
		"", "", "", "", "", "", "", "'('", "')'", "'{'", "'}'", "'['", "']'",
	}
	staticData.symbolicNames = []string{
		"", "INDENT", "DEDENT", "LINE_BREAK", "DEF", "RETURN", "RAISE", "FROM",
		"IMPORT", "NONLOCAL", "AS", "GLOBAL", "ASSERT", "IF", "ELIF", "ELSE",
		"WHILE", "FOR", "IN", "TRY", "NONE", "FINALLY", "WITH", "EXCEPT", "LAMBDA",
		"OR", "AND", "NOT", "IS", "CLASS", "YIELD", "DEL", "PASS", "CONTINUE",
		"BREAK", "ASYNC", "AWAIT", "PRINT", "EXEC", "TRUE", "FALSE", "DOT",
		"ELLIPSIS", "REVERSE_QUOTE", "STAR", "COMMA", "COLON", "SEMI_COLON",
		"POWER", "ASSIGN", "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT",
		"ADD", "MINUS", "DIV", "MOD", "IDIV", "NOT_OP", "LESS_THAN", "GREATER_THAN",
		"EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN",
		"SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN",
		"AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN",
		"POWER_ASSIGN", "IDIV_ASSIGN", "STRING", "DECIMAL_INTEGER", "OCT_INTEGER",
		"HEX_INTEGER", "BIN_INTEGER", "IMAG_NUMBER", "FLOAT_NUMBER", "OPEN_PAREN",
		"CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET",
		"NAME", "LINE_JOIN", "NEWLINE", "WS", "COMMENT",
	}
	staticData.ruleNames = []string{
		"root", "single_input", "file_input", "eval_input", "stmt", "compound_stmt",
		"suite", "decorator", "elif_clause", "else_clause", "finally_clause",
		"with_item", "except_clause", "classdef", "funcdef", "typedargslist",
		"args", "kwargs", "def_parameters", "def_parameter", "named_parameter",
		"simple_stmt", "small_stmt", "from_stmt_source", "from_stmt_as_names",
		"testlist_star_expr", "star_expr", "assign_part", "exprlist", "import_as_names",
		"import_as_name", "dotted_as_names", "dotted_as_name", "test", "varargslist",
		"vardef_parameters", "vardef_parameter", "varargs", "varkwargs", "logical_test",
		"comparison", "expr", "atom", "dictorsetmaker", "testlist_comp", "testlist",
		"dotted_name", "name", "number", "integer", "yield_expr", "yield_arg",
		"trailer", "arguments", "arglist", "argument", "subscriptlist", "subscript",
		"sliceop", "comp_for", "comp_iter",
	}
	staticData.predictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 100, 977, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7,
		4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7,
		10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15,
		2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2,
		21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26,
		7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7,
		31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36,
		2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2,
		42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47,
		7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7,
		52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57,
		2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 1, 0, 1, 0, 1, 0, 3, 0, 126,
		8, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 135, 8, 1, 1, 2,
		1, 2, 4, 2, 139, 8, 2, 11, 2, 12, 2, 140, 1, 3, 1, 3, 5, 3, 145, 8, 3,
		10, 3, 12, 3, 148, 9, 3, 1, 4, 1, 4, 3, 4, 152, 8, 4, 1, 5, 1, 5, 1, 5,
		1, 5, 1, 5, 5, 5, 159, 8, 5, 10, 5, 12, 5, 162, 9, 5, 1, 5, 3, 5, 165,
		8, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 3, 5, 172, 8, 5, 1, 5, 3, 5, 175, 8,
		5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 3, 5, 184, 8, 5, 1, 5, 1,
		5, 1, 5, 1, 5, 4, 5, 190, 8, 5, 11, 5, 12, 5, 191, 1, 5, 3, 5, 195, 8,
		5, 1, 5, 3, 5, 198, 8, 5, 1, 5, 3, 5, 201, 8, 5, 1, 5, 3, 5, 204, 8, 5,
		1, 5, 1, 5, 1, 5, 1, 5, 5, 5, 210, 8, 5, 10, 5, 12, 5, 213, 9, 5, 1, 5,
		1, 5, 1, 5, 1, 5, 5, 5, 219, 8, 5, 10, 5, 12, 5, 222, 9, 5, 1, 5, 1, 5,
		3, 5, 226, 8, 5, 3, 5, 228, 8, 5, 1, 6, 1, 6, 1, 6, 1, 6, 4, 6, 234, 8,
		6, 11, 6, 12, 6, 235, 1, 6, 1, 6, 3, 6, 240, 8, 6, 1, 7, 1, 7, 1, 7, 1,
		7, 3, 7, 246, 8, 7, 1, 7, 3, 7, 249, 8, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8,
		1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 11,
		1, 11, 1, 11, 3, 11, 269, 8, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1,
		12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 3, 12, 283, 8, 12, 3, 12,
		285, 8, 12, 1, 12, 1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 1, 13, 3, 13, 294,
		8, 13, 1, 13, 3, 13, 297, 8, 13, 1, 13, 1, 13, 1, 13, 1, 14, 3, 14, 303,
		8, 14, 1, 14, 1, 14, 1, 14, 1, 14, 3, 14, 309, 8, 14, 1, 14, 1, 14, 1,
		14, 3, 14, 314, 8, 14, 1, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 3, 15,
		322, 8, 15, 1, 15, 1, 15, 1, 15, 3, 15, 327, 8, 15, 1, 15, 1, 15, 3, 15,
		331, 8, 15, 1, 15, 3, 15, 334, 8, 15, 1, 15, 3, 15, 337, 8, 15, 1, 15,
		1, 15, 3, 15, 341, 8, 15, 3, 15, 343, 8, 15, 1, 16, 1, 16, 1, 16, 1, 17,
		1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 5, 18, 354, 8, 18, 10, 18, 12, 18, 357,
		9, 18, 1, 19, 1, 19, 1, 19, 3, 19, 362, 8, 19, 1, 19, 3, 19, 365, 8, 19,
		1, 20, 1, 20, 1, 20, 3, 20, 370, 8, 20, 1, 21, 1, 21, 1, 21, 5, 21, 375,
		8, 21, 10, 21, 12, 21, 378, 9, 21, 1, 21, 3, 21, 381, 8, 21, 1, 21, 1,
		21, 1, 22, 1, 22, 3, 22, 387, 8, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22,
		5, 22, 394, 8, 22, 10, 22, 12, 22, 397, 9, 22, 1, 22, 3, 22, 400, 8, 22,
		1, 22, 1, 22, 1, 22, 1, 22, 4, 22, 406, 8, 22, 11, 22, 12, 22, 407, 1,
		22, 3, 22, 411, 8, 22, 3, 22, 413, 8, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1,
		22, 1, 22, 1, 22, 1, 22, 1, 22, 3, 22, 424, 8, 22, 1, 22, 1, 22, 1, 22,
		1, 22, 1, 22, 1, 22, 3, 22, 432, 8, 22, 3, 22, 434, 8, 22, 3, 22, 436,
		8, 22, 1, 22, 1, 22, 3, 22, 440, 8, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1,
		22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 5, 22, 454, 8, 22,
		10, 22, 12, 22, 457, 9, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1,
		22, 3, 22, 466, 8, 22, 3, 22, 468, 8, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1,
		22, 1, 22, 3, 22, 476, 8, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 5, 22,
		483, 8, 22, 10, 22, 12, 22, 486, 9, 22, 1, 22, 1, 22, 3, 22, 490, 8, 22,
		1, 23, 5, 23, 493, 8, 23, 10, 23, 12, 23, 496, 9, 23, 1, 23, 1, 23, 4,
		23, 500, 8, 23, 11, 23, 12, 23, 501, 3, 23, 504, 8, 23, 1, 24, 1, 24, 1,
		24, 1, 24, 1, 24, 1, 24, 3, 24, 512, 8, 24, 1, 25, 1, 25, 3, 25, 516, 8,
		25, 1, 25, 1, 25, 4, 25, 520, 8, 25, 11, 25, 12, 25, 521, 1, 25, 1, 25,
		3, 25, 526, 8, 25, 1, 25, 3, 25, 529, 8, 25, 1, 26, 1, 26, 1, 26, 1, 27,
		1, 27, 1, 27, 1, 27, 5, 27, 538, 8, 27, 10, 27, 12, 27, 541, 9, 27, 1,
		27, 1, 27, 3, 27, 545, 8, 27, 1, 27, 3, 27, 548, 8, 27, 1, 27, 1, 27, 1,
		27, 1, 27, 1, 27, 3, 27, 555, 8, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27,
		3, 27, 562, 8, 27, 3, 27, 564, 8, 27, 1, 28, 1, 28, 1, 28, 5, 28, 569,
		8, 28, 10, 28, 12, 28, 572, 9, 28, 1, 28, 3, 28, 575, 8, 28, 1, 29, 1,
		29, 1, 29, 5, 29, 580, 8, 29, 10, 29, 12, 29, 583, 9, 29, 1, 29, 3, 29,
		586, 8, 29, 1, 30, 1, 30, 1, 30, 3, 30, 591, 8, 30, 1, 31, 1, 31, 1, 31,
		5, 31, 596, 8, 31, 10, 31, 12, 31, 599, 9, 31, 1, 32, 1, 32, 1, 32, 3,
		32, 604, 8, 32, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 3, 33, 612, 8,
		33, 1, 33, 1, 33, 3, 33, 616, 8, 33, 1, 33, 1, 33, 3, 33, 620, 8, 33, 1,
		34, 1, 34, 1, 34, 3, 34, 625, 8, 34, 1, 34, 1, 34, 1, 34, 3, 34, 630, 8,
		34, 1, 34, 1, 34, 3, 34, 634, 8, 34, 1, 34, 3, 34, 637, 8, 34, 1, 34, 3,
		34, 640, 8, 34, 1, 34, 1, 34, 3, 34, 644, 8, 34, 3, 34, 646, 8, 34, 1,
		35, 1, 35, 1, 35, 5, 35, 651, 8, 35, 10, 35, 12, 35, 654, 9, 35, 1, 36,
		1, 36, 1, 36, 3, 36, 659, 8, 36, 1, 36, 3, 36, 662, 8, 36, 1, 37, 1, 37,
		1, 37, 1, 38, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 1, 39, 3, 39, 674, 8,
		39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 5, 39, 682, 8, 39, 10, 39,
		12, 39, 685, 9, 39, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1,
		40, 1, 40, 1, 40, 1, 40, 1, 40, 3, 40, 699, 8, 40, 1, 40, 1, 40, 1, 40,
		3, 40, 704, 8, 40, 3, 40, 706, 8, 40, 1, 40, 5, 40, 709, 8, 40, 10, 40,
		12, 40, 712, 9, 40, 1, 41, 1, 41, 3, 41, 716, 8, 41, 1, 41, 1, 41, 5, 41,
		720, 8, 41, 10, 41, 12, 41, 723, 9, 41, 1, 41, 1, 41, 3, 41, 727, 8, 41,
		1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1,
		41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41,
		5, 41, 750, 8, 41, 10, 41, 12, 41, 753, 9, 41, 1, 42, 1, 42, 1, 42, 3,
		42, 758, 8, 42, 1, 42, 1, 42, 1, 42, 3, 42, 763, 8, 42, 1, 42, 1, 42, 1,
		42, 3, 42, 768, 8, 42, 1, 42, 1, 42, 1, 42, 1, 42, 3, 42, 774, 8, 42, 1,
		42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 3, 42, 783, 8, 42, 1, 42,
		1, 42, 1, 42, 4, 42, 788, 8, 42, 11, 42, 12, 42, 789, 3, 42, 792, 8, 42,
		1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 3, 43, 800, 8, 43, 1, 43, 1,
		43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 3, 43, 809, 8, 43, 5, 43, 811, 8,
		43, 10, 43, 12, 43, 814, 9, 43, 1, 43, 3, 43, 817, 8, 43, 1, 43, 1, 43,
		1, 43, 1, 43, 1, 43, 1, 43, 3, 43, 825, 8, 43, 1, 44, 1, 44, 3, 44, 829,
		8, 44, 1, 44, 1, 44, 1, 44, 1, 44, 3, 44, 835, 8, 44, 5, 44, 837, 8, 44,
		10, 44, 12, 44, 840, 9, 44, 1, 44, 3, 44, 843, 8, 44, 3, 44, 845, 8, 44,
		1, 45, 1, 45, 1, 45, 5, 45, 850, 8, 45, 10, 45, 12, 45, 853, 9, 45, 1,
		45, 3, 45, 856, 8, 45, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 5, 46,
		864, 8, 46, 10, 46, 12, 46, 867, 9, 46, 1, 47, 1, 47, 1, 48, 1, 48, 1,
		48, 3, 48, 874, 8, 48, 1, 49, 1, 49, 1, 50, 1, 50, 3, 50, 880, 8, 50, 1,
		51, 1, 51, 1, 51, 3, 51, 885, 8, 51, 1, 52, 1, 52, 1, 52, 3, 52, 890, 8,
		52, 1, 52, 3, 52, 893, 8, 52, 1, 53, 1, 53, 3, 53, 897, 8, 53, 1, 53, 1,
		53, 1, 53, 1, 53, 1, 53, 3, 53, 904, 8, 53, 1, 54, 1, 54, 1, 54, 5, 54,
		909, 8, 54, 10, 54, 12, 54, 912, 9, 54, 1, 54, 3, 54, 915, 8, 54, 1, 55,
		1, 55, 1, 55, 1, 55, 3, 55, 921, 8, 55, 1, 55, 1, 55, 3, 55, 925, 8, 55,
		1, 56, 1, 56, 1, 56, 5, 56, 930, 8, 56, 10, 56, 12, 56, 933, 9, 56, 1,
		56, 3, 56, 936, 8, 56, 1, 57, 1, 57, 1, 57, 1, 57, 3, 57, 942, 8, 57, 1,
		57, 3, 57, 945, 8, 57, 3, 57, 947, 8, 57, 1, 57, 1, 57, 3, 57, 951, 8,
		57, 1, 57, 3, 57, 954, 8, 57, 3, 57, 956, 8, 57, 1, 58, 1, 58, 3, 58, 960,
		8, 58, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 3, 59, 967, 8, 59, 1, 60, 1,
		60, 1, 60, 1, 60, 3, 60, 973, 8, 60, 3, 60, 975, 8, 60, 1, 60, 0, 4, 78,
		80, 82, 92, 61, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28,
		30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64,
		66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100,
		102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 0, 10, 1, 1, 3, 3, 1,
		0, 41, 42, 1, 0, 70, 82, 2, 0, 55, 56, 60, 60, 3, 0, 44, 44, 57, 59, 68,
		68, 1, 0, 55, 56, 1, 0, 53, 54, 2, 0, 39, 40, 96, 96, 1, 0, 84, 87, 2,
		0, 44, 44, 48, 48, 1116, 0, 125, 1, 0, 0, 0, 2, 134, 1, 0, 0, 0, 4, 138,
		1, 0, 0, 0, 6, 142, 1, 0, 0, 0, 8, 151, 1, 0, 0, 0, 10, 227, 1, 0, 0, 0,
		12, 239, 1, 0, 0, 0, 14, 241, 1, 0, 0, 0, 16, 252, 1, 0, 0, 0, 18, 257,
		1, 0, 0, 0, 20, 261, 1, 0, 0, 0, 22, 265, 1, 0, 0, 0, 24, 270, 1, 0, 0,
		0, 26, 289, 1, 0, 0, 0, 28, 302, 1, 0, 0, 0, 30, 342, 1, 0, 0, 0, 32, 344,
		1, 0, 0, 0, 34, 347, 1, 0, 0, 0, 36, 350, 1, 0, 0, 0, 38, 364, 1, 0, 0,
		0, 40, 366, 1, 0, 0, 0, 42, 371, 1, 0, 0, 0, 44, 489, 1, 0, 0, 0, 46, 503,
		1, 0, 0, 0, 48, 511, 1, 0, 0, 0, 50, 528, 1, 0, 0, 0, 52, 530, 1, 0, 0,
		0, 54, 563, 1, 0, 0, 0, 56, 565, 1, 0, 0, 0, 58, 576, 1, 0, 0, 0, 60, 587,
		1, 0, 0, 0, 62, 592, 1, 0, 0, 0, 64, 600, 1, 0, 0, 0, 66, 619, 1, 0, 0,
		0, 68, 645, 1, 0, 0, 0, 70, 647, 1, 0, 0, 0, 72, 661, 1, 0, 0, 0, 74, 663,
		1, 0, 0, 0, 76, 666, 1, 0, 0, 0, 78, 673, 1, 0, 0, 0, 80, 686, 1, 0, 0,
		0, 82, 726, 1, 0, 0, 0, 84, 791, 1, 0, 0, 0, 86, 824, 1, 0, 0, 0, 88, 828,
		1, 0, 0, 0, 90, 846, 1, 0, 0, 0, 92, 857, 1, 0, 0, 0, 94, 868, 1, 0, 0,
		0, 96, 873, 1, 0, 0, 0, 98, 875, 1, 0, 0, 0, 100, 877, 1, 0, 0, 0, 102,
		884, 1, 0, 0, 0, 104, 892, 1, 0, 0, 0, 106, 903, 1, 0, 0, 0, 108, 905,
		1, 0, 0, 0, 110, 924, 1, 0, 0, 0, 112, 926, 1, 0, 0, 0, 114, 955, 1, 0,
		0, 0, 116, 957, 1, 0, 0, 0, 118, 961, 1, 0, 0, 0, 120, 974, 1, 0, 0, 0,
		122, 126, 3, 2, 1, 0, 123, 126, 3, 4, 2, 0, 124, 126, 3, 6, 3, 0, 125,
		122, 1, 0, 0, 0, 125, 123, 1, 0, 0, 0, 125, 124, 1, 0, 0, 0, 125, 126,
		1, 0, 0, 0, 126, 127, 1, 0, 0, 0, 127, 128, 5, 0, 0, 1, 128, 1, 1, 0, 0,
		0, 129, 135, 5, 3, 0, 0, 130, 135, 3, 42, 21, 0, 131, 132, 3, 10, 5, 0,
		132, 133, 5, 3, 0, 0, 133, 135, 1, 0, 0, 0, 134, 129, 1, 0, 0, 0, 134,
		130, 1, 0, 0, 0, 134, 131, 1, 0, 0, 0, 135, 3, 1, 0, 0, 0, 136, 139, 5,
		3, 0, 0, 137, 139, 3, 8, 4, 0, 138, 136, 1, 0, 0, 0, 138, 137, 1, 0, 0,
		0, 139, 140, 1, 0, 0, 0, 140, 138, 1, 0, 0, 0, 140, 141, 1, 0, 0, 0, 141,
		5, 1, 0, 0, 0, 142, 146, 3, 90, 45, 0, 143, 145, 5, 3, 0, 0, 144, 143,
		1, 0, 0, 0, 145, 148, 1, 0, 0, 0, 146, 144, 1, 0, 0, 0, 146, 147, 1, 0,
		0, 0, 147, 7, 1, 0, 0, 0, 148, 146, 1, 0, 0, 0, 149, 152, 3, 42, 21, 0,
		150, 152, 3, 10, 5, 0, 151, 149, 1, 0, 0, 0, 151, 150, 1, 0, 0, 0, 152,
		9, 1, 0, 0, 0, 153, 154, 5, 13, 0, 0, 154, 155, 3, 66, 33, 0, 155, 156,
		5, 46, 0, 0, 156, 160, 3, 12, 6, 0, 157, 159, 3, 16, 8, 0, 158, 157, 1,
		0, 0, 0, 159, 162, 1, 0, 0, 0, 160, 158, 1, 0, 0, 0, 160, 161, 1, 0, 0,
		0, 161, 164, 1, 0, 0, 0, 162, 160, 1, 0, 0, 0, 163, 165, 3, 18, 9, 0, 164,
		163, 1, 0, 0, 0, 164, 165, 1, 0, 0, 0, 165, 228, 1, 0, 0, 0, 166, 167,
		5, 16, 0, 0, 167, 168, 3, 66, 33, 0, 168, 169, 5, 46, 0, 0, 169, 171, 3,
		12, 6, 0, 170, 172, 3, 18, 9, 0, 171, 170, 1, 0, 0, 0, 171, 172, 1, 0,
		0, 0, 172, 228, 1, 0, 0, 0, 173, 175, 5, 35, 0, 0, 174, 173, 1, 0, 0, 0,
		174, 175, 1, 0, 0, 0, 175, 176, 1, 0, 0, 0, 176, 177, 5, 17, 0, 0, 177,
		178, 3, 56, 28, 0, 178, 179, 5, 18, 0, 0, 179, 180, 3, 90, 45, 0, 180,
		181, 5, 46, 0, 0, 181, 183, 3, 12, 6, 0, 182, 184, 3, 18, 9, 0, 183, 182,
		1, 0, 0, 0, 183, 184, 1, 0, 0, 0, 184, 228, 1, 0, 0, 0, 185, 186, 5, 19,
		0, 0, 186, 187, 5, 46, 0, 0, 187, 200, 3, 12, 6, 0, 188, 190, 3, 24, 12,
		0, 189, 188, 1, 0, 0, 0, 190, 191, 1, 0, 0, 0, 191, 189, 1, 0, 0, 0, 191,
		192, 1, 0, 0, 0, 192, 194, 1, 0, 0, 0, 193, 195, 3, 18, 9, 0, 194, 193,
		1, 0, 0, 0, 194, 195, 1, 0, 0, 0, 195, 197, 1, 0, 0, 0, 196, 198, 3, 20,
		10, 0, 197, 196, 1, 0, 0, 0, 197, 198, 1, 0, 0, 0, 198, 201, 1, 0, 0, 0,
		199, 201, 3, 20, 10, 0, 200, 189, 1, 0, 0, 0, 200, 199, 1, 0, 0, 0, 201,
		228, 1, 0, 0, 0, 202, 204, 5, 35, 0, 0, 203, 202, 1, 0, 0, 0, 203, 204,
		1, 0, 0, 0, 204, 205, 1, 0, 0, 0, 205, 206, 5, 22, 0, 0, 206, 211, 3, 22,
		11, 0, 207, 208, 5, 45, 0, 0, 208, 210, 3, 22, 11, 0, 209, 207, 1, 0, 0,
		0, 210, 213, 1, 0, 0, 0, 211, 209, 1, 0, 0, 0, 211, 212, 1, 0, 0, 0, 212,
		214, 1, 0, 0, 0, 213, 211, 1, 0, 0, 0, 214, 215, 5, 46, 0, 0, 215, 216,
		3, 12, 6, 0, 216, 228, 1, 0, 0, 0, 217, 219, 3, 14, 7, 0, 218, 217, 1,
		0, 0, 0, 219, 222, 1, 0, 0, 0, 220, 218, 1, 0, 0, 0, 220, 221, 1, 0, 0,
		0, 221, 225, 1, 0, 0, 0, 222, 220, 1, 0, 0, 0, 223, 226, 3, 26, 13, 0,
		224, 226, 3, 28, 14, 0, 225, 223, 1, 0, 0, 0, 225, 224, 1, 0, 0, 0, 226,
		228, 1, 0, 0, 0, 227, 153, 1, 0, 0, 0, 227, 166, 1, 0, 0, 0, 227, 174,
		1, 0, 0, 0, 227, 185, 1, 0, 0, 0, 227, 203, 1, 0, 0, 0, 227, 220, 1, 0,
		0, 0, 228, 11, 1, 0, 0, 0, 229, 240, 3, 42, 21, 0, 230, 231, 5, 3, 0, 0,
		231, 233, 5, 1, 0, 0, 232, 234, 3, 8, 4, 0, 233, 232, 1, 0, 0, 0, 234,
		235, 1, 0, 0, 0, 235, 233, 1, 0, 0, 0, 235, 236, 1, 0, 0, 0, 236, 237,
		1, 0, 0, 0, 237, 238, 5, 2, 0, 0, 238, 240, 1, 0, 0, 0, 239, 229, 1, 0,
		0, 0, 239, 230, 1, 0, 0, 0, 240, 13, 1, 0, 0, 0, 241, 242, 5, 68, 0, 0,
		242, 248, 3, 92, 46, 0, 243, 245, 5, 90, 0, 0, 244, 246, 3, 108, 54, 0,
		245, 244, 1, 0, 0, 0, 245, 246, 1, 0, 0, 0, 246, 247, 1, 0, 0, 0, 247,
		249, 5, 91, 0, 0, 248, 243, 1, 0, 0, 0, 248, 249, 1, 0, 0, 0, 249, 250,
		1, 0, 0, 0, 250, 251, 5, 3, 0, 0, 251, 15, 1, 0, 0, 0, 252, 253, 5, 14,
		0, 0, 253, 254, 3, 66, 33, 0, 254, 255, 5, 46, 0, 0, 255, 256, 3, 12, 6,
		0, 256, 17, 1, 0, 0, 0, 257, 258, 5, 15, 0, 0, 258, 259, 5, 46, 0, 0, 259,
		260, 3, 12, 6, 0, 260, 19, 1, 0, 0, 0, 261, 262, 5, 21, 0, 0, 262, 263,
		5, 46, 0, 0, 263, 264, 3, 12, 6, 0, 264, 21, 1, 0, 0, 0, 265, 268, 3, 66,
		33, 0, 266, 267, 5, 10, 0, 0, 267, 269, 3, 82, 41, 0, 268, 266, 1, 0, 0,
		0, 268, 269, 1, 0, 0, 0, 269, 23, 1, 0, 0, 0, 270, 284, 5, 23, 0, 0, 271,
		282, 3, 66, 33, 0, 272, 273, 4, 12, 0, 0, 273, 274, 5, 45, 0, 0, 274, 275,
		3, 94, 47, 0, 275, 276, 6, 12, -1, 0, 276, 283, 1, 0, 0, 0, 277, 278, 4,
		12, 1, 0, 278, 279, 5, 10, 0, 0, 279, 280, 3, 94, 47, 0, 280, 281, 6, 12,
		-1, 0, 281, 283, 1, 0, 0, 0, 282, 272, 1, 0, 0, 0, 282, 277, 1, 0, 0, 0,
		282, 283, 1, 0, 0, 0, 283, 285, 1, 0, 0, 0, 284, 271, 1, 0, 0, 0, 284,
		285, 1, 0, 0, 0, 285, 286, 1, 0, 0, 0, 286, 287, 5, 46, 0, 0, 287, 288,
		3, 12, 6, 0, 288, 25, 1, 0, 0, 0, 289, 290, 5, 29, 0, 0, 290, 296, 3, 94,
		47, 0, 291, 293, 5, 90, 0, 0, 292, 294, 3, 108, 54, 0, 293, 292, 1, 0,
		0, 0, 293, 294, 1, 0, 0, 0, 294, 295, 1, 0, 0, 0, 295, 297, 5, 91, 0, 0,
		296, 291, 1, 0, 0, 0, 296, 297, 1, 0, 0, 0, 297, 298, 1, 0, 0, 0, 298,
		299, 5, 46, 0, 0, 299, 300, 3, 12, 6, 0, 300, 27, 1, 0, 0, 0, 301, 303,
		5, 35, 0, 0, 302, 301, 1, 0, 0, 0, 302, 303, 1, 0, 0, 0, 303, 304, 1, 0,
		0, 0, 304, 305, 5, 4, 0, 0, 305, 306, 3, 94, 47, 0, 306, 308, 5, 90, 0,
		0, 307, 309, 3, 30, 15, 0, 308, 307, 1, 0, 0, 0, 308, 309, 1, 0, 0, 0,
		309, 310, 1, 0, 0, 0, 310, 313, 5, 91, 0, 0, 311, 312, 5, 69, 0, 0, 312,
		314, 3, 66, 33, 0, 313, 311, 1, 0, 0, 0, 313, 314, 1, 0, 0, 0, 314, 315,
		1, 0, 0, 0, 315, 316, 5, 46, 0, 0, 316, 317, 3, 12, 6, 0, 317, 29, 1, 0,
		0, 0, 318, 319, 3, 36, 18, 0, 319, 320, 5, 45, 0, 0, 320, 322, 1, 0, 0,
		0, 321, 318, 1, 0, 0, 0, 321, 322, 1, 0, 0, 0, 322, 333, 1, 0, 0, 0, 323,
		326, 3, 32, 16, 0, 324, 325, 5, 45, 0, 0, 325, 327, 3, 36, 18, 0, 326,
		324, 1, 0, 0, 0, 326, 327, 1, 0, 0, 0, 327, 330, 1, 0, 0, 0, 328, 329,
		5, 45, 0, 0, 329, 331, 3, 34, 17, 0, 330, 328, 1, 0, 0, 0, 330, 331, 1,
		0, 0, 0, 331, 334, 1, 0, 0, 0, 332, 334, 3, 34, 17, 0, 333, 323, 1, 0,
		0, 0, 333, 332, 1, 0, 0, 0, 334, 336, 1, 0, 0, 0, 335, 337, 5, 45, 0, 0,
		336, 335, 1, 0, 0, 0, 336, 337, 1, 0, 0, 0, 337, 343, 1, 0, 0, 0, 338,
		340, 3, 36, 18, 0, 339, 341, 5, 45, 0, 0, 340, 339, 1, 0, 0, 0, 340, 341,
		1, 0, 0, 0, 341, 343, 1, 0, 0, 0, 342, 321, 1, 0, 0, 0, 342, 338, 1, 0,
		0, 0, 343, 31, 1, 0, 0, 0, 344, 345, 5, 44, 0, 0, 345, 346, 3, 40, 20,
		0, 346, 33, 1, 0, 0, 0, 347, 348, 5, 48, 0, 0, 348, 349, 3, 40, 20, 0,
		349, 35, 1, 0, 0, 0, 350, 355, 3, 38, 19, 0, 351, 352, 5, 45, 0, 0, 352,
		354, 3, 38, 19, 0, 353, 351, 1, 0, 0, 0, 354, 357, 1, 0, 0, 0, 355, 353,
		1, 0, 0, 0, 355, 356, 1, 0, 0, 0, 356, 37, 1, 0, 0, 0, 357, 355, 1, 0,
		0, 0, 358, 361, 3, 40, 20, 0, 359, 360, 5, 49, 0, 0, 360, 362, 3, 66, 33,
		0, 361, 359, 1, 0, 0, 0, 361, 362, 1, 0, 0, 0, 362, 365, 1, 0, 0, 0, 363,
		365, 5, 44, 0, 0, 364, 358, 1, 0, 0, 0, 364, 363, 1, 0, 0, 0, 365, 39,
		1, 0, 0, 0, 366, 369, 3, 94, 47, 0, 367, 368, 5, 46, 0, 0, 368, 370, 3,
		66, 33, 0, 369, 367, 1, 0, 0, 0, 369, 370, 1, 0, 0, 0, 370, 41, 1, 0, 0,
		0, 371, 376, 3, 44, 22, 0, 372, 373, 5, 47, 0, 0, 373, 375, 3, 44, 22,
		0, 374, 372, 1, 0, 0, 0, 375, 378, 1, 0, 0, 0, 376, 374, 1, 0, 0, 0, 376,
		377, 1, 0, 0, 0, 377, 380, 1, 0, 0, 0, 378, 376, 1, 0, 0, 0, 379, 381,
		5, 47, 0, 0, 380, 379, 1, 0, 0, 0, 380, 381, 1, 0, 0, 0, 381, 382, 1, 0,
		0, 0, 382, 383, 7, 0, 0, 0, 383, 43, 1, 0, 0, 0, 384, 386, 3, 50, 25, 0,
		385, 387, 3, 54, 27, 0, 386, 385, 1, 0, 0, 0, 386, 387, 1, 0, 0, 0, 387,
		490, 1, 0, 0, 0, 388, 389, 4, 22, 2, 0, 389, 412, 5, 37, 0, 0, 390, 395,
		3, 66, 33, 0, 391, 392, 5, 45, 0, 0, 392, 394, 3, 66, 33, 0, 393, 391,
		1, 0, 0, 0, 394, 397, 1, 0, 0, 0, 395, 393, 1, 0, 0, 0, 395, 396, 1, 0,
		0, 0, 396, 399, 1, 0, 0, 0, 397, 395, 1, 0, 0, 0, 398, 400, 5, 45, 0, 0,
		399, 398, 1, 0, 0, 0, 399, 400, 1, 0, 0, 0, 400, 413, 1, 0, 0, 0, 401,
		402, 5, 54, 0, 0, 402, 405, 3, 66, 33, 0, 403, 404, 5, 45, 0, 0, 404, 406,
		3, 66, 33, 0, 405, 403, 1, 0, 0, 0, 406, 407, 1, 0, 0, 0, 407, 405, 1,
		0, 0, 0, 407, 408, 1, 0, 0, 0, 408, 410, 1, 0, 0, 0, 409, 411, 5, 45, 0,
		0, 410, 409, 1, 0, 0, 0, 410, 411, 1, 0, 0, 0, 411, 413, 1, 0, 0, 0, 412,
		390, 1, 0, 0, 0, 412, 401, 1, 0, 0, 0, 413, 414, 1, 0, 0, 0, 414, 415,
		6, 22, -1, 0, 415, 490, 1, 0, 0, 0, 416, 417, 5, 31, 0, 0, 417, 490, 3,
		56, 28, 0, 418, 490, 5, 32, 0, 0, 419, 490, 5, 34, 0, 0, 420, 490, 5, 33,
		0, 0, 421, 423, 5, 5, 0, 0, 422, 424, 3, 90, 45, 0, 423, 422, 1, 0, 0,
		0, 423, 424, 1, 0, 0, 0, 424, 490, 1, 0, 0, 0, 425, 435, 5, 6, 0, 0, 426,
		433, 3, 66, 33, 0, 427, 428, 5, 45, 0, 0, 428, 431, 3, 66, 33, 0, 429,
		430, 5, 45, 0, 0, 430, 432, 3, 66, 33, 0, 431, 429, 1, 0, 0, 0, 431, 432,
		1, 0, 0, 0, 432, 434, 1, 0, 0, 0, 433, 427, 1, 0, 0, 0, 433, 434, 1, 0,
		0, 0, 434, 436, 1, 0, 0, 0, 435, 426, 1, 0, 0, 0, 435, 436, 1, 0, 0, 0,
		436, 439, 1, 0, 0, 0, 437, 438, 5, 7, 0, 0, 438, 440, 3, 66, 33, 0, 439,
		437, 1, 0, 0, 0, 439, 440, 1, 0, 0, 0, 440, 490, 1, 0, 0, 0, 441, 490,
		3, 100, 50, 0, 442, 443, 5, 8, 0, 0, 443, 490, 3, 62, 31, 0, 444, 445,
		5, 7, 0, 0, 445, 446, 3, 46, 23, 0, 446, 447, 5, 8, 0, 0, 447, 448, 3,
		48, 24, 0, 448, 490, 1, 0, 0, 0, 449, 450, 5, 11, 0, 0, 450, 455, 3, 94,
		47, 0, 451, 452, 5, 45, 0, 0, 452, 454, 3, 94, 47, 0, 453, 451, 1, 0, 0,
		0, 454, 457, 1, 0, 0, 0, 455, 453, 1, 0, 0, 0, 455, 456, 1, 0, 0, 0, 456,
		490, 1, 0, 0, 0, 457, 455, 1, 0, 0, 0, 458, 459, 4, 22, 3, 0, 459, 460,
		5, 38, 0, 0, 460, 467, 3, 82, 41, 0, 461, 462, 5, 18, 0, 0, 462, 465, 3,
		66, 33, 0, 463, 464, 5, 45, 0, 0, 464, 466, 3, 66, 33, 0, 465, 463, 1,
		0, 0, 0, 465, 466, 1, 0, 0, 0, 466, 468, 1, 0, 0, 0, 467, 461, 1, 0, 0,
		0, 467, 468, 1, 0, 0, 0, 468, 469, 1, 0, 0, 0, 469, 470, 6, 22, -1, 0,
		470, 490, 1, 0, 0, 0, 471, 472, 5, 12, 0, 0, 472, 475, 3, 66, 33, 0, 473,
		474, 5, 45, 0, 0, 474, 476, 3, 66, 33, 0, 475, 473, 1, 0, 0, 0, 475, 476,
		1, 0, 0, 0, 476, 490, 1, 0, 0, 0, 477, 478, 4, 22, 4, 0, 478, 479, 5, 9,
		0, 0, 479, 484, 3, 94, 47, 0, 480, 481, 5, 45, 0, 0, 481, 483, 3, 94, 47,
		0, 482, 480, 1, 0, 0, 0, 483, 486, 1, 0, 0, 0, 484, 482, 1, 0, 0, 0, 484,
		485, 1, 0, 0, 0, 485, 487, 1, 0, 0, 0, 486, 484, 1, 0, 0, 0, 487, 488,
		6, 22, -1, 0, 488, 490, 1, 0, 0, 0, 489, 384, 1, 0, 0, 0, 489, 388, 1,
		0, 0, 0, 489, 416, 1, 0, 0, 0, 489, 418, 1, 0, 0, 0, 489, 419, 1, 0, 0,
		0, 489, 420, 1, 0, 0, 0, 489, 421, 1, 0, 0, 0, 489, 425, 1, 0, 0, 0, 489,
		441, 1, 0, 0, 0, 489, 442, 1, 0, 0, 0, 489, 444, 1, 0, 0, 0, 489, 449,
		1, 0, 0, 0, 489, 458, 1, 0, 0, 0, 489, 471, 1, 0, 0, 0, 489, 477, 1, 0,
		0, 0, 490, 45, 1, 0, 0, 0, 491, 493, 7, 1, 0, 0, 492, 491, 1, 0, 0, 0,
		493, 496, 1, 0, 0, 0, 494, 492, 1, 0, 0, 0, 494, 495, 1, 0, 0, 0, 495,
		497, 1, 0, 0, 0, 496, 494, 1, 0, 0, 0, 497, 504, 3, 92, 46, 0, 498, 500,
		7, 1, 0, 0, 499, 498, 1, 0, 0, 0, 500, 501, 1, 0, 0, 0, 501, 499, 1, 0,
		0, 0, 501, 502, 1, 0, 0, 0, 502, 504, 1, 0, 0, 0, 503, 494, 1, 0, 0, 0,
		503, 499, 1, 0, 0, 0, 504, 47, 1, 0, 0, 0, 505, 512, 5, 44, 0, 0, 506,
		507, 5, 90, 0, 0, 507, 508, 3, 58, 29, 0, 508, 509, 5, 91, 0, 0, 509, 512,
		1, 0, 0, 0, 510, 512, 3, 58, 29, 0, 511, 505, 1, 0, 0, 0, 511, 506, 1,
		0, 0, 0, 511, 510, 1, 0, 0, 0, 512, 49, 1, 0, 0, 0, 513, 516, 3, 66, 33,
		0, 514, 516, 3, 52, 26, 0, 515, 513, 1, 0, 0, 0, 515, 514, 1, 0, 0, 0,
		516, 517, 1, 0, 0, 0, 517, 518, 5, 45, 0, 0, 518, 520, 1, 0, 0, 0, 519,
		515, 1, 0, 0, 0, 520, 521, 1, 0, 0, 0, 521, 519, 1, 0, 0, 0, 521, 522,
		1, 0, 0, 0, 522, 525, 1, 0, 0, 0, 523, 526, 3, 66, 33, 0, 524, 526, 3,
		52, 26, 0, 525, 523, 1, 0, 0, 0, 525, 524, 1, 0, 0, 0, 525, 526, 1, 0,
		0, 0, 526, 529, 1, 0, 0, 0, 527, 529, 3, 90, 45, 0, 528, 519, 1, 0, 0,
		0, 528, 527, 1, 0, 0, 0, 529, 51, 1, 0, 0, 0, 530, 531, 5, 44, 0, 0, 531,
		532, 3, 82, 41, 0, 532, 53, 1, 0, 0, 0, 533, 547, 5, 49, 0, 0, 534, 539,
		3, 50, 25, 0, 535, 536, 5, 49, 0, 0, 536, 538, 3, 50, 25, 0, 537, 535,
		1, 0, 0, 0, 538, 541, 1, 0, 0, 0, 539, 537, 1, 0, 0, 0, 539, 540, 1, 0,
		0, 0, 540, 544, 1, 0, 0, 0, 541, 539, 1, 0, 0, 0, 542, 543, 5, 49, 0, 0,
		543, 545, 3, 100, 50, 0, 544, 542, 1, 0, 0, 0, 544, 545, 1, 0, 0, 0, 545,
		548, 1, 0, 0, 0, 546, 548, 3, 100, 50, 0, 547, 534, 1, 0, 0, 0, 547, 546,
		1, 0, 0, 0, 548, 564, 1, 0, 0, 0, 549, 550, 4, 27, 5, 0, 550, 551, 5, 46,
		0, 0, 551, 554, 3, 66, 33, 0, 552, 553, 5, 49, 0, 0, 553, 555, 3, 90, 45,
		0, 554, 552, 1, 0, 0, 0, 554, 555, 1, 0, 0, 0, 555, 556, 1, 0, 0, 0, 556,
		557, 6, 27, -1, 0, 557, 564, 1, 0, 0, 0, 558, 561, 7, 2, 0, 0, 559, 562,
		3, 100, 50, 0, 560, 562, 3, 90, 45, 0, 561, 559, 1, 0, 0, 0, 561, 560,
		1, 0, 0, 0, 562, 564, 1, 0, 0, 0, 563, 533, 1, 0, 0, 0, 563, 549, 1, 0,
		0, 0, 563, 558, 1, 0, 0, 0, 564, 55, 1, 0, 0, 0, 565, 570, 3, 82, 41, 0,
		566, 567, 5, 45, 0, 0, 567, 569, 3, 82, 41, 0, 568, 566, 1, 0, 0, 0, 569,
		572, 1, 0, 0, 0, 570, 568, 1, 0, 0, 0, 570, 571, 1, 0, 0, 0, 571, 574,
		1, 0, 0, 0, 572, 570, 1, 0, 0, 0, 573, 575, 5, 45, 0, 0, 574, 573, 1, 0,
		0, 0, 574, 575, 1, 0, 0, 0, 575, 57, 1, 0, 0, 0, 576, 581, 3, 60, 30, 0,
		577, 578, 5, 45, 0, 0, 578, 580, 3, 60, 30, 0, 579, 577, 1, 0, 0, 0, 580,
		583, 1, 0, 0, 0, 581, 579, 1, 0, 0, 0, 581, 582, 1, 0, 0, 0, 582, 585,
		1, 0, 0, 0, 583, 581, 1, 0, 0, 0, 584, 586, 5, 45, 0, 0, 585, 584, 1, 0,
		0, 0, 585, 586, 1, 0, 0, 0, 586, 59, 1, 0, 0, 0, 587, 590, 3, 94, 47, 0,
		588, 589, 5, 10, 0, 0, 589, 591, 3, 94, 47, 0, 590, 588, 1, 0, 0, 0, 590,
		591, 1, 0, 0, 0, 591, 61, 1, 0, 0, 0, 592, 597, 3, 64, 32, 0, 593, 594,
		5, 45, 0, 0, 594, 596, 3, 64, 32, 0, 595, 593, 1, 0, 0, 0, 596, 599, 1,
		0, 0, 0, 597, 595, 1, 0, 0, 0, 597, 598, 1, 0, 0, 0, 598, 63, 1, 0, 0,
		0, 599, 597, 1, 0, 0, 0, 600, 603, 3, 92, 46, 0, 601, 602, 5, 10, 0, 0,
		602, 604, 3, 94, 47, 0, 603, 601, 1, 0, 0, 0, 603, 604, 1, 0, 0, 0, 604,
		65, 1, 0, 0, 0, 605, 611, 3, 78, 39, 0, 606, 607, 5, 13, 0, 0, 607, 608,
		3, 78, 39, 0, 608, 609, 5, 15, 0, 0, 609, 610, 3, 66, 33, 0, 610, 612,
		1, 0, 0, 0, 611, 606, 1, 0, 0, 0, 611, 612, 1, 0, 0, 0, 612, 620, 1, 0,
		0, 0, 613, 615, 5, 24, 0, 0, 614, 616, 3, 68, 34, 0, 615, 614, 1, 0, 0,
		0, 615, 616, 1, 0, 0, 0, 616, 617, 1, 0, 0, 0, 617, 618, 5, 46, 0, 0, 618,
		620, 3, 66, 33, 0, 619, 605, 1, 0, 0, 0, 619, 613, 1, 0, 0, 0, 620, 67,
		1, 0, 0, 0, 621, 622, 3, 70, 35, 0, 622, 623, 5, 45, 0, 0, 623, 625, 1,
		0, 0, 0, 624, 621, 1, 0, 0, 0, 624, 625, 1, 0, 0, 0, 625, 636, 1, 0, 0,
		0, 626, 629, 3, 74, 37, 0, 627, 628, 5, 45, 0, 0, 628, 630, 3, 70, 35,
		0, 629, 627, 1, 0, 0, 0, 629, 630, 1, 0, 0, 0, 630, 633, 1, 0, 0, 0, 631,
		632, 5, 45, 0, 0, 632, 634, 3, 76, 38, 0, 633, 631, 1, 0, 0, 0, 633, 634,
		1, 0, 0, 0, 634, 637, 1, 0, 0, 0, 635, 637, 3, 76, 38, 0, 636, 626, 1,
		0, 0, 0, 636, 635, 1, 0, 0, 0, 637, 639, 1, 0, 0, 0, 638, 640, 5, 45, 0,
		0, 639, 638, 1, 0, 0, 0, 639, 640, 1, 0, 0, 0, 640, 646, 1, 0, 0, 0, 641,
		643, 3, 70, 35, 0, 642, 644, 5, 45, 0, 0, 643, 642, 1, 0, 0, 0, 643, 644,
		1, 0, 0, 0, 644, 646, 1, 0, 0, 0, 645, 624, 1, 0, 0, 0, 645, 641, 1, 0,
		0, 0, 646, 69, 1, 0, 0, 0, 647, 652, 3, 72, 36, 0, 648, 649, 5, 45, 0,
		0, 649, 651, 3, 72, 36, 0, 650, 648, 1, 0, 0, 0, 651, 654, 1, 0, 0, 0,
		652, 650, 1, 0, 0, 0, 652, 653, 1, 0, 0, 0, 653, 71, 1, 0, 0, 0, 654, 652,
		1, 0, 0, 0, 655, 658, 3, 94, 47, 0, 656, 657, 5, 49, 0, 0, 657, 659, 3,
		66, 33, 0, 658, 656, 1, 0, 0, 0, 658, 659, 1, 0, 0, 0, 659, 662, 1, 0,
		0, 0, 660, 662, 5, 44, 0, 0, 661, 655, 1, 0, 0, 0, 661, 660, 1, 0, 0, 0,
		662, 73, 1, 0, 0, 0, 663, 664, 5, 44, 0, 0, 664, 665, 3, 94, 47, 0, 665,
		75, 1, 0, 0, 0, 666, 667, 5, 48, 0, 0, 667, 668, 3, 94, 47, 0, 668, 77,
		1, 0, 0, 0, 669, 670, 6, 39, -1, 0, 670, 674, 3, 80, 40, 0, 671, 672, 5,
		27, 0, 0, 672, 674, 3, 78, 39, 3, 673, 669, 1, 0, 0, 0, 673, 671, 1, 0,
		0, 0, 674, 683, 1, 0, 0, 0, 675, 676, 10, 2, 0, 0, 676, 677, 5, 26, 0,
		0, 677, 682, 3, 78, 39, 3, 678, 679, 10, 1, 0, 0, 679, 680, 5, 25, 0, 0,
		680, 682, 3, 78, 39, 2, 681, 675, 1, 0, 0, 0, 681, 678, 1, 0, 0, 0, 682,
		685, 1, 0, 0, 0, 683, 681, 1, 0, 0, 0, 683, 684, 1, 0, 0, 0, 684, 79, 1,
		0, 0, 0, 685, 683, 1, 0, 0, 0, 686, 687, 6, 40, -1, 0, 687, 688, 3, 82,
		41, 0, 688, 710, 1, 0, 0, 0, 689, 705, 10, 2, 0, 0, 690, 706, 5, 61, 0,
		0, 691, 706, 5, 62, 0, 0, 692, 706, 5, 63, 0, 0, 693, 706, 5, 64, 0, 0,
		694, 706, 5, 65, 0, 0, 695, 706, 5, 66, 0, 0, 696, 706, 5, 67, 0, 0, 697,
		699, 5, 27, 0, 0, 698, 697, 1, 0, 0, 0, 698, 699, 1, 0, 0, 0, 699, 700,
		1, 0, 0, 0, 700, 706, 5, 18, 0, 0, 701, 703, 5, 28, 0, 0, 702, 704, 5,
		27, 0, 0, 703, 702, 1, 0, 0, 0, 703, 704, 1, 0, 0, 0, 704, 706, 1, 0, 0,
		0, 705, 690, 1, 0, 0, 0, 705, 691, 1, 0, 0, 0, 705, 692, 1, 0, 0, 0, 705,
		693, 1, 0, 0, 0, 705, 694, 1, 0, 0, 0, 705, 695, 1, 0, 0, 0, 705, 696,
		1, 0, 0, 0, 705, 698, 1, 0, 0, 0, 705, 701, 1, 0, 0, 0, 706, 707, 1, 0,
		0, 0, 707, 709, 3, 80, 40, 3, 708, 689, 1, 0, 0, 0, 709, 712, 1, 0, 0,
		0, 710, 708, 1, 0, 0, 0, 710, 711, 1, 0, 0, 0, 711, 81, 1, 0, 0, 0, 712,
		710, 1, 0, 0, 0, 713, 715, 6, 41, -1, 0, 714, 716, 5, 36, 0, 0, 715, 714,
		1, 0, 0, 0, 715, 716, 1, 0, 0, 0, 716, 717, 1, 0, 0, 0, 717, 721, 3, 84,
		42, 0, 718, 720, 3, 104, 52, 0, 719, 718, 1, 0, 0, 0, 720, 723, 1, 0, 0,
		0, 721, 719, 1, 0, 0, 0, 721, 722, 1, 0, 0, 0, 722, 727, 1, 0, 0, 0, 723,
		721, 1, 0, 0, 0, 724, 725, 7, 3, 0, 0, 725, 727, 3, 82, 41, 7, 726, 713,
		1, 0, 0, 0, 726, 724, 1, 0, 0, 0, 727, 751, 1, 0, 0, 0, 728, 729, 10, 8,
		0, 0, 729, 730, 5, 48, 0, 0, 730, 750, 3, 82, 41, 8, 731, 732, 10, 6, 0,
		0, 732, 733, 7, 4, 0, 0, 733, 750, 3, 82, 41, 7, 734, 735, 10, 5, 0, 0,
		735, 736, 7, 5, 0, 0, 736, 750, 3, 82, 41, 6, 737, 738, 10, 4, 0, 0, 738,
		739, 7, 6, 0, 0, 739, 750, 3, 82, 41, 5, 740, 741, 10, 3, 0, 0, 741, 742,
		5, 52, 0, 0, 742, 750, 3, 82, 41, 4, 743, 744, 10, 2, 0, 0, 744, 745, 5,
		51, 0, 0, 745, 750, 3, 82, 41, 3, 746, 747, 10, 1, 0, 0, 747, 748, 5, 50,
		0, 0, 748, 750, 3, 82, 41, 2, 749, 728, 1, 0, 0, 0, 749, 731, 1, 0, 0,
		0, 749, 734, 1, 0, 0, 0, 749, 737, 1, 0, 0, 0, 749, 740, 1, 0, 0, 0, 749,
		743, 1, 0, 0, 0, 749, 746, 1, 0, 0, 0, 750, 753, 1, 0, 0, 0, 751, 749,
		1, 0, 0, 0, 751, 752, 1, 0, 0, 0, 752, 83, 1, 0, 0, 0, 753, 751, 1, 0,
		0, 0, 754, 757, 5, 90, 0, 0, 755, 758, 3, 100, 50, 0, 756, 758, 3, 88,
		44, 0, 757, 755, 1, 0, 0, 0, 757, 756, 1, 0, 0, 0, 757, 758, 1, 0, 0, 0,
		758, 759, 1, 0, 0, 0, 759, 792, 5, 91, 0, 0, 760, 762, 5, 94, 0, 0, 761,
		763, 3, 88, 44, 0, 762, 761, 1, 0, 0, 0, 762, 763, 1, 0, 0, 0, 763, 764,
		1, 0, 0, 0, 764, 792, 5, 95, 0, 0, 765, 767, 5, 92, 0, 0, 766, 768, 3,
		86, 43, 0, 767, 766, 1, 0, 0, 0, 767, 768, 1, 0, 0, 0, 768, 769, 1, 0,
		0, 0, 769, 792, 5, 93, 0, 0, 770, 771, 5, 43, 0, 0, 771, 773, 3, 90, 45,
		0, 772, 774, 5, 45, 0, 0, 773, 772, 1, 0, 0, 0, 773, 774, 1, 0, 0, 0, 774,
		775, 1, 0, 0, 0, 775, 776, 5, 43, 0, 0, 776, 792, 1, 0, 0, 0, 777, 792,
		5, 42, 0, 0, 778, 792, 3, 94, 47, 0, 779, 792, 5, 37, 0, 0, 780, 792, 5,
		38, 0, 0, 781, 783, 5, 56, 0, 0, 782, 781, 1, 0, 0, 0, 782, 783, 1, 0,
		0, 0, 783, 784, 1, 0, 0, 0, 784, 792, 3, 96, 48, 0, 785, 792, 5, 20, 0,
		0, 786, 788, 5, 83, 0, 0, 787, 786, 1, 0, 0, 0, 788, 789, 1, 0, 0, 0, 789,
		787, 1, 0, 0, 0, 789, 790, 1, 0, 0, 0, 790, 792, 1, 0, 0, 0, 791, 754,
		1, 0, 0, 0, 791, 760, 1, 0, 0, 0, 791, 765, 1, 0, 0, 0, 791, 770, 1, 0,
		0, 0, 791, 777, 1, 0, 0, 0, 791, 778, 1, 0, 0, 0, 791, 779, 1, 0, 0, 0,
		791, 780, 1, 0, 0, 0, 791, 782, 1, 0, 0, 0, 791, 785, 1, 0, 0, 0, 791,
		787, 1, 0, 0, 0, 792, 85, 1, 0, 0, 0, 793, 794, 3, 66, 33, 0, 794, 795,
		5, 46, 0, 0, 795, 796, 3, 66, 33, 0, 796, 800, 1, 0, 0, 0, 797, 798, 5,
		48, 0, 0, 798, 800, 3, 82, 41, 0, 799, 793, 1, 0, 0, 0, 799, 797, 1, 0,
		0, 0, 800, 812, 1, 0, 0, 0, 801, 808, 5, 45, 0, 0, 802, 803, 3, 66, 33,
		0, 803, 804, 5, 46, 0, 0, 804, 805, 3, 66, 33, 0, 805, 809, 1, 0, 0, 0,
		806, 807, 5, 48, 0, 0, 807, 809, 3, 82, 41, 0, 808, 802, 1, 0, 0, 0, 808,
		806, 1, 0, 0, 0, 809, 811, 1, 0, 0, 0, 810, 801, 1, 0, 0, 0, 811, 814,
		1, 0, 0, 0, 812, 810, 1, 0, 0, 0, 812, 813, 1, 0, 0, 0, 813, 816, 1, 0,
		0, 0, 814, 812, 1, 0, 0, 0, 815, 817, 5, 45, 0, 0, 816, 815, 1, 0, 0, 0,
		816, 817, 1, 0, 0, 0, 817, 825, 1, 0, 0, 0, 818, 819, 3, 66, 33, 0, 819,
		820, 5, 46, 0, 0, 820, 821, 3, 66, 33, 0, 821, 822, 3, 118, 59, 0, 822,
		825, 1, 0, 0, 0, 823, 825, 3, 88, 44, 0, 824, 799, 1, 0, 0, 0, 824, 818,
		1, 0, 0, 0, 824, 823, 1, 0, 0, 0, 825, 87, 1, 0, 0, 0, 826, 829, 3, 66,
		33, 0, 827, 829, 3, 52, 26, 0, 828, 826, 1, 0, 0, 0, 828, 827, 1, 0, 0,
		0, 829, 844, 1, 0, 0, 0, 830, 845, 3, 118, 59, 0, 831, 834, 5, 45, 0, 0,
		832, 835, 3, 66, 33, 0, 833, 835, 3, 52, 26, 0, 834, 832, 1, 0, 0, 0, 834,
		833, 1, 0, 0, 0, 835, 837, 1, 0, 0, 0, 836, 831, 1, 0, 0, 0, 837, 840,
		1, 0, 0, 0, 838, 836, 1, 0, 0, 0, 838, 839, 1, 0, 0, 0, 839, 842, 1, 0,
		0, 0, 840, 838, 1, 0, 0, 0, 841, 843, 5, 45, 0, 0, 842, 841, 1, 0, 0, 0,
		842, 843, 1, 0, 0, 0, 843, 845, 1, 0, 0, 0, 844, 830, 1, 0, 0, 0, 844,
		838, 1, 0, 0, 0, 845, 89, 1, 0, 0, 0, 846, 851, 3, 66, 33, 0, 847, 848,
		5, 45, 0, 0, 848, 850, 3, 66, 33, 0, 849, 847, 1, 0, 0, 0, 850, 853, 1,
		0, 0, 0, 851, 849, 1, 0, 0, 0, 851, 852, 1, 0, 0, 0, 852, 855, 1, 0, 0,
		0, 853, 851, 1, 0, 0, 0, 854, 856, 5, 45, 0, 0, 855, 854, 1, 0, 0, 0, 855,
		856, 1, 0, 0, 0, 856, 91, 1, 0, 0, 0, 857, 858, 6, 46, -1, 0, 858, 859,
		3, 94, 47, 0, 859, 865, 1, 0, 0, 0, 860, 861, 10, 2, 0, 0, 861, 862, 5,
		41, 0, 0, 862, 864, 3, 94, 47, 0, 863, 860, 1, 0, 0, 0, 864, 867, 1, 0,
		0, 0, 865, 863, 1, 0, 0, 0, 865, 866, 1, 0, 0, 0, 866, 93, 1, 0, 0, 0,
		867, 865, 1, 0, 0, 0, 868, 869, 7, 7, 0, 0, 869, 95, 1, 0, 0, 0, 870, 874,
		3, 98, 49, 0, 871, 874, 5, 88, 0, 0, 872, 874, 5, 89, 0, 0, 873, 870, 1,
		0, 0, 0, 873, 871, 1, 0, 0, 0, 873, 872, 1, 0, 0, 0, 874, 97, 1, 0, 0,
		0, 875, 876, 7, 8, 0, 0, 876, 99, 1, 0, 0, 0, 877, 879, 5, 30, 0, 0, 878,
		880, 3, 102, 51, 0, 879, 878, 1, 0, 0, 0, 879, 880, 1, 0, 0, 0, 880, 101,
		1, 0, 0, 0, 881, 882, 5, 7, 0, 0, 882, 885, 3, 66, 33, 0, 883, 885, 3,
		90, 45, 0, 884, 881, 1, 0, 0, 0, 884, 883, 1, 0, 0, 0, 885, 103, 1, 0,
		0, 0, 886, 887, 5, 41, 0, 0, 887, 889, 3, 94, 47, 0, 888, 890, 3, 106,
		53, 0, 889, 888, 1, 0, 0, 0, 889, 890, 1, 0, 0, 0, 890, 893, 1, 0, 0, 0,
		891, 893, 3, 106, 53, 0, 892, 886, 1, 0, 0, 0, 892, 891, 1, 0, 0, 0, 893,
		105, 1, 0, 0, 0, 894, 896, 5, 90, 0, 0, 895, 897, 3, 108, 54, 0, 896, 895,
		1, 0, 0, 0, 896, 897, 1, 0, 0, 0, 897, 898, 1, 0, 0, 0, 898, 904, 5, 91,
		0, 0, 899, 900, 5, 94, 0, 0, 900, 901, 3, 112, 56, 0, 901, 902, 5, 95,
		0, 0, 902, 904, 1, 0, 0, 0, 903, 894, 1, 0, 0, 0, 903, 899, 1, 0, 0, 0,
		904, 107, 1, 0, 0, 0, 905, 910, 3, 110, 55, 0, 906, 907, 5, 45, 0, 0, 907,
		909, 3, 110, 55, 0, 908, 906, 1, 0, 0, 0, 909, 912, 1, 0, 0, 0, 910, 908,
		1, 0, 0, 0, 910, 911, 1, 0, 0, 0, 911, 914, 1, 0, 0, 0, 912, 910, 1, 0,
		0, 0, 913, 915, 5, 45, 0, 0, 914, 913, 1, 0, 0, 0, 914, 915, 1, 0, 0, 0,
		915, 109, 1, 0, 0, 0, 916, 920, 3, 66, 33, 0, 917, 921, 3, 118, 59, 0,
		918, 919, 5, 49, 0, 0, 919, 921, 3, 66, 33, 0, 920, 917, 1, 0, 0, 0, 920,
		918, 1, 0, 0, 0, 920, 921, 1, 0, 0, 0, 921, 925, 1, 0, 0, 0, 922, 923,
		7, 9, 0, 0, 923, 925, 3, 66, 33, 0, 924, 916, 1, 0, 0, 0, 924, 922, 1,
		0, 0, 0, 925, 111, 1, 0, 0, 0, 926, 931, 3, 114, 57, 0, 927, 928, 5, 45,
		0, 0, 928, 930, 3, 114, 57, 0, 929, 927, 1, 0, 0, 0, 930, 933, 1, 0, 0,
		0, 931, 929, 1, 0, 0, 0, 931, 932, 1, 0, 0, 0, 932, 935, 1, 0, 0, 0, 933,
		931, 1, 0, 0, 0, 934, 936, 5, 45, 0, 0, 935, 934, 1, 0, 0, 0, 935, 936,
		1, 0, 0, 0, 936, 113, 1, 0, 0, 0, 937, 956, 5, 42, 0, 0, 938, 946, 3, 66,
		33, 0, 939, 941, 5, 46, 0, 0, 940, 942, 3, 66, 33, 0, 941, 940, 1, 0, 0,
		0, 941, 942, 1, 0, 0, 0, 942, 944, 1, 0, 0, 0, 943, 945, 3, 116, 58, 0,
		944, 943, 1, 0, 0, 0, 944, 945, 1, 0, 0, 0, 945, 947, 1, 0, 0, 0, 946,
		939, 1, 0, 0, 0, 946, 947, 1, 0, 0, 0, 947, 956, 1, 0, 0, 0, 948, 950,
		5, 46, 0, 0, 949, 951, 3, 66, 33, 0, 950, 949, 1, 0, 0, 0, 950, 951, 1,
		0, 0, 0, 951, 953, 1, 0, 0, 0, 952, 954, 3, 116, 58, 0, 953, 952, 1, 0,
		0, 0, 953, 954, 1, 0, 0, 0, 954, 956, 1, 0, 0, 0, 955, 937, 1, 0, 0, 0,
		955, 938, 1, 0, 0, 0, 955, 948, 1, 0, 0, 0, 956, 115, 1, 0, 0, 0, 957,
		959, 5, 46, 0, 0, 958, 960, 3, 66, 33, 0, 959, 958, 1, 0, 0, 0, 959, 960,
		1, 0, 0, 0, 960, 117, 1, 0, 0, 0, 961, 962, 5, 17, 0, 0, 962, 963, 3, 56,
		28, 0, 963, 964, 5, 18, 0, 0, 964, 966, 3, 78, 39, 0, 965, 967, 3, 120,
		60, 0, 966, 965, 1, 0, 0, 0, 966, 967, 1, 0, 0, 0, 967, 119, 1, 0, 0, 0,
		968, 975, 3, 118, 59, 0, 969, 970, 5, 13, 0, 0, 970, 972, 3, 66, 33, 0,
		971, 973, 3, 120, 60, 0, 972, 971, 1, 0, 0, 0, 972, 973, 1, 0, 0, 0, 973,
		975, 1, 0, 0, 0, 974, 968, 1, 0, 0, 0, 974, 969, 1, 0, 0, 0, 975, 121,
		1, 0, 0, 0, 151, 125, 134, 138, 140, 146, 151, 160, 164, 171, 174, 183,
		191, 194, 197, 200, 203, 211, 220, 225, 227, 235, 239, 245, 248, 268, 282,
		284, 293, 296, 302, 308, 313, 321, 326, 330, 333, 336, 340, 342, 355, 361,
		364, 369, 376, 380, 386, 395, 399, 407, 410, 412, 423, 431, 433, 435, 439,
		455, 465, 467, 475, 484, 489, 494, 501, 503, 511, 515, 521, 525, 528, 539,
		544, 547, 554, 561, 563, 570, 574, 581, 585, 590, 597, 603, 611, 615, 619,
		624, 629, 633, 636, 639, 643, 645, 652, 658, 661, 673, 681, 683, 698, 703,
		705, 710, 715, 721, 726, 749, 751, 757, 762, 767, 773, 782, 789, 791, 799,
		808, 812, 816, 824, 828, 834, 838, 842, 844, 851, 855, 865, 873, 879, 884,
		889, 892, 896, 903, 910, 914, 920, 924, 931, 935, 941, 944, 946, 950, 953,
		955, 959, 966, 972, 974,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// PythonParserInit initializes any static state used to implement PythonParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewPythonParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func PythonParserInit() {
	staticData := &pythonparserParserStaticData
	staticData.once.Do(pythonparserParserInit)
}

// NewPythonParser produces a new parser instance for the optional input antlr.TokenStream.
func NewPythonParser(input antlr.TokenStream) *PythonParser {
	PythonParserInit()
	this := new(PythonParser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &pythonparserParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.predictionContextCache)
	this.RuleNames = staticData.ruleNames
	this.LiteralNames = staticData.literalNames
	this.SymbolicNames = staticData.symbolicNames
	this.GrammarFileName = "java-escape"

	return this
}

// PythonParser tokens.
const (
	PythonParserEOF                = antlr.TokenEOF
	PythonParserINDENT             = 1
	PythonParserDEDENT             = 2
	PythonParserLINE_BREAK         = 3
	PythonParserDEF                = 4
	PythonParserRETURN             = 5
	PythonParserRAISE              = 6
	PythonParserFROM               = 7
	PythonParserIMPORT             = 8
	PythonParserNONLOCAL           = 9
	PythonParserAS                 = 10
	PythonParserGLOBAL             = 11
	PythonParserASSERT             = 12
	PythonParserIF                 = 13
	PythonParserELIF               = 14
	PythonParserELSE               = 15
	PythonParserWHILE              = 16
	PythonParserFOR                = 17
	PythonParserIN                 = 18
	PythonParserTRY                = 19
	PythonParserNONE               = 20
	PythonParserFINALLY            = 21
	PythonParserWITH               = 22
	PythonParserEXCEPT             = 23
	PythonParserLAMBDA             = 24
	PythonParserOR                 = 25
	PythonParserAND                = 26
	PythonParserNOT                = 27
	PythonParserIS                 = 28
	PythonParserCLASS              = 29
	PythonParserYIELD              = 30
	PythonParserDEL                = 31
	PythonParserPASS               = 32
	PythonParserCONTINUE           = 33
	PythonParserBREAK              = 34
	PythonParserASYNC              = 35
	PythonParserAWAIT              = 36
	PythonParserPRINT              = 37
	PythonParserEXEC               = 38
	PythonParserTRUE               = 39
	PythonParserFALSE              = 40
	PythonParserDOT                = 41
	PythonParserELLIPSIS           = 42
	PythonParserREVERSE_QUOTE      = 43
	PythonParserSTAR               = 44
	PythonParserCOMMA              = 45
	PythonParserCOLON              = 46
	PythonParserSEMI_COLON         = 47
	PythonParserPOWER              = 48
	PythonParserASSIGN             = 49
	PythonParserOR_OP              = 50
	PythonParserXOR                = 51
	PythonParserAND_OP             = 52
	PythonParserLEFT_SHIFT         = 53
	PythonParserRIGHT_SHIFT        = 54
	PythonParserADD                = 55
	PythonParserMINUS              = 56
	PythonParserDIV                = 57
	PythonParserMOD                = 58
	PythonParserIDIV               = 59
	PythonParserNOT_OP             = 60
	PythonParserLESS_THAN          = 61
	PythonParserGREATER_THAN       = 62
	PythonParserEQUALS             = 63
	PythonParserGT_EQ              = 64
	PythonParserLT_EQ              = 65
	PythonParserNOT_EQ_1           = 66
	PythonParserNOT_EQ_2           = 67
	PythonParserAT                 = 68
	PythonParserARROW              = 69
	PythonParserADD_ASSIGN         = 70
	PythonParserSUB_ASSIGN         = 71
	PythonParserMULT_ASSIGN        = 72
	PythonParserAT_ASSIGN          = 73
	PythonParserDIV_ASSIGN         = 74
	PythonParserMOD_ASSIGN         = 75
	PythonParserAND_ASSIGN         = 76
	PythonParserOR_ASSIGN          = 77
	PythonParserXOR_ASSIGN         = 78
	PythonParserLEFT_SHIFT_ASSIGN  = 79
	PythonParserRIGHT_SHIFT_ASSIGN = 80
	PythonParserPOWER_ASSIGN       = 81
	PythonParserIDIV_ASSIGN        = 82
	PythonParserSTRING             = 83
	PythonParserDECIMAL_INTEGER    = 84
	PythonParserOCT_INTEGER        = 85
	PythonParserHEX_INTEGER        = 86
	PythonParserBIN_INTEGER        = 87
	PythonParserIMAG_NUMBER        = 88
	PythonParserFLOAT_NUMBER       = 89
	PythonParserOPEN_PAREN         = 90
	PythonParserCLOSE_PAREN        = 91
	PythonParserOPEN_BRACE         = 92
	PythonParserCLOSE_BRACE        = 93
	PythonParserOPEN_BRACKET       = 94
	PythonParserCLOSE_BRACKET      = 95
	PythonParserNAME               = 96
	PythonParserLINE_JOIN          = 97
	PythonParserNEWLINE            = 98
	PythonParserWS                 = 99
	PythonParserCOMMENT            = 100
)

// PythonParser rules.
const (
	PythonParserRULE_root               = 0
	PythonParserRULE_single_input       = 1
	PythonParserRULE_file_input         = 2
	PythonParserRULE_eval_input         = 3
	PythonParserRULE_stmt               = 4
	PythonParserRULE_compound_stmt      = 5
	PythonParserRULE_suite              = 6
	PythonParserRULE_decorator          = 7
	PythonParserRULE_elif_clause        = 8
	PythonParserRULE_else_clause        = 9
	PythonParserRULE_finally_clause     = 10
	PythonParserRULE_with_item          = 11
	PythonParserRULE_except_clause      = 12
	PythonParserRULE_classdef           = 13
	PythonParserRULE_funcdef            = 14
	PythonParserRULE_typedargslist      = 15
	PythonParserRULE_args               = 16
	PythonParserRULE_kwargs             = 17
	PythonParserRULE_def_parameters     = 18
	PythonParserRULE_def_parameter      = 19
	PythonParserRULE_named_parameter    = 20
	PythonParserRULE_simple_stmt        = 21
	PythonParserRULE_small_stmt         = 22
	PythonParserRULE_from_stmt_source   = 23
	PythonParserRULE_from_stmt_as_names = 24
	PythonParserRULE_testlist_star_expr = 25
	PythonParserRULE_star_expr          = 26
	PythonParserRULE_assign_part        = 27
	PythonParserRULE_exprlist           = 28
	PythonParserRULE_import_as_names    = 29
	PythonParserRULE_import_as_name     = 30
	PythonParserRULE_dotted_as_names    = 31
	PythonParserRULE_dotted_as_name     = 32
	PythonParserRULE_test               = 33
	PythonParserRULE_varargslist        = 34
	PythonParserRULE_vardef_parameters  = 35
	PythonParserRULE_vardef_parameter   = 36
	PythonParserRULE_varargs            = 37
	PythonParserRULE_varkwargs          = 38
	PythonParserRULE_logical_test       = 39
	PythonParserRULE_comparison         = 40
	PythonParserRULE_expr               = 41
	PythonParserRULE_atom               = 42
	PythonParserRULE_dictorsetmaker     = 43
	PythonParserRULE_testlist_comp      = 44
	PythonParserRULE_testlist           = 45
	PythonParserRULE_dotted_name        = 46
	PythonParserRULE_name               = 47
	PythonParserRULE_number             = 48
	PythonParserRULE_integer            = 49
	PythonParserRULE_yield_expr         = 50
	PythonParserRULE_yield_arg          = 51
	PythonParserRULE_trailer            = 52
	PythonParserRULE_arguments          = 53
	PythonParserRULE_arglist            = 54
	PythonParserRULE_argument           = 55
	PythonParserRULE_subscriptlist      = 56
	PythonParserRULE_subscript          = 57
	PythonParserRULE_sliceop            = 58
	PythonParserRULE_comp_for           = 59
	PythonParserRULE_comp_iter          = 60
)

// IRootContext is an interface to support dynamic dispatch.
type IRootContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRootContext differentiates from other interfaces.
	IsRootContext()
}

type RootContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRootContext() *RootContext {
	var p = new(RootContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_root
	return p
}

func (*RootContext) IsRootContext() {}

func NewRootContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RootContext {
	var p = new(RootContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_root

	return p
}

func (s *RootContext) GetParser() antlr.Parser { return s.parser }

func (s *RootContext) EOF() antlr.TerminalNode {
	return s.GetToken(PythonParserEOF, 0)
}

func (s *RootContext) Single_input() ISingle_inputContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISingle_inputContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISingle_inputContext)
}

func (s *RootContext) File_input() IFile_inputContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFile_inputContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFile_inputContext)
}

func (s *RootContext) Eval_input() IEval_inputContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEval_inputContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEval_inputContext)
}

func (s *RootContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RootContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RootContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterRoot(s)
	}
}

func (s *RootContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitRoot(s)
	}
}

func (p *PythonParser) Root() (localctx IRootContext) {
	this := p
	_ = this

	localctx = NewRootContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, PythonParserRULE_root)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(125)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(122)
			p.Single_input()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(123)
			p.File_input()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(124)
			p.Eval_input()
		}

	}
	{
		p.SetState(127)
		p.Match(PythonParserEOF)
	}

	return localctx
}

// ISingle_inputContext is an interface to support dynamic dispatch.
type ISingle_inputContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSingle_inputContext differentiates from other interfaces.
	IsSingle_inputContext()
}

type Single_inputContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySingle_inputContext() *Single_inputContext {
	var p = new(Single_inputContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_single_input
	return p
}

func (*Single_inputContext) IsSingle_inputContext() {}

func NewSingle_inputContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Single_inputContext {
	var p = new(Single_inputContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_single_input

	return p
}

func (s *Single_inputContext) GetParser() antlr.Parser { return s.parser }

func (s *Single_inputContext) LINE_BREAK() antlr.TerminalNode {
	return s.GetToken(PythonParserLINE_BREAK, 0)
}

func (s *Single_inputContext) Simple_stmt() ISimple_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimple_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimple_stmtContext)
}

func (s *Single_inputContext) Compound_stmt() ICompound_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompound_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompound_stmtContext)
}

func (s *Single_inputContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Single_inputContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Single_inputContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterSingle_input(s)
	}
}

func (s *Single_inputContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitSingle_input(s)
	}
}

func (p *PythonParser) Single_input() (localctx ISingle_inputContext) {
	this := p
	_ = this

	localctx = NewSingle_inputContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, PythonParserRULE_single_input)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(134)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(129)
			p.Match(PythonParserLINE_BREAK)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(130)
			p.Simple_stmt()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(131)
			p.Compound_stmt()
		}
		{
			p.SetState(132)
			p.Match(PythonParserLINE_BREAK)
		}

	}

	return localctx
}

// IFile_inputContext is an interface to support dynamic dispatch.
type IFile_inputContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFile_inputContext differentiates from other interfaces.
	IsFile_inputContext()
}

type File_inputContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFile_inputContext() *File_inputContext {
	var p = new(File_inputContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_file_input
	return p
}

func (*File_inputContext) IsFile_inputContext() {}

func NewFile_inputContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *File_inputContext {
	var p = new(File_inputContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_file_input

	return p
}

func (s *File_inputContext) GetParser() antlr.Parser { return s.parser }

func (s *File_inputContext) AllLINE_BREAK() []antlr.TerminalNode {
	return s.GetTokens(PythonParserLINE_BREAK)
}

func (s *File_inputContext) LINE_BREAK(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserLINE_BREAK, i)
}

func (s *File_inputContext) AllStmt() []IStmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStmtContext); ok {
			len++
		}
	}

	tst := make([]IStmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStmtContext); ok {
			tst[i] = t.(IStmtContext)
			i++
		}
	}

	return tst
}

func (s *File_inputContext) Stmt(i int) IStmtContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStmtContext)
}

func (s *File_inputContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *File_inputContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *File_inputContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterFile_input(s)
	}
}

func (s *File_inputContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitFile_input(s)
	}
}

func (p *PythonParser) File_input() (localctx IFile_inputContext) {
	this := p
	_ = this

	localctx = NewFile_inputContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, PythonParserRULE_file_input)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(138)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			p.SetState(138)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(136)
					p.Match(PythonParserLINE_BREAK)
				}

			case 2:
				{
					p.SetState(137)
					p.Stmt()
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(140)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())
	}

	return localctx
}

// IEval_inputContext is an interface to support dynamic dispatch.
type IEval_inputContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEval_inputContext differentiates from other interfaces.
	IsEval_inputContext()
}

type Eval_inputContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEval_inputContext() *Eval_inputContext {
	var p = new(Eval_inputContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_eval_input
	return p
}

func (*Eval_inputContext) IsEval_inputContext() {}

func NewEval_inputContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Eval_inputContext {
	var p = new(Eval_inputContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_eval_input

	return p
}

func (s *Eval_inputContext) GetParser() antlr.Parser { return s.parser }

func (s *Eval_inputContext) Testlist() ITestlistContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestlistContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestlistContext)
}

func (s *Eval_inputContext) AllLINE_BREAK() []antlr.TerminalNode {
	return s.GetTokens(PythonParserLINE_BREAK)
}

func (s *Eval_inputContext) LINE_BREAK(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserLINE_BREAK, i)
}

func (s *Eval_inputContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Eval_inputContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Eval_inputContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterEval_input(s)
	}
}

func (s *Eval_inputContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitEval_input(s)
	}
}

func (p *PythonParser) Eval_input() (localctx IEval_inputContext) {
	this := p
	_ = this

	localctx = NewEval_inputContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, PythonParserRULE_eval_input)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(142)
		p.Testlist()
	}
	p.SetState(146)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PythonParserLINE_BREAK {
		{
			p.SetState(143)
			p.Match(PythonParserLINE_BREAK)
		}

		p.SetState(148)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IStmtContext is an interface to support dynamic dispatch.
type IStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStmtContext differentiates from other interfaces.
	IsStmtContext()
}

type StmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStmtContext() *StmtContext {
	var p = new(StmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_stmt
	return p
}

func (*StmtContext) IsStmtContext() {}

func NewStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StmtContext {
	var p = new(StmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_stmt

	return p
}

func (s *StmtContext) GetParser() antlr.Parser { return s.parser }

func (s *StmtContext) Simple_stmt() ISimple_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimple_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimple_stmtContext)
}

func (s *StmtContext) Compound_stmt() ICompound_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompound_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompound_stmtContext)
}

func (s *StmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterStmt(s)
	}
}

func (s *StmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitStmt(s)
	}
}

func (p *PythonParser) Stmt() (localctx IStmtContext) {
	this := p
	_ = this

	localctx = NewStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, PythonParserRULE_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(151)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(149)
			p.Simple_stmt()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(150)
			p.Compound_stmt()
		}

	}

	return localctx
}

// ICompound_stmtContext is an interface to support dynamic dispatch.
type ICompound_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCompound_stmtContext differentiates from other interfaces.
	IsCompound_stmtContext()
}

type Compound_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompound_stmtContext() *Compound_stmtContext {
	var p = new(Compound_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_compound_stmt
	return p
}

func (*Compound_stmtContext) IsCompound_stmtContext() {}

func NewCompound_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Compound_stmtContext {
	var p = new(Compound_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_compound_stmt

	return p
}

func (s *Compound_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Compound_stmtContext) CopyFrom(ctx *Compound_stmtContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Compound_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Compound_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type While_stmtContext struct {
	*Compound_stmtContext
}

func NewWhile_stmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *While_stmtContext {
	var p = new(While_stmtContext)

	p.Compound_stmtContext = NewEmptyCompound_stmtContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Compound_stmtContext))

	return p
}

func (s *While_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *While_stmtContext) WHILE() antlr.TerminalNode {
	return s.GetToken(PythonParserWHILE, 0)
}

func (s *While_stmtContext) Test() ITestContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestContext)
}

func (s *While_stmtContext) COLON() antlr.TerminalNode {
	return s.GetToken(PythonParserCOLON, 0)
}

func (s *While_stmtContext) Suite() ISuiteContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISuiteContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISuiteContext)
}

func (s *While_stmtContext) Else_clause() IElse_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElse_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElse_clauseContext)
}

func (s *While_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterWhile_stmt(s)
	}
}

func (s *While_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitWhile_stmt(s)
	}
}

type Try_stmtContext struct {
	*Compound_stmtContext
}

func NewTry_stmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Try_stmtContext {
	var p = new(Try_stmtContext)

	p.Compound_stmtContext = NewEmptyCompound_stmtContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Compound_stmtContext))

	return p
}

func (s *Try_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Try_stmtContext) TRY() antlr.TerminalNode {
	return s.GetToken(PythonParserTRY, 0)
}

func (s *Try_stmtContext) COLON() antlr.TerminalNode {
	return s.GetToken(PythonParserCOLON, 0)
}

func (s *Try_stmtContext) Suite() ISuiteContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISuiteContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISuiteContext)
}

func (s *Try_stmtContext) Finally_clause() IFinally_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFinally_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFinally_clauseContext)
}

func (s *Try_stmtContext) AllExcept_clause() []IExcept_clauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExcept_clauseContext); ok {
			len++
		}
	}

	tst := make([]IExcept_clauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExcept_clauseContext); ok {
			tst[i] = t.(IExcept_clauseContext)
			i++
		}
	}

	return tst
}

func (s *Try_stmtContext) Except_clause(i int) IExcept_clauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExcept_clauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExcept_clauseContext)
}

func (s *Try_stmtContext) Else_clause() IElse_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElse_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElse_clauseContext)
}

func (s *Try_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterTry_stmt(s)
	}
}

func (s *Try_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitTry_stmt(s)
	}
}

type If_stmtContext struct {
	*Compound_stmtContext
	cond ITestContext
}

func NewIf_stmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *If_stmtContext {
	var p = new(If_stmtContext)

	p.Compound_stmtContext = NewEmptyCompound_stmtContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Compound_stmtContext))

	return p
}

func (s *If_stmtContext) GetCond() ITestContext { return s.cond }

func (s *If_stmtContext) SetCond(v ITestContext) { s.cond = v }

func (s *If_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PythonParserIF, 0)
}

func (s *If_stmtContext) COLON() antlr.TerminalNode {
	return s.GetToken(PythonParserCOLON, 0)
}

func (s *If_stmtContext) Suite() ISuiteContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISuiteContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISuiteContext)
}

func (s *If_stmtContext) Test() ITestContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestContext)
}

func (s *If_stmtContext) AllElif_clause() []IElif_clauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IElif_clauseContext); ok {
			len++
		}
	}

	tst := make([]IElif_clauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IElif_clauseContext); ok {
			tst[i] = t.(IElif_clauseContext)
			i++
		}
	}

	return tst
}

func (s *If_stmtContext) Elif_clause(i int) IElif_clauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElif_clauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElif_clauseContext)
}

func (s *If_stmtContext) Else_clause() IElse_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElse_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElse_clauseContext)
}

func (s *If_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterIf_stmt(s)
	}
}

func (s *If_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitIf_stmt(s)
	}
}

type With_stmtContext struct {
	*Compound_stmtContext
}

func NewWith_stmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *With_stmtContext {
	var p = new(With_stmtContext)

	p.Compound_stmtContext = NewEmptyCompound_stmtContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Compound_stmtContext))

	return p
}

func (s *With_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_stmtContext) WITH() antlr.TerminalNode {
	return s.GetToken(PythonParserWITH, 0)
}

func (s *With_stmtContext) AllWith_item() []IWith_itemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWith_itemContext); ok {
			len++
		}
	}

	tst := make([]IWith_itemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWith_itemContext); ok {
			tst[i] = t.(IWith_itemContext)
			i++
		}
	}

	return tst
}

func (s *With_stmtContext) With_item(i int) IWith_itemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_itemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_itemContext)
}

func (s *With_stmtContext) COLON() antlr.TerminalNode {
	return s.GetToken(PythonParserCOLON, 0)
}

func (s *With_stmtContext) Suite() ISuiteContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISuiteContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISuiteContext)
}

func (s *With_stmtContext) ASYNC() antlr.TerminalNode {
	return s.GetToken(PythonParserASYNC, 0)
}

func (s *With_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PythonParserCOMMA)
}

func (s *With_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserCOMMA, i)
}

func (s *With_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterWith_stmt(s)
	}
}

func (s *With_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitWith_stmt(s)
	}
}

type Class_or_func_def_stmtContext struct {
	*Compound_stmtContext
}

func NewClass_or_func_def_stmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Class_or_func_def_stmtContext {
	var p = new(Class_or_func_def_stmtContext)

	p.Compound_stmtContext = NewEmptyCompound_stmtContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Compound_stmtContext))

	return p
}

func (s *Class_or_func_def_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Class_or_func_def_stmtContext) Classdef() IClassdefContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassdefContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassdefContext)
}

func (s *Class_or_func_def_stmtContext) Funcdef() IFuncdefContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFuncdefContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFuncdefContext)
}

func (s *Class_or_func_def_stmtContext) AllDecorator() []IDecoratorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDecoratorContext); ok {
			len++
		}
	}

	tst := make([]IDecoratorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDecoratorContext); ok {
			tst[i] = t.(IDecoratorContext)
			i++
		}
	}

	return tst
}

func (s *Class_or_func_def_stmtContext) Decorator(i int) IDecoratorContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDecoratorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDecoratorContext)
}

func (s *Class_or_func_def_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterClass_or_func_def_stmt(s)
	}
}

func (s *Class_or_func_def_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitClass_or_func_def_stmt(s)
	}
}

type For_stmtContext struct {
	*Compound_stmtContext
}

func NewFor_stmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *For_stmtContext {
	var p = new(For_stmtContext)

	p.Compound_stmtContext = NewEmptyCompound_stmtContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Compound_stmtContext))

	return p
}

func (s *For_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *For_stmtContext) FOR() antlr.TerminalNode {
	return s.GetToken(PythonParserFOR, 0)
}

func (s *For_stmtContext) Exprlist() IExprlistContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprlistContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprlistContext)
}

func (s *For_stmtContext) IN() antlr.TerminalNode {
	return s.GetToken(PythonParserIN, 0)
}

func (s *For_stmtContext) Testlist() ITestlistContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestlistContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestlistContext)
}

func (s *For_stmtContext) COLON() antlr.TerminalNode {
	return s.GetToken(PythonParserCOLON, 0)
}

func (s *For_stmtContext) Suite() ISuiteContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISuiteContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISuiteContext)
}

func (s *For_stmtContext) ASYNC() antlr.TerminalNode {
	return s.GetToken(PythonParserASYNC, 0)
}

func (s *For_stmtContext) Else_clause() IElse_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElse_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElse_clauseContext)
}

func (s *For_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterFor_stmt(s)
	}
}

func (s *For_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitFor_stmt(s)
	}
}

func (p *PythonParser) Compound_stmt() (localctx ICompound_stmtContext) {
	this := p
	_ = this

	localctx = NewCompound_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, PythonParserRULE_compound_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(227)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext()) {
	case 1:
		localctx = NewIf_stmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(153)
			p.Match(PythonParserIF)
		}
		{
			p.SetState(154)

			var _x = p.Test()

			localctx.(*If_stmtContext).cond = _x
		}
		{
			p.SetState(155)
			p.Match(PythonParserCOLON)
		}
		{
			p.SetState(156)
			p.Suite()
		}
		p.SetState(160)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(157)
					p.Elif_clause()
				}

			}
			p.SetState(162)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext())
		}
		p.SetState(164)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(163)
				p.Else_clause()
			}

		}

	case 2:
		localctx = NewWhile_stmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(166)
			p.Match(PythonParserWHILE)
		}
		{
			p.SetState(167)
			p.Test()
		}
		{
			p.SetState(168)
			p.Match(PythonParserCOLON)
		}
		{
			p.SetState(169)
			p.Suite()
		}
		p.SetState(171)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(170)
				p.Else_clause()
			}

		}

	case 3:
		localctx = NewFor_stmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		p.SetState(174)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PythonParserASYNC {
			{
				p.SetState(173)
				p.Match(PythonParserASYNC)
			}

		}
		{
			p.SetState(176)
			p.Match(PythonParserFOR)
		}
		{
			p.SetState(177)
			p.Exprlist()
		}
		{
			p.SetState(178)
			p.Match(PythonParserIN)
		}
		{
			p.SetState(179)
			p.Testlist()
		}
		{
			p.SetState(180)
			p.Match(PythonParserCOLON)
		}
		{
			p.SetState(181)
			p.Suite()
		}
		p.SetState(183)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(182)
				p.Else_clause()
			}

		}

	case 4:
		localctx = NewTry_stmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(185)
			p.Match(PythonParserTRY)
		}
		{
			p.SetState(186)
			p.Match(PythonParserCOLON)
		}
		{
			p.SetState(187)
			p.Suite()
		}
		p.SetState(200)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PythonParserEXCEPT:
			p.SetState(189)
			p.GetErrorHandler().Sync(p)
			_alt = 1
			for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				switch _alt {
				case 1:
					{
						p.SetState(188)
						p.Except_clause()
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

				p.SetState(191)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext())
			}
			p.SetState(194)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(193)
					p.Else_clause()
				}

			}
			p.SetState(197)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(196)
					p.Finally_clause()
				}

			}

		case PythonParserFINALLY:
			{
				p.SetState(199)
				p.Finally_clause()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 5:
		localctx = NewWith_stmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		p.SetState(203)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PythonParserASYNC {
			{
				p.SetState(202)
				p.Match(PythonParserASYNC)
			}

		}
		{
			p.SetState(205)
			p.Match(PythonParserWITH)
		}
		{
			p.SetState(206)
			p.With_item()
		}
		p.SetState(211)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PythonParserCOMMA {
			{
				p.SetState(207)
				p.Match(PythonParserCOMMA)
			}
			{
				p.SetState(208)
				p.With_item()
			}

			p.SetState(213)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(214)
			p.Match(PythonParserCOLON)
		}
		{
			p.SetState(215)
			p.Suite()
		}

	case 6:
		localctx = NewClass_or_func_def_stmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		p.SetState(220)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PythonParserAT {
			{
				p.SetState(217)
				p.Decorator()
			}

			p.SetState(222)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(225)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PythonParserCLASS:
			{
				p.SetState(223)
				p.Classdef()
			}

		case PythonParserDEF, PythonParserASYNC:
			{
				p.SetState(224)
				p.Funcdef()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}

	return localctx
}

// ISuiteContext is an interface to support dynamic dispatch.
type ISuiteContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSuiteContext differentiates from other interfaces.
	IsSuiteContext()
}

type SuiteContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySuiteContext() *SuiteContext {
	var p = new(SuiteContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_suite
	return p
}

func (*SuiteContext) IsSuiteContext() {}

func NewSuiteContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SuiteContext {
	var p = new(SuiteContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_suite

	return p
}

func (s *SuiteContext) GetParser() antlr.Parser { return s.parser }

func (s *SuiteContext) Simple_stmt() ISimple_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimple_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimple_stmtContext)
}

func (s *SuiteContext) LINE_BREAK() antlr.TerminalNode {
	return s.GetToken(PythonParserLINE_BREAK, 0)
}

func (s *SuiteContext) INDENT() antlr.TerminalNode {
	return s.GetToken(PythonParserINDENT, 0)
}

func (s *SuiteContext) DEDENT() antlr.TerminalNode {
	return s.GetToken(PythonParserDEDENT, 0)
}

func (s *SuiteContext) AllStmt() []IStmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStmtContext); ok {
			len++
		}
	}

	tst := make([]IStmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStmtContext); ok {
			tst[i] = t.(IStmtContext)
			i++
		}
	}

	return tst
}

func (s *SuiteContext) Stmt(i int) IStmtContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStmtContext)
}

func (s *SuiteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SuiteContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SuiteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterSuite(s)
	}
}

func (s *SuiteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitSuite(s)
	}
}

func (p *PythonParser) Suite() (localctx ISuiteContext) {
	this := p
	_ = this

	localctx = NewSuiteContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, PythonParserRULE_suite)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(239)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 21, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(229)
			p.Simple_stmt()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(230)
			p.Match(PythonParserLINE_BREAK)
		}
		{
			p.SetState(231)
			p.Match(PythonParserINDENT)
		}
		p.SetState(233)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(232)
					p.Stmt()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(235)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 20, p.GetParserRuleContext())
		}
		{
			p.SetState(237)
			p.Match(PythonParserDEDENT)
		}

	}

	return localctx
}

// IDecoratorContext is an interface to support dynamic dispatch.
type IDecoratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDecoratorContext differentiates from other interfaces.
	IsDecoratorContext()
}

type DecoratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDecoratorContext() *DecoratorContext {
	var p = new(DecoratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_decorator
	return p
}

func (*DecoratorContext) IsDecoratorContext() {}

func NewDecoratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DecoratorContext {
	var p = new(DecoratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_decorator

	return p
}

func (s *DecoratorContext) GetParser() antlr.Parser { return s.parser }

func (s *DecoratorContext) AT() antlr.TerminalNode {
	return s.GetToken(PythonParserAT, 0)
}

func (s *DecoratorContext) Dotted_name() IDotted_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDotted_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDotted_nameContext)
}

func (s *DecoratorContext) LINE_BREAK() antlr.TerminalNode {
	return s.GetToken(PythonParserLINE_BREAK, 0)
}

func (s *DecoratorContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PythonParserOPEN_PAREN, 0)
}

func (s *DecoratorContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PythonParserCLOSE_PAREN, 0)
}

func (s *DecoratorContext) Arglist() IArglistContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArglistContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArglistContext)
}

func (s *DecoratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecoratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DecoratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterDecorator(s)
	}
}

func (s *DecoratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitDecorator(s)
	}
}

func (p *PythonParser) Decorator() (localctx IDecoratorContext) {
	this := p
	_ = this

	localctx = NewDecoratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, PythonParserRULE_decorator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(241)
		p.Match(PythonParserAT)
	}
	{
		p.SetState(242)
		p.dotted_name(0)
	}
	p.SetState(248)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PythonParserOPEN_PAREN {
		{
			p.SetState(243)
			p.Match(PythonParserOPEN_PAREN)
		}
		p.SetState(245)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1261322287421849600) != 0 || (int64((_la-83)) & ^0x3f) == 0 && ((int64(1)<<(_la-83))&11007) != 0 {
			{
				p.SetState(244)
				p.Arglist()
			}

		}
		{
			p.SetState(247)
			p.Match(PythonParserCLOSE_PAREN)
		}

	}
	{
		p.SetState(250)
		p.Match(PythonParserLINE_BREAK)
	}

	return localctx
}

// IElif_clauseContext is an interface to support dynamic dispatch.
type IElif_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElif_clauseContext differentiates from other interfaces.
	IsElif_clauseContext()
}

type Elif_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElif_clauseContext() *Elif_clauseContext {
	var p = new(Elif_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_elif_clause
	return p
}

func (*Elif_clauseContext) IsElif_clauseContext() {}

func NewElif_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Elif_clauseContext {
	var p = new(Elif_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_elif_clause

	return p
}

func (s *Elif_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Elif_clauseContext) ELIF() antlr.TerminalNode {
	return s.GetToken(PythonParserELIF, 0)
}

func (s *Elif_clauseContext) Test() ITestContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestContext)
}

func (s *Elif_clauseContext) COLON() antlr.TerminalNode {
	return s.GetToken(PythonParserCOLON, 0)
}

func (s *Elif_clauseContext) Suite() ISuiteContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISuiteContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISuiteContext)
}

func (s *Elif_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Elif_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Elif_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterElif_clause(s)
	}
}

func (s *Elif_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitElif_clause(s)
	}
}

func (p *PythonParser) Elif_clause() (localctx IElif_clauseContext) {
	this := p
	_ = this

	localctx = NewElif_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, PythonParserRULE_elif_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(252)
		p.Match(PythonParserELIF)
	}
	{
		p.SetState(253)
		p.Test()
	}
	{
		p.SetState(254)
		p.Match(PythonParserCOLON)
	}
	{
		p.SetState(255)
		p.Suite()
	}

	return localctx
}

// IElse_clauseContext is an interface to support dynamic dispatch.
type IElse_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElse_clauseContext differentiates from other interfaces.
	IsElse_clauseContext()
}

type Else_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElse_clauseContext() *Else_clauseContext {
	var p = new(Else_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_else_clause
	return p
}

func (*Else_clauseContext) IsElse_clauseContext() {}

func NewElse_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Else_clauseContext {
	var p = new(Else_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_else_clause

	return p
}

func (s *Else_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Else_clauseContext) ELSE() antlr.TerminalNode {
	return s.GetToken(PythonParserELSE, 0)
}

func (s *Else_clauseContext) COLON() antlr.TerminalNode {
	return s.GetToken(PythonParserCOLON, 0)
}

func (s *Else_clauseContext) Suite() ISuiteContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISuiteContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISuiteContext)
}

func (s *Else_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Else_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Else_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterElse_clause(s)
	}
}

func (s *Else_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitElse_clause(s)
	}
}

func (p *PythonParser) Else_clause() (localctx IElse_clauseContext) {
	this := p
	_ = this

	localctx = NewElse_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, PythonParserRULE_else_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(257)
		p.Match(PythonParserELSE)
	}
	{
		p.SetState(258)
		p.Match(PythonParserCOLON)
	}
	{
		p.SetState(259)
		p.Suite()
	}

	return localctx
}

// IFinally_clauseContext is an interface to support dynamic dispatch.
type IFinally_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFinally_clauseContext differentiates from other interfaces.
	IsFinally_clauseContext()
}

type Finally_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFinally_clauseContext() *Finally_clauseContext {
	var p = new(Finally_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_finally_clause
	return p
}

func (*Finally_clauseContext) IsFinally_clauseContext() {}

func NewFinally_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Finally_clauseContext {
	var p = new(Finally_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_finally_clause

	return p
}

func (s *Finally_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Finally_clauseContext) FINALLY() antlr.TerminalNode {
	return s.GetToken(PythonParserFINALLY, 0)
}

func (s *Finally_clauseContext) COLON() antlr.TerminalNode {
	return s.GetToken(PythonParserCOLON, 0)
}

func (s *Finally_clauseContext) Suite() ISuiteContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISuiteContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISuiteContext)
}

func (s *Finally_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Finally_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Finally_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterFinally_clause(s)
	}
}

func (s *Finally_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitFinally_clause(s)
	}
}

func (p *PythonParser) Finally_clause() (localctx IFinally_clauseContext) {
	this := p
	_ = this

	localctx = NewFinally_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, PythonParserRULE_finally_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(261)
		p.Match(PythonParserFINALLY)
	}
	{
		p.SetState(262)
		p.Match(PythonParserCOLON)
	}
	{
		p.SetState(263)
		p.Suite()
	}

	return localctx
}

// IWith_itemContext is an interface to support dynamic dispatch.
type IWith_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWith_itemContext differentiates from other interfaces.
	IsWith_itemContext()
}

type With_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_itemContext() *With_itemContext {
	var p = new(With_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_with_item
	return p
}

func (*With_itemContext) IsWith_itemContext() {}

func NewWith_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_itemContext {
	var p = new(With_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_with_item

	return p
}

func (s *With_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *With_itemContext) Test() ITestContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestContext)
}

func (s *With_itemContext) AS() antlr.TerminalNode {
	return s.GetToken(PythonParserAS, 0)
}

func (s *With_itemContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *With_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterWith_item(s)
	}
}

func (s *With_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitWith_item(s)
	}
}

func (p *PythonParser) With_item() (localctx IWith_itemContext) {
	this := p
	_ = this

	localctx = NewWith_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, PythonParserRULE_with_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(265)
		p.Test()
	}
	p.SetState(268)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PythonParserAS {
		{
			p.SetState(266)
			p.Match(PythonParserAS)
		}
		{
			p.SetState(267)
			p.expr(0)
		}

	}

	return localctx
}

// IExcept_clauseContext is an interface to support dynamic dispatch.
type IExcept_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExcept_clauseContext differentiates from other interfaces.
	IsExcept_clauseContext()
}

type Except_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExcept_clauseContext() *Except_clauseContext {
	var p = new(Except_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_except_clause
	return p
}

func (*Except_clauseContext) IsExcept_clauseContext() {}

func NewExcept_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Except_clauseContext {
	var p = new(Except_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_except_clause

	return p
}

func (s *Except_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Except_clauseContext) EXCEPT() antlr.TerminalNode {
	return s.GetToken(PythonParserEXCEPT, 0)
}

func (s *Except_clauseContext) COLON() antlr.TerminalNode {
	return s.GetToken(PythonParserCOLON, 0)
}

func (s *Except_clauseContext) Suite() ISuiteContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISuiteContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISuiteContext)
}

func (s *Except_clauseContext) Test() ITestContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestContext)
}

func (s *Except_clauseContext) COMMA() antlr.TerminalNode {
	return s.GetToken(PythonParserCOMMA, 0)
}

func (s *Except_clauseContext) Name() INameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Except_clauseContext) AS() antlr.TerminalNode {
	return s.GetToken(PythonParserAS, 0)
}

func (s *Except_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Except_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Except_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterExcept_clause(s)
	}
}

func (s *Except_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitExcept_clause(s)
	}
}

func (p *PythonParser) Except_clause() (localctx IExcept_clauseContext) {
	this := p
	_ = this

	localctx = NewExcept_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, PythonParserRULE_except_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(270)
		p.Match(PythonParserEXCEPT)
	}
	p.SetState(284)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1261023220259094528) != 0 || (int64((_la-83)) & ^0x3f) == 0 && ((int64(1)<<(_la-83))&11007) != 0 {
		{
			p.SetState(271)
			p.Test()
		}
		p.SetState(282)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 25, p.GetParserRuleContext()) == 1 {
			p.SetState(272)

			if !(p.CheckVersion(2)) {
				panic(antlr.NewFailedPredicateException(p, "p.CheckVersion(2)", ""))
			}
			{
				p.SetState(273)
				p.Match(PythonParserCOMMA)
			}
			{
				p.SetState(274)
				p.Name()
			}
			p.SetVersion(2)

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 25, p.GetParserRuleContext()) == 2 {
			p.SetState(277)

			if !(p.CheckVersion(3)) {
				panic(antlr.NewFailedPredicateException(p, "p.CheckVersion(3)", ""))
			}
			{
				p.SetState(278)
				p.Match(PythonParserAS)
			}
			{
				p.SetState(279)
				p.Name()
			}
			p.SetVersion(3)

		}

	}
	{
		p.SetState(286)
		p.Match(PythonParserCOLON)
	}
	{
		p.SetState(287)
		p.Suite()
	}

	return localctx
}

// IClassdefContext is an interface to support dynamic dispatch.
type IClassdefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassdefContext differentiates from other interfaces.
	IsClassdefContext()
}

type ClassdefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassdefContext() *ClassdefContext {
	var p = new(ClassdefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_classdef
	return p
}

func (*ClassdefContext) IsClassdefContext() {}

func NewClassdefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassdefContext {
	var p = new(ClassdefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_classdef

	return p
}

func (s *ClassdefContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassdefContext) CLASS() antlr.TerminalNode {
	return s.GetToken(PythonParserCLASS, 0)
}

func (s *ClassdefContext) Name() INameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *ClassdefContext) COLON() antlr.TerminalNode {
	return s.GetToken(PythonParserCOLON, 0)
}

func (s *ClassdefContext) Suite() ISuiteContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISuiteContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISuiteContext)
}

func (s *ClassdefContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PythonParserOPEN_PAREN, 0)
}

func (s *ClassdefContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PythonParserCLOSE_PAREN, 0)
}

func (s *ClassdefContext) Arglist() IArglistContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArglistContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArglistContext)
}

func (s *ClassdefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassdefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassdefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterClassdef(s)
	}
}

func (s *ClassdefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitClassdef(s)
	}
}

func (p *PythonParser) Classdef() (localctx IClassdefContext) {
	this := p
	_ = this

	localctx = NewClassdefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, PythonParserRULE_classdef)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(289)
		p.Match(PythonParserCLASS)
	}
	{
		p.SetState(290)
		p.Name()
	}
	p.SetState(296)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PythonParserOPEN_PAREN {
		{
			p.SetState(291)
			p.Match(PythonParserOPEN_PAREN)
		}
		p.SetState(293)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1261322287421849600) != 0 || (int64((_la-83)) & ^0x3f) == 0 && ((int64(1)<<(_la-83))&11007) != 0 {
			{
				p.SetState(292)
				p.Arglist()
			}

		}
		{
			p.SetState(295)
			p.Match(PythonParserCLOSE_PAREN)
		}

	}
	{
		p.SetState(298)
		p.Match(PythonParserCOLON)
	}
	{
		p.SetState(299)
		p.Suite()
	}

	return localctx
}

// IFuncdefContext is an interface to support dynamic dispatch.
type IFuncdefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFuncdefContext differentiates from other interfaces.
	IsFuncdefContext()
}

type FuncdefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFuncdefContext() *FuncdefContext {
	var p = new(FuncdefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_funcdef
	return p
}

func (*FuncdefContext) IsFuncdefContext() {}

func NewFuncdefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FuncdefContext {
	var p = new(FuncdefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_funcdef

	return p
}

func (s *FuncdefContext) GetParser() antlr.Parser { return s.parser }

func (s *FuncdefContext) DEF() antlr.TerminalNode {
	return s.GetToken(PythonParserDEF, 0)
}

func (s *FuncdefContext) Name() INameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *FuncdefContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PythonParserOPEN_PAREN, 0)
}

func (s *FuncdefContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PythonParserCLOSE_PAREN, 0)
}

func (s *FuncdefContext) COLON() antlr.TerminalNode {
	return s.GetToken(PythonParserCOLON, 0)
}

func (s *FuncdefContext) Suite() ISuiteContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISuiteContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISuiteContext)
}

func (s *FuncdefContext) ASYNC() antlr.TerminalNode {
	return s.GetToken(PythonParserASYNC, 0)
}

func (s *FuncdefContext) Typedargslist() ITypedargslistContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypedargslistContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypedargslistContext)
}

func (s *FuncdefContext) ARROW() antlr.TerminalNode {
	return s.GetToken(PythonParserARROW, 0)
}

func (s *FuncdefContext) Test() ITestContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestContext)
}

func (s *FuncdefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FuncdefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FuncdefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterFuncdef(s)
	}
}

func (s *FuncdefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitFuncdef(s)
	}
}

func (p *PythonParser) Funcdef() (localctx IFuncdefContext) {
	this := p
	_ = this

	localctx = NewFuncdefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, PythonParserRULE_funcdef)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(302)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PythonParserASYNC {
		{
			p.SetState(301)
			p.Match(PythonParserASYNC)
		}

	}
	{
		p.SetState(304)
		p.Match(PythonParserDEF)
	}
	{
		p.SetState(305)
		p.Name()
	}
	{
		p.SetState(306)
		p.Match(PythonParserOPEN_PAREN)
	}
	p.SetState(308)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-39)) & ^0x3f) == 0 && ((int64(1)<<(_la-39))&144115188075856419) != 0 {
		{
			p.SetState(307)
			p.Typedargslist()
		}

	}
	{
		p.SetState(310)
		p.Match(PythonParserCLOSE_PAREN)
	}
	p.SetState(313)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PythonParserARROW {
		{
			p.SetState(311)
			p.Match(PythonParserARROW)
		}
		{
			p.SetState(312)
			p.Test()
		}

	}
	{
		p.SetState(315)
		p.Match(PythonParserCOLON)
	}
	{
		p.SetState(316)
		p.Suite()
	}

	return localctx
}

// ITypedargslistContext is an interface to support dynamic dispatch.
type ITypedargslistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypedargslistContext differentiates from other interfaces.
	IsTypedargslistContext()
}

type TypedargslistContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypedargslistContext() *TypedargslistContext {
	var p = new(TypedargslistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_typedargslist
	return p
}

func (*TypedargslistContext) IsTypedargslistContext() {}

func NewTypedargslistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypedargslistContext {
	var p = new(TypedargslistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_typedargslist

	return p
}

func (s *TypedargslistContext) GetParser() antlr.Parser { return s.parser }

func (s *TypedargslistContext) Args() IArgsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgsContext)
}

func (s *TypedargslistContext) Kwargs() IKwargsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKwargsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKwargsContext)
}

func (s *TypedargslistContext) AllDef_parameters() []IDef_parametersContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDef_parametersContext); ok {
			len++
		}
	}

	tst := make([]IDef_parametersContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDef_parametersContext); ok {
			tst[i] = t.(IDef_parametersContext)
			i++
		}
	}

	return tst
}

func (s *TypedargslistContext) Def_parameters(i int) IDef_parametersContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDef_parametersContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDef_parametersContext)
}

func (s *TypedargslistContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PythonParserCOMMA)
}

func (s *TypedargslistContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserCOMMA, i)
}

func (s *TypedargslistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypedargslistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypedargslistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterTypedargslist(s)
	}
}

func (s *TypedargslistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitTypedargslist(s)
	}
}

func (p *PythonParser) Typedargslist() (localctx ITypedargslistContext) {
	this := p
	_ = this

	localctx = NewTypedargslistContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, PythonParserRULE_typedargslist)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(342)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(321)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(318)
				p.Def_parameters()
			}
			{
				p.SetState(319)
				p.Match(PythonParserCOMMA)
			}

		}
		p.SetState(333)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PythonParserSTAR:
			{
				p.SetState(323)
				p.Args()
			}
			p.SetState(326)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 33, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(324)
					p.Match(PythonParserCOMMA)
				}
				{
					p.SetState(325)
					p.Def_parameters()
				}

			}
			p.SetState(330)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(328)
					p.Match(PythonParserCOMMA)
				}
				{
					p.SetState(329)
					p.Kwargs()
				}

			}

		case PythonParserPOWER:
			{
				p.SetState(332)
				p.Kwargs()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(336)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PythonParserCOMMA {
			{
				p.SetState(335)
				p.Match(PythonParserCOMMA)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(338)
			p.Def_parameters()
		}
		p.SetState(340)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PythonParserCOMMA {
			{
				p.SetState(339)
				p.Match(PythonParserCOMMA)
			}

		}

	}

	return localctx
}

// IArgsContext is an interface to support dynamic dispatch.
type IArgsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgsContext differentiates from other interfaces.
	IsArgsContext()
}

type ArgsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgsContext() *ArgsContext {
	var p = new(ArgsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_args
	return p
}

func (*ArgsContext) IsArgsContext() {}

func NewArgsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgsContext {
	var p = new(ArgsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_args

	return p
}

func (s *ArgsContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgsContext) STAR() antlr.TerminalNode {
	return s.GetToken(PythonParserSTAR, 0)
}

func (s *ArgsContext) Named_parameter() INamed_parameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamed_parameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamed_parameterContext)
}

func (s *ArgsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterArgs(s)
	}
}

func (s *ArgsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitArgs(s)
	}
}

func (p *PythonParser) Args() (localctx IArgsContext) {
	this := p
	_ = this

	localctx = NewArgsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, PythonParserRULE_args)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(344)
		p.Match(PythonParserSTAR)
	}
	{
		p.SetState(345)
		p.Named_parameter()
	}

	return localctx
}

// IKwargsContext is an interface to support dynamic dispatch.
type IKwargsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKwargsContext differentiates from other interfaces.
	IsKwargsContext()
}

type KwargsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKwargsContext() *KwargsContext {
	var p = new(KwargsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_kwargs
	return p
}

func (*KwargsContext) IsKwargsContext() {}

func NewKwargsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KwargsContext {
	var p = new(KwargsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_kwargs

	return p
}

func (s *KwargsContext) GetParser() antlr.Parser { return s.parser }

func (s *KwargsContext) POWER() antlr.TerminalNode {
	return s.GetToken(PythonParserPOWER, 0)
}

func (s *KwargsContext) Named_parameter() INamed_parameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamed_parameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamed_parameterContext)
}

func (s *KwargsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KwargsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KwargsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterKwargs(s)
	}
}

func (s *KwargsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitKwargs(s)
	}
}

func (p *PythonParser) Kwargs() (localctx IKwargsContext) {
	this := p
	_ = this

	localctx = NewKwargsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, PythonParserRULE_kwargs)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(347)
		p.Match(PythonParserPOWER)
	}
	{
		p.SetState(348)
		p.Named_parameter()
	}

	return localctx
}

// IDef_parametersContext is an interface to support dynamic dispatch.
type IDef_parametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDef_parametersContext differentiates from other interfaces.
	IsDef_parametersContext()
}

type Def_parametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDef_parametersContext() *Def_parametersContext {
	var p = new(Def_parametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_def_parameters
	return p
}

func (*Def_parametersContext) IsDef_parametersContext() {}

func NewDef_parametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Def_parametersContext {
	var p = new(Def_parametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_def_parameters

	return p
}

func (s *Def_parametersContext) GetParser() antlr.Parser { return s.parser }

func (s *Def_parametersContext) AllDef_parameter() []IDef_parameterContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDef_parameterContext); ok {
			len++
		}
	}

	tst := make([]IDef_parameterContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDef_parameterContext); ok {
			tst[i] = t.(IDef_parameterContext)
			i++
		}
	}

	return tst
}

func (s *Def_parametersContext) Def_parameter(i int) IDef_parameterContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDef_parameterContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDef_parameterContext)
}

func (s *Def_parametersContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PythonParserCOMMA)
}

func (s *Def_parametersContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserCOMMA, i)
}

func (s *Def_parametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Def_parametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Def_parametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterDef_parameters(s)
	}
}

func (s *Def_parametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitDef_parameters(s)
	}
}

func (p *PythonParser) Def_parameters() (localctx IDef_parametersContext) {
	this := p
	_ = this

	localctx = NewDef_parametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, PythonParserRULE_def_parameters)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(350)
		p.Def_parameter()
	}
	p.SetState(355)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 39, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(351)
				p.Match(PythonParserCOMMA)
			}
			{
				p.SetState(352)
				p.Def_parameter()
			}

		}
		p.SetState(357)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 39, p.GetParserRuleContext())
	}

	return localctx
}

// IDef_parameterContext is an interface to support dynamic dispatch.
type IDef_parameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDef_parameterContext differentiates from other interfaces.
	IsDef_parameterContext()
}

type Def_parameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDef_parameterContext() *Def_parameterContext {
	var p = new(Def_parameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_def_parameter
	return p
}

func (*Def_parameterContext) IsDef_parameterContext() {}

func NewDef_parameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Def_parameterContext {
	var p = new(Def_parameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_def_parameter

	return p
}

func (s *Def_parameterContext) GetParser() antlr.Parser { return s.parser }

func (s *Def_parameterContext) Named_parameter() INamed_parameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamed_parameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamed_parameterContext)
}

func (s *Def_parameterContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(PythonParserASSIGN, 0)
}

func (s *Def_parameterContext) Test() ITestContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestContext)
}

func (s *Def_parameterContext) STAR() antlr.TerminalNode {
	return s.GetToken(PythonParserSTAR, 0)
}

func (s *Def_parameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Def_parameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Def_parameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterDef_parameter(s)
	}
}

func (s *Def_parameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitDef_parameter(s)
	}
}

func (p *PythonParser) Def_parameter() (localctx IDef_parameterContext) {
	this := p
	_ = this

	localctx = NewDef_parameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, PythonParserRULE_def_parameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(364)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PythonParserTRUE, PythonParserFALSE, PythonParserNAME:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(358)
			p.Named_parameter()
		}
		p.SetState(361)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PythonParserASSIGN {
			{
				p.SetState(359)
				p.Match(PythonParserASSIGN)
			}
			{
				p.SetState(360)
				p.Test()
			}

		}

	case PythonParserSTAR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(363)
			p.Match(PythonParserSTAR)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INamed_parameterContext is an interface to support dynamic dispatch.
type INamed_parameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamed_parameterContext differentiates from other interfaces.
	IsNamed_parameterContext()
}

type Named_parameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamed_parameterContext() *Named_parameterContext {
	var p = new(Named_parameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_named_parameter
	return p
}

func (*Named_parameterContext) IsNamed_parameterContext() {}

func NewNamed_parameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Named_parameterContext {
	var p = new(Named_parameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_named_parameter

	return p
}

func (s *Named_parameterContext) GetParser() antlr.Parser { return s.parser }

func (s *Named_parameterContext) Name() INameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Named_parameterContext) COLON() antlr.TerminalNode {
	return s.GetToken(PythonParserCOLON, 0)
}

func (s *Named_parameterContext) Test() ITestContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestContext)
}

func (s *Named_parameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Named_parameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Named_parameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterNamed_parameter(s)
	}
}

func (s *Named_parameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitNamed_parameter(s)
	}
}

func (p *PythonParser) Named_parameter() (localctx INamed_parameterContext) {
	this := p
	_ = this

	localctx = NewNamed_parameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, PythonParserRULE_named_parameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(366)
		p.Name()
	}
	p.SetState(369)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PythonParserCOLON {
		{
			p.SetState(367)
			p.Match(PythonParserCOLON)
		}
		{
			p.SetState(368)
			p.Test()
		}

	}

	return localctx
}

// ISimple_stmtContext is an interface to support dynamic dispatch.
type ISimple_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimple_stmtContext differentiates from other interfaces.
	IsSimple_stmtContext()
}

type Simple_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimple_stmtContext() *Simple_stmtContext {
	var p = new(Simple_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_simple_stmt
	return p
}

func (*Simple_stmtContext) IsSimple_stmtContext() {}

func NewSimple_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Simple_stmtContext {
	var p = new(Simple_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_simple_stmt

	return p
}

func (s *Simple_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Simple_stmtContext) AllSmall_stmt() []ISmall_stmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISmall_stmtContext); ok {
			len++
		}
	}

	tst := make([]ISmall_stmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISmall_stmtContext); ok {
			tst[i] = t.(ISmall_stmtContext)
			i++
		}
	}

	return tst
}

func (s *Simple_stmtContext) Small_stmt(i int) ISmall_stmtContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISmall_stmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISmall_stmtContext)
}

func (s *Simple_stmtContext) LINE_BREAK() antlr.TerminalNode {
	return s.GetToken(PythonParserLINE_BREAK, 0)
}

func (s *Simple_stmtContext) EOF() antlr.TerminalNode {
	return s.GetToken(PythonParserEOF, 0)
}

func (s *Simple_stmtContext) AllSEMI_COLON() []antlr.TerminalNode {
	return s.GetTokens(PythonParserSEMI_COLON)
}

func (s *Simple_stmtContext) SEMI_COLON(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserSEMI_COLON, i)
}

func (s *Simple_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Simple_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterSimple_stmt(s)
	}
}

func (s *Simple_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitSimple_stmt(s)
	}
}

func (p *PythonParser) Simple_stmt() (localctx ISimple_stmtContext) {
	this := p
	_ = this

	localctx = NewSimple_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, PythonParserRULE_simple_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(371)
		p.Small_stmt()
	}
	p.SetState(376)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 43, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(372)
				p.Match(PythonParserSEMI_COLON)
			}
			{
				p.SetState(373)
				p.Small_stmt()
			}

		}
		p.SetState(378)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 43, p.GetParserRuleContext())
	}
	p.SetState(380)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PythonParserSEMI_COLON {
		{
			p.SetState(379)
			p.Match(PythonParserSEMI_COLON)
		}

	}
	{
		p.SetState(382)
		_la = p.GetTokenStream().LA(1)

		if !(_la == PythonParserEOF || _la == PythonParserLINE_BREAK) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ISmall_stmtContext is an interface to support dynamic dispatch.
type ISmall_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSmall_stmtContext differentiates from other interfaces.
	IsSmall_stmtContext()
}

type Small_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySmall_stmtContext() *Small_stmtContext {
	var p = new(Small_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_small_stmt
	return p
}

func (*Small_stmtContext) IsSmall_stmtContext() {}

func NewSmall_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Small_stmtContext {
	var p = new(Small_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_small_stmt

	return p
}

func (s *Small_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Small_stmtContext) CopyFrom(ctx *Small_stmtContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Small_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Small_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Assert_stmtContext struct {
	*Small_stmtContext
}

func NewAssert_stmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Assert_stmtContext {
	var p = new(Assert_stmtContext)

	p.Small_stmtContext = NewEmptySmall_stmtContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Small_stmtContext))

	return p
}

func (s *Assert_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Assert_stmtContext) ASSERT() antlr.TerminalNode {
	return s.GetToken(PythonParserASSERT, 0)
}

func (s *Assert_stmtContext) AllTest() []ITestContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITestContext); ok {
			len++
		}
	}

	tst := make([]ITestContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITestContext); ok {
			tst[i] = t.(ITestContext)
			i++
		}
	}

	return tst
}

func (s *Assert_stmtContext) Test(i int) ITestContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestContext)
}

func (s *Assert_stmtContext) COMMA() antlr.TerminalNode {
	return s.GetToken(PythonParserCOMMA, 0)
}

func (s *Assert_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterAssert_stmt(s)
	}
}

func (s *Assert_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitAssert_stmt(s)
	}
}

type Nonlocal_stmtContext struct {
	*Small_stmtContext
}

func NewNonlocal_stmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Nonlocal_stmtContext {
	var p = new(Nonlocal_stmtContext)

	p.Small_stmtContext = NewEmptySmall_stmtContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Small_stmtContext))

	return p
}

func (s *Nonlocal_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Nonlocal_stmtContext) NONLOCAL() antlr.TerminalNode {
	return s.GetToken(PythonParserNONLOCAL, 0)
}

func (s *Nonlocal_stmtContext) AllName() []INameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INameContext); ok {
			len++
		}
	}

	tst := make([]INameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INameContext); ok {
			tst[i] = t.(INameContext)
			i++
		}
	}

	return tst
}

func (s *Nonlocal_stmtContext) Name(i int) INameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Nonlocal_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PythonParserCOMMA)
}

func (s *Nonlocal_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserCOMMA, i)
}

func (s *Nonlocal_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterNonlocal_stmt(s)
	}
}

func (s *Nonlocal_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitNonlocal_stmt(s)
	}
}

type Pass_stmtContext struct {
	*Small_stmtContext
}

func NewPass_stmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Pass_stmtContext {
	var p = new(Pass_stmtContext)

	p.Small_stmtContext = NewEmptySmall_stmtContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Small_stmtContext))

	return p
}

func (s *Pass_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pass_stmtContext) PASS() antlr.TerminalNode {
	return s.GetToken(PythonParserPASS, 0)
}

func (s *Pass_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterPass_stmt(s)
	}
}

func (s *Pass_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitPass_stmt(s)
	}
}

type Import_stmtContext struct {
	*Small_stmtContext
}

func NewImport_stmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Import_stmtContext {
	var p = new(Import_stmtContext)

	p.Small_stmtContext = NewEmptySmall_stmtContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Small_stmtContext))

	return p
}

func (s *Import_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Import_stmtContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(PythonParserIMPORT, 0)
}

func (s *Import_stmtContext) Dotted_as_names() IDotted_as_namesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDotted_as_namesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDotted_as_namesContext)
}

func (s *Import_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterImport_stmt(s)
	}
}

func (s *Import_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitImport_stmt(s)
	}
}

type Expr_stmtContext struct {
	*Small_stmtContext
}

func NewExpr_stmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_stmtContext {
	var p = new(Expr_stmtContext)

	p.Small_stmtContext = NewEmptySmall_stmtContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Small_stmtContext))

	return p
}

func (s *Expr_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_stmtContext) Testlist_star_expr() ITestlist_star_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestlist_star_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestlist_star_exprContext)
}

func (s *Expr_stmtContext) Assign_part() IAssign_partContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssign_partContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssign_partContext)
}

func (s *Expr_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterExpr_stmt(s)
	}
}

func (s *Expr_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitExpr_stmt(s)
	}
}

type Raise_stmtContext struct {
	*Small_stmtContext
}

func NewRaise_stmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Raise_stmtContext {
	var p = new(Raise_stmtContext)

	p.Small_stmtContext = NewEmptySmall_stmtContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Small_stmtContext))

	return p
}

func (s *Raise_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Raise_stmtContext) RAISE() antlr.TerminalNode {
	return s.GetToken(PythonParserRAISE, 0)
}

func (s *Raise_stmtContext) AllTest() []ITestContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITestContext); ok {
			len++
		}
	}

	tst := make([]ITestContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITestContext); ok {
			tst[i] = t.(ITestContext)
			i++
		}
	}

	return tst
}

func (s *Raise_stmtContext) Test(i int) ITestContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestContext)
}

func (s *Raise_stmtContext) FROM() antlr.TerminalNode {
	return s.GetToken(PythonParserFROM, 0)
}

func (s *Raise_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PythonParserCOMMA)
}

func (s *Raise_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserCOMMA, i)
}

func (s *Raise_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterRaise_stmt(s)
	}
}

func (s *Raise_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitRaise_stmt(s)
	}
}

type Yield_stmtContext struct {
	*Small_stmtContext
}

func NewYield_stmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Yield_stmtContext {
	var p = new(Yield_stmtContext)

	p.Small_stmtContext = NewEmptySmall_stmtContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Small_stmtContext))

	return p
}

func (s *Yield_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Yield_stmtContext) Yield_expr() IYield_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IYield_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IYield_exprContext)
}

func (s *Yield_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterYield_stmt(s)
	}
}

func (s *Yield_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitYield_stmt(s)
	}
}

type From_stmtContext struct {
	*Small_stmtContext
}

func NewFrom_stmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *From_stmtContext {
	var p = new(From_stmtContext)

	p.Small_stmtContext = NewEmptySmall_stmtContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Small_stmtContext))

	return p
}

func (s *From_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *From_stmtContext) FROM() antlr.TerminalNode {
	return s.GetToken(PythonParserFROM, 0)
}

func (s *From_stmtContext) From_stmt_source() IFrom_stmt_sourceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrom_stmt_sourceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrom_stmt_sourceContext)
}

func (s *From_stmtContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(PythonParserIMPORT, 0)
}

func (s *From_stmtContext) From_stmt_as_names() IFrom_stmt_as_namesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrom_stmt_as_namesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrom_stmt_as_namesContext)
}

func (s *From_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterFrom_stmt(s)
	}
}

func (s *From_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitFrom_stmt(s)
	}
}

type Global_stmtContext struct {
	*Small_stmtContext
}

func NewGlobal_stmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Global_stmtContext {
	var p = new(Global_stmtContext)

	p.Small_stmtContext = NewEmptySmall_stmtContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Small_stmtContext))

	return p
}

func (s *Global_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Global_stmtContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(PythonParserGLOBAL, 0)
}

func (s *Global_stmtContext) AllName() []INameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INameContext); ok {
			len++
		}
	}

	tst := make([]INameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INameContext); ok {
			tst[i] = t.(INameContext)
			i++
		}
	}

	return tst
}

func (s *Global_stmtContext) Name(i int) INameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Global_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PythonParserCOMMA)
}

func (s *Global_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserCOMMA, i)
}

func (s *Global_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterGlobal_stmt(s)
	}
}

func (s *Global_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitGlobal_stmt(s)
	}
}

type Continue_stmtContext struct {
	*Small_stmtContext
}

func NewContinue_stmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Continue_stmtContext {
	var p = new(Continue_stmtContext)

	p.Small_stmtContext = NewEmptySmall_stmtContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Small_stmtContext))

	return p
}

func (s *Continue_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Continue_stmtContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(PythonParserCONTINUE, 0)
}

func (s *Continue_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterContinue_stmt(s)
	}
}

func (s *Continue_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitContinue_stmt(s)
	}
}

type Exec_stmtContext struct {
	*Small_stmtContext
}

func NewExec_stmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Exec_stmtContext {
	var p = new(Exec_stmtContext)

	p.Small_stmtContext = NewEmptySmall_stmtContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Small_stmtContext))

	return p
}

func (s *Exec_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Exec_stmtContext) EXEC() antlr.TerminalNode {
	return s.GetToken(PythonParserEXEC, 0)
}

func (s *Exec_stmtContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Exec_stmtContext) IN() antlr.TerminalNode {
	return s.GetToken(PythonParserIN, 0)
}

func (s *Exec_stmtContext) AllTest() []ITestContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITestContext); ok {
			len++
		}
	}

	tst := make([]ITestContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITestContext); ok {
			tst[i] = t.(ITestContext)
			i++
		}
	}

	return tst
}

func (s *Exec_stmtContext) Test(i int) ITestContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestContext)
}

func (s *Exec_stmtContext) COMMA() antlr.TerminalNode {
	return s.GetToken(PythonParserCOMMA, 0)
}

func (s *Exec_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterExec_stmt(s)
	}
}

func (s *Exec_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitExec_stmt(s)
	}
}

type Break_stmtContext struct {
	*Small_stmtContext
}

func NewBreak_stmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Break_stmtContext {
	var p = new(Break_stmtContext)

	p.Small_stmtContext = NewEmptySmall_stmtContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Small_stmtContext))

	return p
}

func (s *Break_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Break_stmtContext) BREAK() antlr.TerminalNode {
	return s.GetToken(PythonParserBREAK, 0)
}

func (s *Break_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterBreak_stmt(s)
	}
}

func (s *Break_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitBreak_stmt(s)
	}
}

type Del_stmtContext struct {
	*Small_stmtContext
}

func NewDel_stmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Del_stmtContext {
	var p = new(Del_stmtContext)

	p.Small_stmtContext = NewEmptySmall_stmtContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Small_stmtContext))

	return p
}

func (s *Del_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Del_stmtContext) DEL() antlr.TerminalNode {
	return s.GetToken(PythonParserDEL, 0)
}

func (s *Del_stmtContext) Exprlist() IExprlistContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprlistContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprlistContext)
}

func (s *Del_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterDel_stmt(s)
	}
}

func (s *Del_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitDel_stmt(s)
	}
}

type Print_stmtContext struct {
	*Small_stmtContext
}

func NewPrint_stmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Print_stmtContext {
	var p = new(Print_stmtContext)

	p.Small_stmtContext = NewEmptySmall_stmtContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Small_stmtContext))

	return p
}

func (s *Print_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Print_stmtContext) PRINT() antlr.TerminalNode {
	return s.GetToken(PythonParserPRINT, 0)
}

func (s *Print_stmtContext) RIGHT_SHIFT() antlr.TerminalNode {
	return s.GetToken(PythonParserRIGHT_SHIFT, 0)
}

func (s *Print_stmtContext) AllTest() []ITestContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITestContext); ok {
			len++
		}
	}

	tst := make([]ITestContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITestContext); ok {
			tst[i] = t.(ITestContext)
			i++
		}
	}

	return tst
}

func (s *Print_stmtContext) Test(i int) ITestContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestContext)
}

func (s *Print_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PythonParserCOMMA)
}

func (s *Print_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserCOMMA, i)
}

func (s *Print_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterPrint_stmt(s)
	}
}

func (s *Print_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitPrint_stmt(s)
	}
}

type Return_stmtContext struct {
	*Small_stmtContext
}

func NewReturn_stmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Return_stmtContext {
	var p = new(Return_stmtContext)

	p.Small_stmtContext = NewEmptySmall_stmtContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Small_stmtContext))

	return p
}

func (s *Return_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Return_stmtContext) RETURN() antlr.TerminalNode {
	return s.GetToken(PythonParserRETURN, 0)
}

func (s *Return_stmtContext) Testlist() ITestlistContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestlistContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestlistContext)
}

func (s *Return_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterReturn_stmt(s)
	}
}

func (s *Return_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitReturn_stmt(s)
	}
}

func (p *PythonParser) Small_stmt() (localctx ISmall_stmtContext) {
	this := p
	_ = this

	localctx = NewSmall_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, PythonParserRULE_small_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(489)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 61, p.GetParserRuleContext()) {
	case 1:
		localctx = NewExpr_stmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(384)
			p.Testlist_star_expr()
		}
		p.SetState(386)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 45, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(385)
				p.Assign_part()
			}

		}

	case 2:
		localctx = NewPrint_stmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(388)

		if !(p.CheckVersion(2)) {
			panic(antlr.NewFailedPredicateException(p, "p.CheckVersion(2)", ""))
		}
		{
			p.SetState(389)
			p.Match(PythonParserPRINT)
		}
		p.SetState(412)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PythonParserNONE, PythonParserLAMBDA, PythonParserNOT, PythonParserAWAIT, PythonParserPRINT, PythonParserEXEC, PythonParserTRUE, PythonParserFALSE, PythonParserELLIPSIS, PythonParserREVERSE_QUOTE, PythonParserADD, PythonParserMINUS, PythonParserNOT_OP, PythonParserSTRING, PythonParserDECIMAL_INTEGER, PythonParserOCT_INTEGER, PythonParserHEX_INTEGER, PythonParserBIN_INTEGER, PythonParserIMAG_NUMBER, PythonParserFLOAT_NUMBER, PythonParserOPEN_PAREN, PythonParserOPEN_BRACE, PythonParserOPEN_BRACKET, PythonParserNAME:
			{
				p.SetState(390)
				p.Test()
			}
			p.SetState(395)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(391)
						p.Match(PythonParserCOMMA)
					}
					{
						p.SetState(392)
						p.Test()
					}

				}
				p.SetState(397)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext())
			}
			p.SetState(399)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PythonParserCOMMA {
				{
					p.SetState(398)
					p.Match(PythonParserCOMMA)
				}

			}

		case PythonParserRIGHT_SHIFT:
			{
				p.SetState(401)
				p.Match(PythonParserRIGHT_SHIFT)
			}
			{
				p.SetState(402)
				p.Test()
			}

			p.SetState(405)
			p.GetErrorHandler().Sync(p)
			_alt = 1
			for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				switch _alt {
				case 1:
					{
						p.SetState(403)
						p.Match(PythonParserCOMMA)
					}
					{
						p.SetState(404)
						p.Test()
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

				p.SetState(407)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 48, p.GetParserRuleContext())
			}
			p.SetState(410)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PythonParserCOMMA {
				{
					p.SetState(409)
					p.Match(PythonParserCOMMA)
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetVersion(2)

	case 3:
		localctx = NewDel_stmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(416)
			p.Match(PythonParserDEL)
		}
		{
			p.SetState(417)
			p.Exprlist()
		}

	case 4:
		localctx = NewPass_stmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(418)
			p.Match(PythonParserPASS)
		}

	case 5:
		localctx = NewBreak_stmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(419)
			p.Match(PythonParserBREAK)
		}

	case 6:
		localctx = NewContinue_stmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(420)
			p.Match(PythonParserCONTINUE)
		}

	case 7:
		localctx = NewReturn_stmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(421)
			p.Match(PythonParserRETURN)
		}
		p.SetState(423)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1261023220259094528) != 0 || (int64((_la-83)) & ^0x3f) == 0 && ((int64(1)<<(_la-83))&11007) != 0 {
			{
				p.SetState(422)
				p.Testlist()
			}

		}

	case 8:
		localctx = NewRaise_stmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(425)
			p.Match(PythonParserRAISE)
		}
		p.SetState(435)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1261023220259094528) != 0 || (int64((_la-83)) & ^0x3f) == 0 && ((int64(1)<<(_la-83))&11007) != 0 {
			{
				p.SetState(426)
				p.Test()
			}
			p.SetState(433)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PythonParserCOMMA {
				{
					p.SetState(427)
					p.Match(PythonParserCOMMA)
				}
				{
					p.SetState(428)
					p.Test()
				}
				p.SetState(431)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == PythonParserCOMMA {
					{
						p.SetState(429)
						p.Match(PythonParserCOMMA)
					}
					{
						p.SetState(430)
						p.Test()
					}

				}

			}

		}
		p.SetState(439)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PythonParserFROM {
			{
				p.SetState(437)
				p.Match(PythonParserFROM)
			}
			{
				p.SetState(438)
				p.Test()
			}

		}

	case 9:
		localctx = NewYield_stmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(441)
			p.Yield_expr()
		}

	case 10:
		localctx = NewImport_stmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(442)
			p.Match(PythonParserIMPORT)
		}
		{
			p.SetState(443)
			p.Dotted_as_names()
		}

	case 11:
		localctx = NewFrom_stmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(444)
			p.Match(PythonParserFROM)
		}
		{
			p.SetState(445)
			p.From_stmt_source()
		}
		{
			p.SetState(446)
			p.Match(PythonParserIMPORT)
		}
		{
			p.SetState(447)
			p.From_stmt_as_names()
		}

	case 12:
		localctx = NewGlobal_stmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(449)
			p.Match(PythonParserGLOBAL)
		}
		{
			p.SetState(450)
			p.Name()
		}
		p.SetState(455)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PythonParserCOMMA {
			{
				p.SetState(451)
				p.Match(PythonParserCOMMA)
			}
			{
				p.SetState(452)
				p.Name()
			}

			p.SetState(457)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 13:
		localctx = NewExec_stmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		p.SetState(458)

		if !(p.CheckVersion(2)) {
			panic(antlr.NewFailedPredicateException(p, "p.CheckVersion(2)", ""))
		}
		{
			p.SetState(459)
			p.Match(PythonParserEXEC)
		}
		{
			p.SetState(460)
			p.expr(0)
		}
		p.SetState(467)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PythonParserIN {
			{
				p.SetState(461)
				p.Match(PythonParserIN)
			}
			{
				p.SetState(462)
				p.Test()
			}
			p.SetState(465)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PythonParserCOMMA {
				{
					p.SetState(463)
					p.Match(PythonParserCOMMA)
				}
				{
					p.SetState(464)
					p.Test()
				}

			}

		}
		p.SetVersion(2)

	case 14:
		localctx = NewAssert_stmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(471)
			p.Match(PythonParserASSERT)
		}
		{
			p.SetState(472)
			p.Test()
		}
		p.SetState(475)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PythonParserCOMMA {
			{
				p.SetState(473)
				p.Match(PythonParserCOMMA)
			}
			{
				p.SetState(474)
				p.Test()
			}

		}

	case 15:
		localctx = NewNonlocal_stmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 15)
		p.SetState(477)

		if !(p.CheckVersion(3)) {
			panic(antlr.NewFailedPredicateException(p, "p.CheckVersion(3)", ""))
		}
		{
			p.SetState(478)
			p.Match(PythonParserNONLOCAL)
		}
		{
			p.SetState(479)
			p.Name()
		}
		p.SetState(484)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PythonParserCOMMA {
			{
				p.SetState(480)
				p.Match(PythonParserCOMMA)
			}
			{
				p.SetState(481)
				p.Name()
			}

			p.SetState(486)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetVersion(3)

	}

	return localctx
}

// IFrom_stmt_sourceContext is an interface to support dynamic dispatch.
type IFrom_stmt_sourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFrom_stmt_sourceContext differentiates from other interfaces.
	IsFrom_stmt_sourceContext()
}

type From_stmt_sourceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrom_stmt_sourceContext() *From_stmt_sourceContext {
	var p = new(From_stmt_sourceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_from_stmt_source
	return p
}

func (*From_stmt_sourceContext) IsFrom_stmt_sourceContext() {}

func NewFrom_stmt_sourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *From_stmt_sourceContext {
	var p = new(From_stmt_sourceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_from_stmt_source

	return p
}

func (s *From_stmt_sourceContext) GetParser() antlr.Parser { return s.parser }

func (s *From_stmt_sourceContext) Dotted_name() IDotted_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDotted_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDotted_nameContext)
}

func (s *From_stmt_sourceContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(PythonParserDOT)
}

func (s *From_stmt_sourceContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserDOT, i)
}

func (s *From_stmt_sourceContext) AllELLIPSIS() []antlr.TerminalNode {
	return s.GetTokens(PythonParserELLIPSIS)
}

func (s *From_stmt_sourceContext) ELLIPSIS(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserELLIPSIS, i)
}

func (s *From_stmt_sourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *From_stmt_sourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *From_stmt_sourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterFrom_stmt_source(s)
	}
}

func (s *From_stmt_sourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitFrom_stmt_source(s)
	}
}

func (p *PythonParser) From_stmt_source() (localctx IFrom_stmt_sourceContext) {
	this := p
	_ = this

	localctx = NewFrom_stmt_sourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, PythonParserRULE_from_stmt_source)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(503)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext()) {
	case 1:
		p.SetState(494)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PythonParserDOT || _la == PythonParserELLIPSIS {
			{
				p.SetState(491)
				_la = p.GetTokenStream().LA(1)

				if !(_la == PythonParserDOT || _la == PythonParserELLIPSIS) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

			p.SetState(496)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(497)
			p.dotted_name(0)
		}

	case 2:
		p.SetState(499)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == PythonParserDOT || _la == PythonParserELLIPSIS {
			{
				p.SetState(498)
				_la = p.GetTokenStream().LA(1)

				if !(_la == PythonParserDOT || _la == PythonParserELLIPSIS) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

			p.SetState(501)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IFrom_stmt_as_namesContext is an interface to support dynamic dispatch.
type IFrom_stmt_as_namesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFrom_stmt_as_namesContext differentiates from other interfaces.
	IsFrom_stmt_as_namesContext()
}

type From_stmt_as_namesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrom_stmt_as_namesContext() *From_stmt_as_namesContext {
	var p = new(From_stmt_as_namesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_from_stmt_as_names
	return p
}

func (*From_stmt_as_namesContext) IsFrom_stmt_as_namesContext() {}

func NewFrom_stmt_as_namesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *From_stmt_as_namesContext {
	var p = new(From_stmt_as_namesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_from_stmt_as_names

	return p
}

func (s *From_stmt_as_namesContext) GetParser() antlr.Parser { return s.parser }

func (s *From_stmt_as_namesContext) STAR() antlr.TerminalNode {
	return s.GetToken(PythonParserSTAR, 0)
}

func (s *From_stmt_as_namesContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PythonParserOPEN_PAREN, 0)
}

func (s *From_stmt_as_namesContext) Import_as_names() IImport_as_namesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImport_as_namesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImport_as_namesContext)
}

func (s *From_stmt_as_namesContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PythonParserCLOSE_PAREN, 0)
}

func (s *From_stmt_as_namesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *From_stmt_as_namesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *From_stmt_as_namesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterFrom_stmt_as_names(s)
	}
}

func (s *From_stmt_as_namesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitFrom_stmt_as_names(s)
	}
}

func (p *PythonParser) From_stmt_as_names() (localctx IFrom_stmt_as_namesContext) {
	this := p
	_ = this

	localctx = NewFrom_stmt_as_namesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, PythonParserRULE_from_stmt_as_names)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(511)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PythonParserSTAR:
		{
			p.SetState(505)
			p.Match(PythonParserSTAR)
		}

	case PythonParserOPEN_PAREN:
		{
			p.SetState(506)
			p.Match(PythonParserOPEN_PAREN)
		}
		{
			p.SetState(507)
			p.Import_as_names()
		}
		{
			p.SetState(508)
			p.Match(PythonParserCLOSE_PAREN)
		}

	case PythonParserTRUE, PythonParserFALSE, PythonParserNAME:
		{
			p.SetState(510)
			p.Import_as_names()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITestlist_star_exprContext is an interface to support dynamic dispatch.
type ITestlist_star_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTestlist_star_exprContext differentiates from other interfaces.
	IsTestlist_star_exprContext()
}

type Testlist_star_exprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTestlist_star_exprContext() *Testlist_star_exprContext {
	var p = new(Testlist_star_exprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_testlist_star_expr
	return p
}

func (*Testlist_star_exprContext) IsTestlist_star_exprContext() {}

func NewTestlist_star_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Testlist_star_exprContext {
	var p = new(Testlist_star_exprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_testlist_star_expr

	return p
}

func (s *Testlist_star_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Testlist_star_exprContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PythonParserCOMMA)
}

func (s *Testlist_star_exprContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserCOMMA, i)
}

func (s *Testlist_star_exprContext) AllTest() []ITestContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITestContext); ok {
			len++
		}
	}

	tst := make([]ITestContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITestContext); ok {
			tst[i] = t.(ITestContext)
			i++
		}
	}

	return tst
}

func (s *Testlist_star_exprContext) Test(i int) ITestContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestContext)
}

func (s *Testlist_star_exprContext) AllStar_expr() []IStar_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStar_exprContext); ok {
			len++
		}
	}

	tst := make([]IStar_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStar_exprContext); ok {
			tst[i] = t.(IStar_exprContext)
			i++
		}
	}

	return tst
}

func (s *Testlist_star_exprContext) Star_expr(i int) IStar_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStar_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStar_exprContext)
}

func (s *Testlist_star_exprContext) Testlist() ITestlistContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestlistContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestlistContext)
}

func (s *Testlist_star_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Testlist_star_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Testlist_star_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterTestlist_star_expr(s)
	}
}

func (s *Testlist_star_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitTestlist_star_expr(s)
	}
}

func (p *PythonParser) Testlist_star_expr() (localctx ITestlist_star_exprContext) {
	this := p
	_ = this

	localctx = NewTestlist_star_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, PythonParserRULE_testlist_star_expr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(528)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 69, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(519)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				p.SetState(515)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case PythonParserNONE, PythonParserLAMBDA, PythonParserNOT, PythonParserAWAIT, PythonParserPRINT, PythonParserEXEC, PythonParserTRUE, PythonParserFALSE, PythonParserELLIPSIS, PythonParserREVERSE_QUOTE, PythonParserADD, PythonParserMINUS, PythonParserNOT_OP, PythonParserSTRING, PythonParserDECIMAL_INTEGER, PythonParserOCT_INTEGER, PythonParserHEX_INTEGER, PythonParserBIN_INTEGER, PythonParserIMAG_NUMBER, PythonParserFLOAT_NUMBER, PythonParserOPEN_PAREN, PythonParserOPEN_BRACE, PythonParserOPEN_BRACKET, PythonParserNAME:
					{
						p.SetState(513)
						p.Test()
					}

				case PythonParserSTAR:
					{
						p.SetState(514)
						p.Star_expr()
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}
				{
					p.SetState(517)
					p.Match(PythonParserCOMMA)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(521)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext())
		}
		p.SetState(525)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 68, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(523)
				p.Test()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 68, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(524)
				p.Star_expr()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(527)
			p.Testlist()
		}

	}

	return localctx
}

// IStar_exprContext is an interface to support dynamic dispatch.
type IStar_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStar_exprContext differentiates from other interfaces.
	IsStar_exprContext()
}

type Star_exprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStar_exprContext() *Star_exprContext {
	var p = new(Star_exprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_star_expr
	return p
}

func (*Star_exprContext) IsStar_exprContext() {}

func NewStar_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Star_exprContext {
	var p = new(Star_exprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_star_expr

	return p
}

func (s *Star_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Star_exprContext) STAR() antlr.TerminalNode {
	return s.GetToken(PythonParserSTAR, 0)
}

func (s *Star_exprContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Star_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Star_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Star_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterStar_expr(s)
	}
}

func (s *Star_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitStar_expr(s)
	}
}

func (p *PythonParser) Star_expr() (localctx IStar_exprContext) {
	this := p
	_ = this

	localctx = NewStar_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, PythonParserRULE_star_expr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(530)
		p.Match(PythonParserSTAR)
	}
	{
		p.SetState(531)
		p.expr(0)
	}

	return localctx
}

// IAssign_partContext is an interface to support dynamic dispatch.
type IAssign_partContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsAssign_partContext differentiates from other interfaces.
	IsAssign_partContext()
}

type Assign_partContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyAssign_partContext() *Assign_partContext {
	var p = new(Assign_partContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_assign_part
	return p
}

func (*Assign_partContext) IsAssign_partContext() {}

func NewAssign_partContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Assign_partContext {
	var p = new(Assign_partContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_assign_part

	return p
}

func (s *Assign_partContext) GetParser() antlr.Parser { return s.parser }

func (s *Assign_partContext) GetOp() antlr.Token { return s.op }

func (s *Assign_partContext) SetOp(v antlr.Token) { s.op = v }

func (s *Assign_partContext) AllASSIGN() []antlr.TerminalNode {
	return s.GetTokens(PythonParserASSIGN)
}

func (s *Assign_partContext) ASSIGN(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserASSIGN, i)
}

func (s *Assign_partContext) AllTestlist_star_expr() []ITestlist_star_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITestlist_star_exprContext); ok {
			len++
		}
	}

	tst := make([]ITestlist_star_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITestlist_star_exprContext); ok {
			tst[i] = t.(ITestlist_star_exprContext)
			i++
		}
	}

	return tst
}

func (s *Assign_partContext) Testlist_star_expr(i int) ITestlist_star_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestlist_star_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestlist_star_exprContext)
}

func (s *Assign_partContext) Yield_expr() IYield_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IYield_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IYield_exprContext)
}

func (s *Assign_partContext) COLON() antlr.TerminalNode {
	return s.GetToken(PythonParserCOLON, 0)
}

func (s *Assign_partContext) Test() ITestContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestContext)
}

func (s *Assign_partContext) Testlist() ITestlistContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestlistContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestlistContext)
}

func (s *Assign_partContext) ADD_ASSIGN() antlr.TerminalNode {
	return s.GetToken(PythonParserADD_ASSIGN, 0)
}

func (s *Assign_partContext) SUB_ASSIGN() antlr.TerminalNode {
	return s.GetToken(PythonParserSUB_ASSIGN, 0)
}

func (s *Assign_partContext) MULT_ASSIGN() antlr.TerminalNode {
	return s.GetToken(PythonParserMULT_ASSIGN, 0)
}

func (s *Assign_partContext) AT_ASSIGN() antlr.TerminalNode {
	return s.GetToken(PythonParserAT_ASSIGN, 0)
}

func (s *Assign_partContext) DIV_ASSIGN() antlr.TerminalNode {
	return s.GetToken(PythonParserDIV_ASSIGN, 0)
}

func (s *Assign_partContext) MOD_ASSIGN() antlr.TerminalNode {
	return s.GetToken(PythonParserMOD_ASSIGN, 0)
}

func (s *Assign_partContext) AND_ASSIGN() antlr.TerminalNode {
	return s.GetToken(PythonParserAND_ASSIGN, 0)
}

func (s *Assign_partContext) OR_ASSIGN() antlr.TerminalNode {
	return s.GetToken(PythonParserOR_ASSIGN, 0)
}

func (s *Assign_partContext) XOR_ASSIGN() antlr.TerminalNode {
	return s.GetToken(PythonParserXOR_ASSIGN, 0)
}

func (s *Assign_partContext) LEFT_SHIFT_ASSIGN() antlr.TerminalNode {
	return s.GetToken(PythonParserLEFT_SHIFT_ASSIGN, 0)
}

func (s *Assign_partContext) RIGHT_SHIFT_ASSIGN() antlr.TerminalNode {
	return s.GetToken(PythonParserRIGHT_SHIFT_ASSIGN, 0)
}

func (s *Assign_partContext) POWER_ASSIGN() antlr.TerminalNode {
	return s.GetToken(PythonParserPOWER_ASSIGN, 0)
}

func (s *Assign_partContext) IDIV_ASSIGN() antlr.TerminalNode {
	return s.GetToken(PythonParserIDIV_ASSIGN, 0)
}

func (s *Assign_partContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Assign_partContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Assign_partContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterAssign_part(s)
	}
}

func (s *Assign_partContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitAssign_part(s)
	}
}

func (p *PythonParser) Assign_part() (localctx IAssign_partContext) {
	this := p
	_ = this

	localctx = NewAssign_partContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, PythonParserRULE_assign_part)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(563)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(533)
			p.Match(PythonParserASSIGN)
		}
		p.SetState(547)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PythonParserNONE, PythonParserLAMBDA, PythonParserNOT, PythonParserAWAIT, PythonParserPRINT, PythonParserEXEC, PythonParserTRUE, PythonParserFALSE, PythonParserELLIPSIS, PythonParserREVERSE_QUOTE, PythonParserSTAR, PythonParserADD, PythonParserMINUS, PythonParserNOT_OP, PythonParserSTRING, PythonParserDECIMAL_INTEGER, PythonParserOCT_INTEGER, PythonParserHEX_INTEGER, PythonParserBIN_INTEGER, PythonParserIMAG_NUMBER, PythonParserFLOAT_NUMBER, PythonParserOPEN_PAREN, PythonParserOPEN_BRACE, PythonParserOPEN_BRACKET, PythonParserNAME:
			{
				p.SetState(534)
				p.Testlist_star_expr()
			}
			p.SetState(539)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 70, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(535)
						p.Match(PythonParserASSIGN)
					}
					{
						p.SetState(536)
						p.Testlist_star_expr()
					}

				}
				p.SetState(541)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 70, p.GetParserRuleContext())
			}
			p.SetState(544)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PythonParserASSIGN {
				{
					p.SetState(542)
					p.Match(PythonParserASSIGN)
				}
				{
					p.SetState(543)
					p.Yield_expr()
				}

			}

		case PythonParserYIELD:
			{
				p.SetState(546)
				p.Yield_expr()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(549)

		if !(p.CheckVersion(3)) {
			panic(antlr.NewFailedPredicateException(p, "p.CheckVersion(3)", ""))
		}
		{
			p.SetState(550)
			p.Match(PythonParserCOLON)
		}
		{
			p.SetState(551)
			p.Test()
		}
		p.SetState(554)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PythonParserASSIGN {
			{
				p.SetState(552)
				p.Match(PythonParserASSIGN)
			}
			{
				p.SetState(553)
				p.Testlist()
			}

		}
		p.SetVersion(3)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(558)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*Assign_partContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !((int64((_la-70)) & ^0x3f) == 0 && ((int64(1)<<(_la-70))&8191) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*Assign_partContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(561)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PythonParserYIELD:
			{
				p.SetState(559)
				p.Yield_expr()
			}

		case PythonParserNONE, PythonParserLAMBDA, PythonParserNOT, PythonParserAWAIT, PythonParserPRINT, PythonParserEXEC, PythonParserTRUE, PythonParserFALSE, PythonParserELLIPSIS, PythonParserREVERSE_QUOTE, PythonParserADD, PythonParserMINUS, PythonParserNOT_OP, PythonParserSTRING, PythonParserDECIMAL_INTEGER, PythonParserOCT_INTEGER, PythonParserHEX_INTEGER, PythonParserBIN_INTEGER, PythonParserIMAG_NUMBER, PythonParserFLOAT_NUMBER, PythonParserOPEN_PAREN, PythonParserOPEN_BRACE, PythonParserOPEN_BRACKET, PythonParserNAME:
			{
				p.SetState(560)
				p.Testlist()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}

	return localctx
}

// IExprlistContext is an interface to support dynamic dispatch.
type IExprlistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExprlistContext differentiates from other interfaces.
	IsExprlistContext()
}

type ExprlistContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprlistContext() *ExprlistContext {
	var p = new(ExprlistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_exprlist
	return p
}

func (*ExprlistContext) IsExprlistContext() {}

func NewExprlistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprlistContext {
	var p = new(ExprlistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_exprlist

	return p
}

func (s *ExprlistContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprlistContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ExprlistContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprlistContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PythonParserCOMMA)
}

func (s *ExprlistContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserCOMMA, i)
}

func (s *ExprlistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprlistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExprlistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterExprlist(s)
	}
}

func (s *ExprlistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitExprlist(s)
	}
}

func (p *PythonParser) Exprlist() (localctx IExprlistContext) {
	this := p
	_ = this

	localctx = NewExprlistContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, PythonParserRULE_exprlist)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(565)
		p.expr(0)
	}
	p.SetState(570)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 76, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(566)
				p.Match(PythonParserCOMMA)
			}
			{
				p.SetState(567)
				p.expr(0)
			}

		}
		p.SetState(572)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 76, p.GetParserRuleContext())
	}
	p.SetState(574)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PythonParserCOMMA {
		{
			p.SetState(573)
			p.Match(PythonParserCOMMA)
		}

	}

	return localctx
}

// IImport_as_namesContext is an interface to support dynamic dispatch.
type IImport_as_namesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImport_as_namesContext differentiates from other interfaces.
	IsImport_as_namesContext()
}

type Import_as_namesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImport_as_namesContext() *Import_as_namesContext {
	var p = new(Import_as_namesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_import_as_names
	return p
}

func (*Import_as_namesContext) IsImport_as_namesContext() {}

func NewImport_as_namesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Import_as_namesContext {
	var p = new(Import_as_namesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_import_as_names

	return p
}

func (s *Import_as_namesContext) GetParser() antlr.Parser { return s.parser }

func (s *Import_as_namesContext) AllImport_as_name() []IImport_as_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IImport_as_nameContext); ok {
			len++
		}
	}

	tst := make([]IImport_as_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IImport_as_nameContext); ok {
			tst[i] = t.(IImport_as_nameContext)
			i++
		}
	}

	return tst
}

func (s *Import_as_namesContext) Import_as_name(i int) IImport_as_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImport_as_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImport_as_nameContext)
}

func (s *Import_as_namesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PythonParserCOMMA)
}

func (s *Import_as_namesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserCOMMA, i)
}

func (s *Import_as_namesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Import_as_namesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Import_as_namesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterImport_as_names(s)
	}
}

func (s *Import_as_namesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitImport_as_names(s)
	}
}

func (p *PythonParser) Import_as_names() (localctx IImport_as_namesContext) {
	this := p
	_ = this

	localctx = NewImport_as_namesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, PythonParserRULE_import_as_names)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(576)
		p.Import_as_name()
	}
	p.SetState(581)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 78, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(577)
				p.Match(PythonParserCOMMA)
			}
			{
				p.SetState(578)
				p.Import_as_name()
			}

		}
		p.SetState(583)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 78, p.GetParserRuleContext())
	}
	p.SetState(585)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PythonParserCOMMA {
		{
			p.SetState(584)
			p.Match(PythonParserCOMMA)
		}

	}

	return localctx
}

// IImport_as_nameContext is an interface to support dynamic dispatch.
type IImport_as_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImport_as_nameContext differentiates from other interfaces.
	IsImport_as_nameContext()
}

type Import_as_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImport_as_nameContext() *Import_as_nameContext {
	var p = new(Import_as_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_import_as_name
	return p
}

func (*Import_as_nameContext) IsImport_as_nameContext() {}

func NewImport_as_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Import_as_nameContext {
	var p = new(Import_as_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_import_as_name

	return p
}

func (s *Import_as_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Import_as_nameContext) AllName() []INameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INameContext); ok {
			len++
		}
	}

	tst := make([]INameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INameContext); ok {
			tst[i] = t.(INameContext)
			i++
		}
	}

	return tst
}

func (s *Import_as_nameContext) Name(i int) INameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Import_as_nameContext) AS() antlr.TerminalNode {
	return s.GetToken(PythonParserAS, 0)
}

func (s *Import_as_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Import_as_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Import_as_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterImport_as_name(s)
	}
}

func (s *Import_as_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitImport_as_name(s)
	}
}

func (p *PythonParser) Import_as_name() (localctx IImport_as_nameContext) {
	this := p
	_ = this

	localctx = NewImport_as_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, PythonParserRULE_import_as_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(587)
		p.Name()
	}
	p.SetState(590)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PythonParserAS {
		{
			p.SetState(588)
			p.Match(PythonParserAS)
		}
		{
			p.SetState(589)
			p.Name()
		}

	}

	return localctx
}

// IDotted_as_namesContext is an interface to support dynamic dispatch.
type IDotted_as_namesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDotted_as_namesContext differentiates from other interfaces.
	IsDotted_as_namesContext()
}

type Dotted_as_namesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDotted_as_namesContext() *Dotted_as_namesContext {
	var p = new(Dotted_as_namesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_dotted_as_names
	return p
}

func (*Dotted_as_namesContext) IsDotted_as_namesContext() {}

func NewDotted_as_namesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dotted_as_namesContext {
	var p = new(Dotted_as_namesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_dotted_as_names

	return p
}

func (s *Dotted_as_namesContext) GetParser() antlr.Parser { return s.parser }

func (s *Dotted_as_namesContext) AllDotted_as_name() []IDotted_as_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDotted_as_nameContext); ok {
			len++
		}
	}

	tst := make([]IDotted_as_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDotted_as_nameContext); ok {
			tst[i] = t.(IDotted_as_nameContext)
			i++
		}
	}

	return tst
}

func (s *Dotted_as_namesContext) Dotted_as_name(i int) IDotted_as_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDotted_as_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDotted_as_nameContext)
}

func (s *Dotted_as_namesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PythonParserCOMMA)
}

func (s *Dotted_as_namesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserCOMMA, i)
}

func (s *Dotted_as_namesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dotted_as_namesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dotted_as_namesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterDotted_as_names(s)
	}
}

func (s *Dotted_as_namesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitDotted_as_names(s)
	}
}

func (p *PythonParser) Dotted_as_names() (localctx IDotted_as_namesContext) {
	this := p
	_ = this

	localctx = NewDotted_as_namesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, PythonParserRULE_dotted_as_names)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(592)
		p.Dotted_as_name()
	}
	p.SetState(597)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PythonParserCOMMA {
		{
			p.SetState(593)
			p.Match(PythonParserCOMMA)
		}
		{
			p.SetState(594)
			p.Dotted_as_name()
		}

		p.SetState(599)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IDotted_as_nameContext is an interface to support dynamic dispatch.
type IDotted_as_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDotted_as_nameContext differentiates from other interfaces.
	IsDotted_as_nameContext()
}

type Dotted_as_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDotted_as_nameContext() *Dotted_as_nameContext {
	var p = new(Dotted_as_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_dotted_as_name
	return p
}

func (*Dotted_as_nameContext) IsDotted_as_nameContext() {}

func NewDotted_as_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dotted_as_nameContext {
	var p = new(Dotted_as_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_dotted_as_name

	return p
}

func (s *Dotted_as_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Dotted_as_nameContext) Dotted_name() IDotted_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDotted_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDotted_nameContext)
}

func (s *Dotted_as_nameContext) AS() antlr.TerminalNode {
	return s.GetToken(PythonParserAS, 0)
}

func (s *Dotted_as_nameContext) Name() INameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Dotted_as_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dotted_as_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dotted_as_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterDotted_as_name(s)
	}
}

func (s *Dotted_as_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitDotted_as_name(s)
	}
}

func (p *PythonParser) Dotted_as_name() (localctx IDotted_as_nameContext) {
	this := p
	_ = this

	localctx = NewDotted_as_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, PythonParserRULE_dotted_as_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(600)
		p.dotted_name(0)
	}
	p.SetState(603)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PythonParserAS {
		{
			p.SetState(601)
			p.Match(PythonParserAS)
		}
		{
			p.SetState(602)
			p.Name()
		}

	}

	return localctx
}

// ITestContext is an interface to support dynamic dispatch.
type ITestContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTestContext differentiates from other interfaces.
	IsTestContext()
}

type TestContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTestContext() *TestContext {
	var p = new(TestContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_test
	return p
}

func (*TestContext) IsTestContext() {}

func NewTestContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TestContext {
	var p = new(TestContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_test

	return p
}

func (s *TestContext) GetParser() antlr.Parser { return s.parser }

func (s *TestContext) AllLogical_test() []ILogical_testContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILogical_testContext); ok {
			len++
		}
	}

	tst := make([]ILogical_testContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILogical_testContext); ok {
			tst[i] = t.(ILogical_testContext)
			i++
		}
	}

	return tst
}

func (s *TestContext) Logical_test(i int) ILogical_testContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILogical_testContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILogical_testContext)
}

func (s *TestContext) IF() antlr.TerminalNode {
	return s.GetToken(PythonParserIF, 0)
}

func (s *TestContext) ELSE() antlr.TerminalNode {
	return s.GetToken(PythonParserELSE, 0)
}

func (s *TestContext) Test() ITestContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestContext)
}

func (s *TestContext) LAMBDA() antlr.TerminalNode {
	return s.GetToken(PythonParserLAMBDA, 0)
}

func (s *TestContext) COLON() antlr.TerminalNode {
	return s.GetToken(PythonParserCOLON, 0)
}

func (s *TestContext) Varargslist() IVarargslistContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVarargslistContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVarargslistContext)
}

func (s *TestContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TestContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TestContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterTest(s)
	}
}

func (s *TestContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitTest(s)
	}
}

func (p *PythonParser) Test() (localctx ITestContext) {
	this := p
	_ = this

	localctx = NewTestContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, PythonParserRULE_test)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(619)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PythonParserNONE, PythonParserNOT, PythonParserAWAIT, PythonParserPRINT, PythonParserEXEC, PythonParserTRUE, PythonParserFALSE, PythonParserELLIPSIS, PythonParserREVERSE_QUOTE, PythonParserADD, PythonParserMINUS, PythonParserNOT_OP, PythonParserSTRING, PythonParserDECIMAL_INTEGER, PythonParserOCT_INTEGER, PythonParserHEX_INTEGER, PythonParserBIN_INTEGER, PythonParserIMAG_NUMBER, PythonParserFLOAT_NUMBER, PythonParserOPEN_PAREN, PythonParserOPEN_BRACE, PythonParserOPEN_BRACKET, PythonParserNAME:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(605)
			p.logical_test(0)
		}
		p.SetState(611)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 83, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(606)
				p.Match(PythonParserIF)
			}
			{
				p.SetState(607)
				p.logical_test(0)
			}
			{
				p.SetState(608)
				p.Match(PythonParserELSE)
			}
			{
				p.SetState(609)
				p.Test()
			}

		}

	case PythonParserLAMBDA:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(613)
			p.Match(PythonParserLAMBDA)
		}
		p.SetState(615)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64((_la-39)) & ^0x3f) == 0 && ((int64(1)<<(_la-39))&144115188075856419) != 0 {
			{
				p.SetState(614)
				p.Varargslist()
			}

		}
		{
			p.SetState(617)
			p.Match(PythonParserCOLON)
		}
		{
			p.SetState(618)
			p.Test()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IVarargslistContext is an interface to support dynamic dispatch.
type IVarargslistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVarargslistContext differentiates from other interfaces.
	IsVarargslistContext()
}

type VarargslistContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVarargslistContext() *VarargslistContext {
	var p = new(VarargslistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_varargslist
	return p
}

func (*VarargslistContext) IsVarargslistContext() {}

func NewVarargslistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VarargslistContext {
	var p = new(VarargslistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_varargslist

	return p
}

func (s *VarargslistContext) GetParser() antlr.Parser { return s.parser }

func (s *VarargslistContext) Varargs() IVarargsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVarargsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVarargsContext)
}

func (s *VarargslistContext) Varkwargs() IVarkwargsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVarkwargsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVarkwargsContext)
}

func (s *VarargslistContext) AllVardef_parameters() []IVardef_parametersContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVardef_parametersContext); ok {
			len++
		}
	}

	tst := make([]IVardef_parametersContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVardef_parametersContext); ok {
			tst[i] = t.(IVardef_parametersContext)
			i++
		}
	}

	return tst
}

func (s *VarargslistContext) Vardef_parameters(i int) IVardef_parametersContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVardef_parametersContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVardef_parametersContext)
}

func (s *VarargslistContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PythonParserCOMMA)
}

func (s *VarargslistContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserCOMMA, i)
}

func (s *VarargslistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarargslistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VarargslistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterVarargslist(s)
	}
}

func (s *VarargslistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitVarargslist(s)
	}
}

func (p *PythonParser) Varargslist() (localctx IVarargslistContext) {
	this := p
	_ = this

	localctx = NewVarargslistContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, PythonParserRULE_varargslist)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(645)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 92, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(624)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 86, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(621)
				p.Vardef_parameters()
			}
			{
				p.SetState(622)
				p.Match(PythonParserCOMMA)
			}

		}
		p.SetState(636)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PythonParserSTAR:
			{
				p.SetState(626)
				p.Varargs()
			}
			p.SetState(629)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 87, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(627)
					p.Match(PythonParserCOMMA)
				}
				{
					p.SetState(628)
					p.Vardef_parameters()
				}

			}
			p.SetState(633)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 88, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(631)
					p.Match(PythonParserCOMMA)
				}
				{
					p.SetState(632)
					p.Varkwargs()
				}

			}

		case PythonParserPOWER:
			{
				p.SetState(635)
				p.Varkwargs()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(639)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PythonParserCOMMA {
			{
				p.SetState(638)
				p.Match(PythonParserCOMMA)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(641)
			p.Vardef_parameters()
		}
		p.SetState(643)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PythonParserCOMMA {
			{
				p.SetState(642)
				p.Match(PythonParserCOMMA)
			}

		}

	}

	return localctx
}

// IVardef_parametersContext is an interface to support dynamic dispatch.
type IVardef_parametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVardef_parametersContext differentiates from other interfaces.
	IsVardef_parametersContext()
}

type Vardef_parametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVardef_parametersContext() *Vardef_parametersContext {
	var p = new(Vardef_parametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_vardef_parameters
	return p
}

func (*Vardef_parametersContext) IsVardef_parametersContext() {}

func NewVardef_parametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Vardef_parametersContext {
	var p = new(Vardef_parametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_vardef_parameters

	return p
}

func (s *Vardef_parametersContext) GetParser() antlr.Parser { return s.parser }

func (s *Vardef_parametersContext) AllVardef_parameter() []IVardef_parameterContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVardef_parameterContext); ok {
			len++
		}
	}

	tst := make([]IVardef_parameterContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVardef_parameterContext); ok {
			tst[i] = t.(IVardef_parameterContext)
			i++
		}
	}

	return tst
}

func (s *Vardef_parametersContext) Vardef_parameter(i int) IVardef_parameterContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVardef_parameterContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVardef_parameterContext)
}

func (s *Vardef_parametersContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PythonParserCOMMA)
}

func (s *Vardef_parametersContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserCOMMA, i)
}

func (s *Vardef_parametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Vardef_parametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Vardef_parametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterVardef_parameters(s)
	}
}

func (s *Vardef_parametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitVardef_parameters(s)
	}
}

func (p *PythonParser) Vardef_parameters() (localctx IVardef_parametersContext) {
	this := p
	_ = this

	localctx = NewVardef_parametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, PythonParserRULE_vardef_parameters)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(647)
		p.Vardef_parameter()
	}
	p.SetState(652)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(648)
				p.Match(PythonParserCOMMA)
			}
			{
				p.SetState(649)
				p.Vardef_parameter()
			}

		}
		p.SetState(654)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext())
	}

	return localctx
}

// IVardef_parameterContext is an interface to support dynamic dispatch.
type IVardef_parameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVardef_parameterContext differentiates from other interfaces.
	IsVardef_parameterContext()
}

type Vardef_parameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVardef_parameterContext() *Vardef_parameterContext {
	var p = new(Vardef_parameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_vardef_parameter
	return p
}

func (*Vardef_parameterContext) IsVardef_parameterContext() {}

func NewVardef_parameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Vardef_parameterContext {
	var p = new(Vardef_parameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_vardef_parameter

	return p
}

func (s *Vardef_parameterContext) GetParser() antlr.Parser { return s.parser }

func (s *Vardef_parameterContext) Name() INameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Vardef_parameterContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(PythonParserASSIGN, 0)
}

func (s *Vardef_parameterContext) Test() ITestContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestContext)
}

func (s *Vardef_parameterContext) STAR() antlr.TerminalNode {
	return s.GetToken(PythonParserSTAR, 0)
}

func (s *Vardef_parameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Vardef_parameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Vardef_parameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterVardef_parameter(s)
	}
}

func (s *Vardef_parameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitVardef_parameter(s)
	}
}

func (p *PythonParser) Vardef_parameter() (localctx IVardef_parameterContext) {
	this := p
	_ = this

	localctx = NewVardef_parameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, PythonParserRULE_vardef_parameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(661)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PythonParserTRUE, PythonParserFALSE, PythonParserNAME:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(655)
			p.Name()
		}
		p.SetState(658)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PythonParserASSIGN {
			{
				p.SetState(656)
				p.Match(PythonParserASSIGN)
			}
			{
				p.SetState(657)
				p.Test()
			}

		}

	case PythonParserSTAR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(660)
			p.Match(PythonParserSTAR)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IVarargsContext is an interface to support dynamic dispatch.
type IVarargsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVarargsContext differentiates from other interfaces.
	IsVarargsContext()
}

type VarargsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVarargsContext() *VarargsContext {
	var p = new(VarargsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_varargs
	return p
}

func (*VarargsContext) IsVarargsContext() {}

func NewVarargsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VarargsContext {
	var p = new(VarargsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_varargs

	return p
}

func (s *VarargsContext) GetParser() antlr.Parser { return s.parser }

func (s *VarargsContext) STAR() antlr.TerminalNode {
	return s.GetToken(PythonParserSTAR, 0)
}

func (s *VarargsContext) Name() INameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *VarargsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarargsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VarargsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterVarargs(s)
	}
}

func (s *VarargsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitVarargs(s)
	}
}

func (p *PythonParser) Varargs() (localctx IVarargsContext) {
	this := p
	_ = this

	localctx = NewVarargsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, PythonParserRULE_varargs)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(663)
		p.Match(PythonParserSTAR)
	}
	{
		p.SetState(664)
		p.Name()
	}

	return localctx
}

// IVarkwargsContext is an interface to support dynamic dispatch.
type IVarkwargsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVarkwargsContext differentiates from other interfaces.
	IsVarkwargsContext()
}

type VarkwargsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVarkwargsContext() *VarkwargsContext {
	var p = new(VarkwargsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_varkwargs
	return p
}

func (*VarkwargsContext) IsVarkwargsContext() {}

func NewVarkwargsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VarkwargsContext {
	var p = new(VarkwargsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_varkwargs

	return p
}

func (s *VarkwargsContext) GetParser() antlr.Parser { return s.parser }

func (s *VarkwargsContext) POWER() antlr.TerminalNode {
	return s.GetToken(PythonParserPOWER, 0)
}

func (s *VarkwargsContext) Name() INameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *VarkwargsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarkwargsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VarkwargsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterVarkwargs(s)
	}
}

func (s *VarkwargsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitVarkwargs(s)
	}
}

func (p *PythonParser) Varkwargs() (localctx IVarkwargsContext) {
	this := p
	_ = this

	localctx = NewVarkwargsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, PythonParserRULE_varkwargs)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(666)
		p.Match(PythonParserPOWER)
	}
	{
		p.SetState(667)
		p.Name()
	}

	return localctx
}

// ILogical_testContext is an interface to support dynamic dispatch.
type ILogical_testContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsLogical_testContext differentiates from other interfaces.
	IsLogical_testContext()
}

type Logical_testContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyLogical_testContext() *Logical_testContext {
	var p = new(Logical_testContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_logical_test
	return p
}

func (*Logical_testContext) IsLogical_testContext() {}

func NewLogical_testContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Logical_testContext {
	var p = new(Logical_testContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_logical_test

	return p
}

func (s *Logical_testContext) GetParser() antlr.Parser { return s.parser }

func (s *Logical_testContext) GetOp() antlr.Token { return s.op }

func (s *Logical_testContext) SetOp(v antlr.Token) { s.op = v }

func (s *Logical_testContext) Comparison() IComparisonContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComparisonContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComparisonContext)
}

func (s *Logical_testContext) NOT() antlr.TerminalNode {
	return s.GetToken(PythonParserNOT, 0)
}

func (s *Logical_testContext) AllLogical_test() []ILogical_testContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILogical_testContext); ok {
			len++
		}
	}

	tst := make([]ILogical_testContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILogical_testContext); ok {
			tst[i] = t.(ILogical_testContext)
			i++
		}
	}

	return tst
}

func (s *Logical_testContext) Logical_test(i int) ILogical_testContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILogical_testContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILogical_testContext)
}

func (s *Logical_testContext) AND() antlr.TerminalNode {
	return s.GetToken(PythonParserAND, 0)
}

func (s *Logical_testContext) OR() antlr.TerminalNode {
	return s.GetToken(PythonParserOR, 0)
}

func (s *Logical_testContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Logical_testContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Logical_testContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterLogical_test(s)
	}
}

func (s *Logical_testContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitLogical_test(s)
	}
}

func (p *PythonParser) Logical_test() (localctx ILogical_testContext) {
	return p.logical_test(0)
}

func (p *PythonParser) logical_test(_p int) (localctx ILogical_testContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewLogical_testContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILogical_testContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 78
	p.EnterRecursionRule(localctx, 78, PythonParserRULE_logical_test, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(673)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PythonParserNONE, PythonParserAWAIT, PythonParserPRINT, PythonParserEXEC, PythonParserTRUE, PythonParserFALSE, PythonParserELLIPSIS, PythonParserREVERSE_QUOTE, PythonParserADD, PythonParserMINUS, PythonParserNOT_OP, PythonParserSTRING, PythonParserDECIMAL_INTEGER, PythonParserOCT_INTEGER, PythonParserHEX_INTEGER, PythonParserBIN_INTEGER, PythonParserIMAG_NUMBER, PythonParserFLOAT_NUMBER, PythonParserOPEN_PAREN, PythonParserOPEN_BRACE, PythonParserOPEN_BRACKET, PythonParserNAME:
		{
			p.SetState(670)
			p.comparison(0)
		}

	case PythonParserNOT:
		{
			p.SetState(671)
			p.Match(PythonParserNOT)
		}
		{
			p.SetState(672)
			p.logical_test(3)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(683)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 98, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(681)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 97, p.GetParserRuleContext()) {
			case 1:
				localctx = NewLogical_testContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PythonParserRULE_logical_test)
				p.SetState(675)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(676)

					var _m = p.Match(PythonParserAND)

					localctx.(*Logical_testContext).op = _m
				}
				{
					p.SetState(677)
					p.logical_test(3)
				}

			case 2:
				localctx = NewLogical_testContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PythonParserRULE_logical_test)
				p.SetState(678)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(679)

					var _m = p.Match(PythonParserOR)

					localctx.(*Logical_testContext).op = _m
				}
				{
					p.SetState(680)
					p.logical_test(2)
				}

			}

		}
		p.SetState(685)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 98, p.GetParserRuleContext())
	}

	return localctx
}

// IComparisonContext is an interface to support dynamic dispatch.
type IComparisonContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOptional returns the optional token.
	GetOptional() antlr.Token

	// SetOptional sets the optional token.
	SetOptional(antlr.Token)

	// IsComparisonContext differentiates from other interfaces.
	IsComparisonContext()
}

type ComparisonContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	optional antlr.Token
}

func NewEmptyComparisonContext() *ComparisonContext {
	var p = new(ComparisonContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_comparison
	return p
}

func (*ComparisonContext) IsComparisonContext() {}

func NewComparisonContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ComparisonContext {
	var p = new(ComparisonContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_comparison

	return p
}

func (s *ComparisonContext) GetParser() antlr.Parser { return s.parser }

func (s *ComparisonContext) GetOptional() antlr.Token { return s.optional }

func (s *ComparisonContext) SetOptional(v antlr.Token) { s.optional = v }

func (s *ComparisonContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ComparisonContext) AllComparison() []IComparisonContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IComparisonContext); ok {
			len++
		}
	}

	tst := make([]IComparisonContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IComparisonContext); ok {
			tst[i] = t.(IComparisonContext)
			i++
		}
	}

	return tst
}

func (s *ComparisonContext) Comparison(i int) IComparisonContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComparisonContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComparisonContext)
}

func (s *ComparisonContext) LESS_THAN() antlr.TerminalNode {
	return s.GetToken(PythonParserLESS_THAN, 0)
}

func (s *ComparisonContext) GREATER_THAN() antlr.TerminalNode {
	return s.GetToken(PythonParserGREATER_THAN, 0)
}

func (s *ComparisonContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(PythonParserEQUALS, 0)
}

func (s *ComparisonContext) GT_EQ() antlr.TerminalNode {
	return s.GetToken(PythonParserGT_EQ, 0)
}

func (s *ComparisonContext) LT_EQ() antlr.TerminalNode {
	return s.GetToken(PythonParserLT_EQ, 0)
}

func (s *ComparisonContext) NOT_EQ_1() antlr.TerminalNode {
	return s.GetToken(PythonParserNOT_EQ_1, 0)
}

func (s *ComparisonContext) NOT_EQ_2() antlr.TerminalNode {
	return s.GetToken(PythonParserNOT_EQ_2, 0)
}

func (s *ComparisonContext) IN() antlr.TerminalNode {
	return s.GetToken(PythonParserIN, 0)
}

func (s *ComparisonContext) IS() antlr.TerminalNode {
	return s.GetToken(PythonParserIS, 0)
}

func (s *ComparisonContext) NOT() antlr.TerminalNode {
	return s.GetToken(PythonParserNOT, 0)
}

func (s *ComparisonContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComparisonContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ComparisonContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterComparison(s)
	}
}

func (s *ComparisonContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitComparison(s)
	}
}

func (p *PythonParser) Comparison() (localctx IComparisonContext) {
	return p.comparison(0)
}

func (p *PythonParser) comparison(_p int) (localctx IComparisonContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewComparisonContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IComparisonContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 80
	p.EnterRecursionRule(localctx, 80, PythonParserRULE_comparison, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(687)
		p.expr(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(710)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewComparisonContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, PythonParserRULE_comparison)
			p.SetState(689)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			p.SetState(705)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case PythonParserLESS_THAN:
				{
					p.SetState(690)
					p.Match(PythonParserLESS_THAN)
				}

			case PythonParserGREATER_THAN:
				{
					p.SetState(691)
					p.Match(PythonParserGREATER_THAN)
				}

			case PythonParserEQUALS:
				{
					p.SetState(692)
					p.Match(PythonParserEQUALS)
				}

			case PythonParserGT_EQ:
				{
					p.SetState(693)
					p.Match(PythonParserGT_EQ)
				}

			case PythonParserLT_EQ:
				{
					p.SetState(694)
					p.Match(PythonParserLT_EQ)
				}

			case PythonParserNOT_EQ_1:
				{
					p.SetState(695)
					p.Match(PythonParserNOT_EQ_1)
				}

			case PythonParserNOT_EQ_2:
				{
					p.SetState(696)
					p.Match(PythonParserNOT_EQ_2)
				}

			case PythonParserIN, PythonParserNOT:
				p.SetState(698)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == PythonParserNOT {
					{
						p.SetState(697)

						var _m = p.Match(PythonParserNOT)

						localctx.(*ComparisonContext).optional = _m
					}

				}
				{
					p.SetState(700)
					p.Match(PythonParserIN)
				}

			case PythonParserIS:
				{
					p.SetState(701)
					p.Match(PythonParserIS)
				}
				p.SetState(703)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == PythonParserNOT {
					{
						p.SetState(702)

						var _m = p.Match(PythonParserNOT)

						localctx.(*ComparisonContext).optional = _m
					}

				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			{
				p.SetState(707)
				p.comparison(3)
			}

		}
		p.SetState(712)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext())
	}

	return localctx
}

// IExprContext is an interface to support dynamic dispatch.
type IExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsExprContext differentiates from other interfaces.
	IsExprContext()
}

type ExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyExprContext() *ExprContext {
	var p = new(ExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_expr
	return p
}

func (*ExprContext) IsExprContext() {}

func NewExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprContext {
	var p = new(ExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_expr

	return p
}

func (s *ExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprContext) GetOp() antlr.Token { return s.op }

func (s *ExprContext) SetOp(v antlr.Token) { s.op = v }

func (s *ExprContext) Atom() IAtomContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAtomContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAtomContext)
}

func (s *ExprContext) AWAIT() antlr.TerminalNode {
	return s.GetToken(PythonParserAWAIT, 0)
}

func (s *ExprContext) AllTrailer() []ITrailerContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITrailerContext); ok {
			len++
		}
	}

	tst := make([]ITrailerContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITrailerContext); ok {
			tst[i] = t.(ITrailerContext)
			i++
		}
	}

	return tst
}

func (s *ExprContext) Trailer(i int) ITrailerContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrailerContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrailerContext)
}

func (s *ExprContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ExprContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprContext) ADD() antlr.TerminalNode {
	return s.GetToken(PythonParserADD, 0)
}

func (s *ExprContext) MINUS() antlr.TerminalNode {
	return s.GetToken(PythonParserMINUS, 0)
}

func (s *ExprContext) NOT_OP() antlr.TerminalNode {
	return s.GetToken(PythonParserNOT_OP, 0)
}

func (s *ExprContext) POWER() antlr.TerminalNode {
	return s.GetToken(PythonParserPOWER, 0)
}

func (s *ExprContext) STAR() antlr.TerminalNode {
	return s.GetToken(PythonParserSTAR, 0)
}

func (s *ExprContext) DIV() antlr.TerminalNode {
	return s.GetToken(PythonParserDIV, 0)
}

func (s *ExprContext) MOD() antlr.TerminalNode {
	return s.GetToken(PythonParserMOD, 0)
}

func (s *ExprContext) IDIV() antlr.TerminalNode {
	return s.GetToken(PythonParserIDIV, 0)
}

func (s *ExprContext) AT() antlr.TerminalNode {
	return s.GetToken(PythonParserAT, 0)
}

func (s *ExprContext) LEFT_SHIFT() antlr.TerminalNode {
	return s.GetToken(PythonParserLEFT_SHIFT, 0)
}

func (s *ExprContext) RIGHT_SHIFT() antlr.TerminalNode {
	return s.GetToken(PythonParserRIGHT_SHIFT, 0)
}

func (s *ExprContext) AND_OP() antlr.TerminalNode {
	return s.GetToken(PythonParserAND_OP, 0)
}

func (s *ExprContext) XOR() antlr.TerminalNode {
	return s.GetToken(PythonParserXOR, 0)
}

func (s *ExprContext) OR_OP() antlr.TerminalNode {
	return s.GetToken(PythonParserOR_OP, 0)
}

func (s *ExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterExpr(s)
	}
}

func (s *ExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitExpr(s)
	}
}

func (p *PythonParser) Expr() (localctx IExprContext) {
	return p.expr(0)
}

func (p *PythonParser) expr(_p int) (localctx IExprContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 82
	p.EnterRecursionRule(localctx, 82, PythonParserRULE_expr, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(726)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 105, p.GetParserRuleContext()) {
	case 1:
		p.SetState(715)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PythonParserAWAIT {
			{
				p.SetState(714)
				p.Match(PythonParserAWAIT)
			}

		}
		{
			p.SetState(717)
			p.Atom()
		}
		p.SetState(721)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 104, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(718)
					p.Trailer()
				}

			}
			p.SetState(723)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 104, p.GetParserRuleContext())
		}

	case 2:
		{
			p.SetState(724)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ExprContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1261007895663738880) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ExprContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(725)
			p.expr(7)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(751)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 107, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(749)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PythonParserRULE_expr)
				p.SetState(728)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(729)

					var _m = p.Match(PythonParserPOWER)

					localctx.(*ExprContext).op = _m
				}
				{
					p.SetState(730)
					p.expr(8)
				}

			case 2:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PythonParserRULE_expr)
				p.SetState(731)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(732)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExprContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !((int64((_la-44)) & ^0x3f) == 0 && ((int64(1)<<(_la-44))&16834561) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExprContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(733)
					p.expr(7)
				}

			case 3:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PythonParserRULE_expr)
				p.SetState(734)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(735)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExprContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == PythonParserADD || _la == PythonParserMINUS) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExprContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(736)
					p.expr(6)
				}

			case 4:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PythonParserRULE_expr)
				p.SetState(737)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(738)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExprContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == PythonParserLEFT_SHIFT || _la == PythonParserRIGHT_SHIFT) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExprContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(739)
					p.expr(5)
				}

			case 5:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PythonParserRULE_expr)
				p.SetState(740)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(741)

					var _m = p.Match(PythonParserAND_OP)

					localctx.(*ExprContext).op = _m
				}
				{
					p.SetState(742)
					p.expr(4)
				}

			case 6:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PythonParserRULE_expr)
				p.SetState(743)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(744)

					var _m = p.Match(PythonParserXOR)

					localctx.(*ExprContext).op = _m
				}
				{
					p.SetState(745)
					p.expr(3)
				}

			case 7:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PythonParserRULE_expr)
				p.SetState(746)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(747)

					var _m = p.Match(PythonParserOR_OP)

					localctx.(*ExprContext).op = _m
				}
				{
					p.SetState(748)
					p.expr(2)
				}

			}

		}
		p.SetState(753)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 107, p.GetParserRuleContext())
	}

	return localctx
}

// IAtomContext is an interface to support dynamic dispatch.
type IAtomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAtomContext differentiates from other interfaces.
	IsAtomContext()
}

type AtomContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAtomContext() *AtomContext {
	var p = new(AtomContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_atom
	return p
}

func (*AtomContext) IsAtomContext() {}

func NewAtomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AtomContext {
	var p = new(AtomContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_atom

	return p
}

func (s *AtomContext) GetParser() antlr.Parser { return s.parser }

func (s *AtomContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PythonParserOPEN_PAREN, 0)
}

func (s *AtomContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PythonParserCLOSE_PAREN, 0)
}

func (s *AtomContext) Yield_expr() IYield_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IYield_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IYield_exprContext)
}

func (s *AtomContext) Testlist_comp() ITestlist_compContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestlist_compContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestlist_compContext)
}

func (s *AtomContext) OPEN_BRACKET() antlr.TerminalNode {
	return s.GetToken(PythonParserOPEN_BRACKET, 0)
}

func (s *AtomContext) CLOSE_BRACKET() antlr.TerminalNode {
	return s.GetToken(PythonParserCLOSE_BRACKET, 0)
}

func (s *AtomContext) OPEN_BRACE() antlr.TerminalNode {
	return s.GetToken(PythonParserOPEN_BRACE, 0)
}

func (s *AtomContext) CLOSE_BRACE() antlr.TerminalNode {
	return s.GetToken(PythonParserCLOSE_BRACE, 0)
}

func (s *AtomContext) Dictorsetmaker() IDictorsetmakerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDictorsetmakerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDictorsetmakerContext)
}

func (s *AtomContext) AllREVERSE_QUOTE() []antlr.TerminalNode {
	return s.GetTokens(PythonParserREVERSE_QUOTE)
}

func (s *AtomContext) REVERSE_QUOTE(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserREVERSE_QUOTE, i)
}

func (s *AtomContext) Testlist() ITestlistContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestlistContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestlistContext)
}

func (s *AtomContext) COMMA() antlr.TerminalNode {
	return s.GetToken(PythonParserCOMMA, 0)
}

func (s *AtomContext) ELLIPSIS() antlr.TerminalNode {
	return s.GetToken(PythonParserELLIPSIS, 0)
}

func (s *AtomContext) Name() INameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *AtomContext) PRINT() antlr.TerminalNode {
	return s.GetToken(PythonParserPRINT, 0)
}

func (s *AtomContext) EXEC() antlr.TerminalNode {
	return s.GetToken(PythonParserEXEC, 0)
}

func (s *AtomContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *AtomContext) MINUS() antlr.TerminalNode {
	return s.GetToken(PythonParserMINUS, 0)
}

func (s *AtomContext) NONE() antlr.TerminalNode {
	return s.GetToken(PythonParserNONE, 0)
}

func (s *AtomContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(PythonParserSTRING)
}

func (s *AtomContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserSTRING, i)
}

func (s *AtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AtomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterAtom(s)
	}
}

func (s *AtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitAtom(s)
	}
}

func (p *PythonParser) Atom() (localctx IAtomContext) {
	this := p
	_ = this

	localctx = NewAtomContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, PythonParserRULE_atom)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(791)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PythonParserOPEN_PAREN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(754)
			p.Match(PythonParserOPEN_PAREN)
		}
		p.SetState(757)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PythonParserYIELD:
			{
				p.SetState(755)
				p.Yield_expr()
			}

		case PythonParserNONE, PythonParserLAMBDA, PythonParserNOT, PythonParserAWAIT, PythonParserPRINT, PythonParserEXEC, PythonParserTRUE, PythonParserFALSE, PythonParserELLIPSIS, PythonParserREVERSE_QUOTE, PythonParserSTAR, PythonParserADD, PythonParserMINUS, PythonParserNOT_OP, PythonParserSTRING, PythonParserDECIMAL_INTEGER, PythonParserOCT_INTEGER, PythonParserHEX_INTEGER, PythonParserBIN_INTEGER, PythonParserIMAG_NUMBER, PythonParserFLOAT_NUMBER, PythonParserOPEN_PAREN, PythonParserOPEN_BRACE, PythonParserOPEN_BRACKET, PythonParserNAME:
			{
				p.SetState(756)
				p.Testlist_comp()
			}

		case PythonParserCLOSE_PAREN:

		default:
		}
		{
			p.SetState(759)
			p.Match(PythonParserCLOSE_PAREN)
		}

	case PythonParserOPEN_BRACKET:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(760)
			p.Match(PythonParserOPEN_BRACKET)
		}
		p.SetState(762)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1261040812445138944) != 0 || (int64((_la-83)) & ^0x3f) == 0 && ((int64(1)<<(_la-83))&11007) != 0 {
			{
				p.SetState(761)
				p.Testlist_comp()
			}

		}
		{
			p.SetState(764)
			p.Match(PythonParserCLOSE_BRACKET)
		}

	case PythonParserOPEN_BRACE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(765)
			p.Match(PythonParserOPEN_BRACE)
		}
		p.SetState(767)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1261322287421849600) != 0 || (int64((_la-83)) & ^0x3f) == 0 && ((int64(1)<<(_la-83))&11007) != 0 {
			{
				p.SetState(766)
				p.Dictorsetmaker()
			}

		}
		{
			p.SetState(769)
			p.Match(PythonParserCLOSE_BRACE)
		}

	case PythonParserREVERSE_QUOTE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(770)
			p.Match(PythonParserREVERSE_QUOTE)
		}
		{
			p.SetState(771)
			p.Testlist()
		}
		p.SetState(773)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PythonParserCOMMA {
			{
				p.SetState(772)
				p.Match(PythonParserCOMMA)
			}

		}
		{
			p.SetState(775)
			p.Match(PythonParserREVERSE_QUOTE)
		}

	case PythonParserELLIPSIS:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(777)
			p.Match(PythonParserELLIPSIS)
		}

	case PythonParserTRUE, PythonParserFALSE, PythonParserNAME:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(778)
			p.Name()
		}

	case PythonParserPRINT:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(779)
			p.Match(PythonParserPRINT)
		}

	case PythonParserEXEC:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(780)
			p.Match(PythonParserEXEC)
		}

	case PythonParserMINUS, PythonParserDECIMAL_INTEGER, PythonParserOCT_INTEGER, PythonParserHEX_INTEGER, PythonParserBIN_INTEGER, PythonParserIMAG_NUMBER, PythonParserFLOAT_NUMBER:
		p.EnterOuterAlt(localctx, 9)
		p.SetState(782)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PythonParserMINUS {
			{
				p.SetState(781)
				p.Match(PythonParserMINUS)
			}

		}
		{
			p.SetState(784)
			p.Number()
		}

	case PythonParserNONE:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(785)
			p.Match(PythonParserNONE)
		}

	case PythonParserSTRING:
		p.EnterOuterAlt(localctx, 11)
		p.SetState(787)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(786)
					p.Match(PythonParserSTRING)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(789)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 113, p.GetParserRuleContext())
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDictorsetmakerContext is an interface to support dynamic dispatch.
type IDictorsetmakerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDictorsetmakerContext differentiates from other interfaces.
	IsDictorsetmakerContext()
}

type DictorsetmakerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDictorsetmakerContext() *DictorsetmakerContext {
	var p = new(DictorsetmakerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_dictorsetmaker
	return p
}

func (*DictorsetmakerContext) IsDictorsetmakerContext() {}

func NewDictorsetmakerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DictorsetmakerContext {
	var p = new(DictorsetmakerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_dictorsetmaker

	return p
}

func (s *DictorsetmakerContext) GetParser() antlr.Parser { return s.parser }

func (s *DictorsetmakerContext) AllTest() []ITestContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITestContext); ok {
			len++
		}
	}

	tst := make([]ITestContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITestContext); ok {
			tst[i] = t.(ITestContext)
			i++
		}
	}

	return tst
}

func (s *DictorsetmakerContext) Test(i int) ITestContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestContext)
}

func (s *DictorsetmakerContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(PythonParserCOLON)
}

func (s *DictorsetmakerContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserCOLON, i)
}

func (s *DictorsetmakerContext) AllPOWER() []antlr.TerminalNode {
	return s.GetTokens(PythonParserPOWER)
}

func (s *DictorsetmakerContext) POWER(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserPOWER, i)
}

func (s *DictorsetmakerContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *DictorsetmakerContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *DictorsetmakerContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PythonParserCOMMA)
}

func (s *DictorsetmakerContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserCOMMA, i)
}

func (s *DictorsetmakerContext) Comp_for() IComp_forContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComp_forContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComp_forContext)
}

func (s *DictorsetmakerContext) Testlist_comp() ITestlist_compContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestlist_compContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestlist_compContext)
}

func (s *DictorsetmakerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DictorsetmakerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DictorsetmakerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterDictorsetmaker(s)
	}
}

func (s *DictorsetmakerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitDictorsetmaker(s)
	}
}

func (p *PythonParser) Dictorsetmaker() (localctx IDictorsetmakerContext) {
	this := p
	_ = this

	localctx = NewDictorsetmakerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, PythonParserRULE_dictorsetmaker)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(824)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 119, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(799)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PythonParserNONE, PythonParserLAMBDA, PythonParserNOT, PythonParserAWAIT, PythonParserPRINT, PythonParserEXEC, PythonParserTRUE, PythonParserFALSE, PythonParserELLIPSIS, PythonParserREVERSE_QUOTE, PythonParserADD, PythonParserMINUS, PythonParserNOT_OP, PythonParserSTRING, PythonParserDECIMAL_INTEGER, PythonParserOCT_INTEGER, PythonParserHEX_INTEGER, PythonParserBIN_INTEGER, PythonParserIMAG_NUMBER, PythonParserFLOAT_NUMBER, PythonParserOPEN_PAREN, PythonParserOPEN_BRACE, PythonParserOPEN_BRACKET, PythonParserNAME:
			{
				p.SetState(793)
				p.Test()
			}
			{
				p.SetState(794)
				p.Match(PythonParserCOLON)
			}
			{
				p.SetState(795)
				p.Test()
			}

		case PythonParserPOWER:
			{
				p.SetState(797)
				p.Match(PythonParserPOWER)
			}
			{
				p.SetState(798)
				p.expr(0)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(812)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 117, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(801)
					p.Match(PythonParserCOMMA)
				}
				p.SetState(808)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case PythonParserNONE, PythonParserLAMBDA, PythonParserNOT, PythonParserAWAIT, PythonParserPRINT, PythonParserEXEC, PythonParserTRUE, PythonParserFALSE, PythonParserELLIPSIS, PythonParserREVERSE_QUOTE, PythonParserADD, PythonParserMINUS, PythonParserNOT_OP, PythonParserSTRING, PythonParserDECIMAL_INTEGER, PythonParserOCT_INTEGER, PythonParserHEX_INTEGER, PythonParserBIN_INTEGER, PythonParserIMAG_NUMBER, PythonParserFLOAT_NUMBER, PythonParserOPEN_PAREN, PythonParserOPEN_BRACE, PythonParserOPEN_BRACKET, PythonParserNAME:
					{
						p.SetState(802)
						p.Test()
					}
					{
						p.SetState(803)
						p.Match(PythonParserCOLON)
					}
					{
						p.SetState(804)
						p.Test()
					}

				case PythonParserPOWER:
					{
						p.SetState(806)
						p.Match(PythonParserPOWER)
					}
					{
						p.SetState(807)
						p.expr(0)
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

			}
			p.SetState(814)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 117, p.GetParserRuleContext())
		}
		p.SetState(816)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PythonParserCOMMA {
			{
				p.SetState(815)
				p.Match(PythonParserCOMMA)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(818)
			p.Test()
		}
		{
			p.SetState(819)
			p.Match(PythonParserCOLON)
		}
		{
			p.SetState(820)
			p.Test()
		}
		{
			p.SetState(821)
			p.Comp_for()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(823)
			p.Testlist_comp()
		}

	}

	return localctx
}

// ITestlist_compContext is an interface to support dynamic dispatch.
type ITestlist_compContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTestlist_compContext differentiates from other interfaces.
	IsTestlist_compContext()
}

type Testlist_compContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTestlist_compContext() *Testlist_compContext {
	var p = new(Testlist_compContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_testlist_comp
	return p
}

func (*Testlist_compContext) IsTestlist_compContext() {}

func NewTestlist_compContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Testlist_compContext {
	var p = new(Testlist_compContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_testlist_comp

	return p
}

func (s *Testlist_compContext) GetParser() antlr.Parser { return s.parser }

func (s *Testlist_compContext) AllTest() []ITestContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITestContext); ok {
			len++
		}
	}

	tst := make([]ITestContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITestContext); ok {
			tst[i] = t.(ITestContext)
			i++
		}
	}

	return tst
}

func (s *Testlist_compContext) Test(i int) ITestContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestContext)
}

func (s *Testlist_compContext) AllStar_expr() []IStar_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStar_exprContext); ok {
			len++
		}
	}

	tst := make([]IStar_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStar_exprContext); ok {
			tst[i] = t.(IStar_exprContext)
			i++
		}
	}

	return tst
}

func (s *Testlist_compContext) Star_expr(i int) IStar_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStar_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStar_exprContext)
}

func (s *Testlist_compContext) Comp_for() IComp_forContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComp_forContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComp_forContext)
}

func (s *Testlist_compContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PythonParserCOMMA)
}

func (s *Testlist_compContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserCOMMA, i)
}

func (s *Testlist_compContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Testlist_compContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Testlist_compContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterTestlist_comp(s)
	}
}

func (s *Testlist_compContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitTestlist_comp(s)
	}
}

func (p *PythonParser) Testlist_comp() (localctx ITestlist_compContext) {
	this := p
	_ = this

	localctx = NewTestlist_compContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, PythonParserRULE_testlist_comp)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(828)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PythonParserNONE, PythonParserLAMBDA, PythonParserNOT, PythonParserAWAIT, PythonParserPRINT, PythonParserEXEC, PythonParserTRUE, PythonParserFALSE, PythonParserELLIPSIS, PythonParserREVERSE_QUOTE, PythonParserADD, PythonParserMINUS, PythonParserNOT_OP, PythonParserSTRING, PythonParserDECIMAL_INTEGER, PythonParserOCT_INTEGER, PythonParserHEX_INTEGER, PythonParserBIN_INTEGER, PythonParserIMAG_NUMBER, PythonParserFLOAT_NUMBER, PythonParserOPEN_PAREN, PythonParserOPEN_BRACE, PythonParserOPEN_BRACKET, PythonParserNAME:
		{
			p.SetState(826)
			p.Test()
		}

	case PythonParserSTAR:
		{
			p.SetState(827)
			p.Star_expr()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(844)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PythonParserFOR:
		{
			p.SetState(830)
			p.Comp_for()
		}

	case PythonParserCOMMA, PythonParserCLOSE_PAREN, PythonParserCLOSE_BRACE, PythonParserCLOSE_BRACKET:
		p.SetState(838)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 122, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(831)
					p.Match(PythonParserCOMMA)
				}
				p.SetState(834)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case PythonParserNONE, PythonParserLAMBDA, PythonParserNOT, PythonParserAWAIT, PythonParserPRINT, PythonParserEXEC, PythonParserTRUE, PythonParserFALSE, PythonParserELLIPSIS, PythonParserREVERSE_QUOTE, PythonParserADD, PythonParserMINUS, PythonParserNOT_OP, PythonParserSTRING, PythonParserDECIMAL_INTEGER, PythonParserOCT_INTEGER, PythonParserHEX_INTEGER, PythonParserBIN_INTEGER, PythonParserIMAG_NUMBER, PythonParserFLOAT_NUMBER, PythonParserOPEN_PAREN, PythonParserOPEN_BRACE, PythonParserOPEN_BRACKET, PythonParserNAME:
					{
						p.SetState(832)
						p.Test()
					}

				case PythonParserSTAR:
					{
						p.SetState(833)
						p.Star_expr()
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

			}
			p.SetState(840)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 122, p.GetParserRuleContext())
		}
		p.SetState(842)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PythonParserCOMMA {
			{
				p.SetState(841)
				p.Match(PythonParserCOMMA)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITestlistContext is an interface to support dynamic dispatch.
type ITestlistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTestlistContext differentiates from other interfaces.
	IsTestlistContext()
}

type TestlistContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTestlistContext() *TestlistContext {
	var p = new(TestlistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_testlist
	return p
}

func (*TestlistContext) IsTestlistContext() {}

func NewTestlistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TestlistContext {
	var p = new(TestlistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_testlist

	return p
}

func (s *TestlistContext) GetParser() antlr.Parser { return s.parser }

func (s *TestlistContext) AllTest() []ITestContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITestContext); ok {
			len++
		}
	}

	tst := make([]ITestContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITestContext); ok {
			tst[i] = t.(ITestContext)
			i++
		}
	}

	return tst
}

func (s *TestlistContext) Test(i int) ITestContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestContext)
}

func (s *TestlistContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PythonParserCOMMA)
}

func (s *TestlistContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserCOMMA, i)
}

func (s *TestlistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TestlistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TestlistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterTestlist(s)
	}
}

func (s *TestlistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitTestlist(s)
	}
}

func (p *PythonParser) Testlist() (localctx ITestlistContext) {
	this := p
	_ = this

	localctx = NewTestlistContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, PythonParserRULE_testlist)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(846)
		p.Test()
	}
	p.SetState(851)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 125, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(847)
				p.Match(PythonParserCOMMA)
			}
			{
				p.SetState(848)
				p.Test()
			}

		}
		p.SetState(853)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 125, p.GetParserRuleContext())
	}
	p.SetState(855)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 126, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(854)
			p.Match(PythonParserCOMMA)
		}

	}

	return localctx
}

// IDotted_nameContext is an interface to support dynamic dispatch.
type IDotted_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDotted_nameContext differentiates from other interfaces.
	IsDotted_nameContext()
}

type Dotted_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDotted_nameContext() *Dotted_nameContext {
	var p = new(Dotted_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_dotted_name
	return p
}

func (*Dotted_nameContext) IsDotted_nameContext() {}

func NewDotted_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dotted_nameContext {
	var p = new(Dotted_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_dotted_name

	return p
}

func (s *Dotted_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Dotted_nameContext) Name() INameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Dotted_nameContext) Dotted_name() IDotted_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDotted_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDotted_nameContext)
}

func (s *Dotted_nameContext) DOT() antlr.TerminalNode {
	return s.GetToken(PythonParserDOT, 0)
}

func (s *Dotted_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dotted_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dotted_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterDotted_name(s)
	}
}

func (s *Dotted_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitDotted_name(s)
	}
}

func (p *PythonParser) Dotted_name() (localctx IDotted_nameContext) {
	return p.dotted_name(0)
}

func (p *PythonParser) dotted_name(_p int) (localctx IDotted_nameContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewDotted_nameContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IDotted_nameContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 92
	p.EnterRecursionRule(localctx, 92, PythonParserRULE_dotted_name, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(858)
		p.Name()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(865)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 127, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewDotted_nameContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, PythonParserRULE_dotted_name)
			p.SetState(860)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(861)
				p.Match(PythonParserDOT)
			}
			{
				p.SetState(862)
				p.Name()
			}

		}
		p.SetState(867)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 127, p.GetParserRuleContext())
	}

	return localctx
}

// INameContext is an interface to support dynamic dispatch.
type INameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNameContext differentiates from other interfaces.
	IsNameContext()
}

type NameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameContext() *NameContext {
	var p = new(NameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_name
	return p
}

func (*NameContext) IsNameContext() {}

func NewNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameContext {
	var p = new(NameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_name

	return p
}

func (s *NameContext) GetParser() antlr.Parser { return s.parser }

func (s *NameContext) NAME() antlr.TerminalNode {
	return s.GetToken(PythonParserNAME, 0)
}

func (s *NameContext) TRUE() antlr.TerminalNode {
	return s.GetToken(PythonParserTRUE, 0)
}

func (s *NameContext) FALSE() antlr.TerminalNode {
	return s.GetToken(PythonParserFALSE, 0)
}

func (s *NameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterName(s)
	}
}

func (s *NameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitName(s)
	}
}

func (p *PythonParser) Name() (localctx INameContext) {
	this := p
	_ = this

	localctx = NewNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, PythonParserRULE_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(868)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-39)) & ^0x3f) == 0 && ((int64(1)<<(_la-39))&144115188075855875) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// INumberContext is an interface to support dynamic dispatch.
type INumberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNumberContext differentiates from other interfaces.
	IsNumberContext()
}

type NumberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumberContext() *NumberContext {
	var p = new(NumberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_number
	return p
}

func (*NumberContext) IsNumberContext() {}

func NewNumberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumberContext {
	var p = new(NumberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_number

	return p
}

func (s *NumberContext) GetParser() antlr.Parser { return s.parser }

func (s *NumberContext) Integer() IIntegerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerContext)
}

func (s *NumberContext) IMAG_NUMBER() antlr.TerminalNode {
	return s.GetToken(PythonParserIMAG_NUMBER, 0)
}

func (s *NumberContext) FLOAT_NUMBER() antlr.TerminalNode {
	return s.GetToken(PythonParserFLOAT_NUMBER, 0)
}

func (s *NumberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterNumber(s)
	}
}

func (s *NumberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitNumber(s)
	}
}

func (p *PythonParser) Number() (localctx INumberContext) {
	this := p
	_ = this

	localctx = NewNumberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, PythonParserRULE_number)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(873)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PythonParserDECIMAL_INTEGER, PythonParserOCT_INTEGER, PythonParserHEX_INTEGER, PythonParserBIN_INTEGER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(870)
			p.Integer()
		}

	case PythonParserIMAG_NUMBER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(871)
			p.Match(PythonParserIMAG_NUMBER)
		}

	case PythonParserFLOAT_NUMBER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(872)
			p.Match(PythonParserFLOAT_NUMBER)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIntegerContext is an interface to support dynamic dispatch.
type IIntegerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntegerContext differentiates from other interfaces.
	IsIntegerContext()
}

type IntegerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntegerContext() *IntegerContext {
	var p = new(IntegerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_integer
	return p
}

func (*IntegerContext) IsIntegerContext() {}

func NewIntegerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntegerContext {
	var p = new(IntegerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_integer

	return p
}

func (s *IntegerContext) GetParser() antlr.Parser { return s.parser }

func (s *IntegerContext) DECIMAL_INTEGER() antlr.TerminalNode {
	return s.GetToken(PythonParserDECIMAL_INTEGER, 0)
}

func (s *IntegerContext) OCT_INTEGER() antlr.TerminalNode {
	return s.GetToken(PythonParserOCT_INTEGER, 0)
}

func (s *IntegerContext) HEX_INTEGER() antlr.TerminalNode {
	return s.GetToken(PythonParserHEX_INTEGER, 0)
}

func (s *IntegerContext) BIN_INTEGER() antlr.TerminalNode {
	return s.GetToken(PythonParserBIN_INTEGER, 0)
}

func (s *IntegerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntegerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntegerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterInteger(s)
	}
}

func (s *IntegerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitInteger(s)
	}
}

func (p *PythonParser) Integer() (localctx IIntegerContext) {
	this := p
	_ = this

	localctx = NewIntegerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, PythonParserRULE_integer)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(875)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-84)) & ^0x3f) == 0 && ((int64(1)<<(_la-84))&15) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IYield_exprContext is an interface to support dynamic dispatch.
type IYield_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsYield_exprContext differentiates from other interfaces.
	IsYield_exprContext()
}

type Yield_exprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyYield_exprContext() *Yield_exprContext {
	var p = new(Yield_exprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_yield_expr
	return p
}

func (*Yield_exprContext) IsYield_exprContext() {}

func NewYield_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Yield_exprContext {
	var p = new(Yield_exprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_yield_expr

	return p
}

func (s *Yield_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Yield_exprContext) YIELD() antlr.TerminalNode {
	return s.GetToken(PythonParserYIELD, 0)
}

func (s *Yield_exprContext) Yield_arg() IYield_argContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IYield_argContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IYield_argContext)
}

func (s *Yield_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Yield_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Yield_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterYield_expr(s)
	}
}

func (s *Yield_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitYield_expr(s)
	}
}

func (p *PythonParser) Yield_expr() (localctx IYield_exprContext) {
	this := p
	_ = this

	localctx = NewYield_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, PythonParserRULE_yield_expr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(877)
		p.Match(PythonParserYIELD)
	}
	p.SetState(879)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1261023220259094656) != 0 || (int64((_la-83)) & ^0x3f) == 0 && ((int64(1)<<(_la-83))&11007) != 0 {
		{
			p.SetState(878)
			p.Yield_arg()
		}

	}

	return localctx
}

// IYield_argContext is an interface to support dynamic dispatch.
type IYield_argContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsYield_argContext differentiates from other interfaces.
	IsYield_argContext()
}

type Yield_argContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyYield_argContext() *Yield_argContext {
	var p = new(Yield_argContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_yield_arg
	return p
}

func (*Yield_argContext) IsYield_argContext() {}

func NewYield_argContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Yield_argContext {
	var p = new(Yield_argContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_yield_arg

	return p
}

func (s *Yield_argContext) GetParser() antlr.Parser { return s.parser }

func (s *Yield_argContext) FROM() antlr.TerminalNode {
	return s.GetToken(PythonParserFROM, 0)
}

func (s *Yield_argContext) Test() ITestContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestContext)
}

func (s *Yield_argContext) Testlist() ITestlistContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestlistContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestlistContext)
}

func (s *Yield_argContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Yield_argContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Yield_argContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterYield_arg(s)
	}
}

func (s *Yield_argContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitYield_arg(s)
	}
}

func (p *PythonParser) Yield_arg() (localctx IYield_argContext) {
	this := p
	_ = this

	localctx = NewYield_argContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, PythonParserRULE_yield_arg)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(884)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PythonParserFROM:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(881)
			p.Match(PythonParserFROM)
		}
		{
			p.SetState(882)
			p.Test()
		}

	case PythonParserNONE, PythonParserLAMBDA, PythonParserNOT, PythonParserAWAIT, PythonParserPRINT, PythonParserEXEC, PythonParserTRUE, PythonParserFALSE, PythonParserELLIPSIS, PythonParserREVERSE_QUOTE, PythonParserADD, PythonParserMINUS, PythonParserNOT_OP, PythonParserSTRING, PythonParserDECIMAL_INTEGER, PythonParserOCT_INTEGER, PythonParserHEX_INTEGER, PythonParserBIN_INTEGER, PythonParserIMAG_NUMBER, PythonParserFLOAT_NUMBER, PythonParserOPEN_PAREN, PythonParserOPEN_BRACE, PythonParserOPEN_BRACKET, PythonParserNAME:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(883)
			p.Testlist()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITrailerContext is an interface to support dynamic dispatch.
type ITrailerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTrailerContext differentiates from other interfaces.
	IsTrailerContext()
}

type TrailerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrailerContext() *TrailerContext {
	var p = new(TrailerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_trailer
	return p
}

func (*TrailerContext) IsTrailerContext() {}

func NewTrailerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TrailerContext {
	var p = new(TrailerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_trailer

	return p
}

func (s *TrailerContext) GetParser() antlr.Parser { return s.parser }

func (s *TrailerContext) DOT() antlr.TerminalNode {
	return s.GetToken(PythonParserDOT, 0)
}

func (s *TrailerContext) Name() INameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *TrailerContext) Arguments() IArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgumentsContext)
}

func (s *TrailerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TrailerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TrailerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterTrailer(s)
	}
}

func (s *TrailerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitTrailer(s)
	}
}

func (p *PythonParser) Trailer() (localctx ITrailerContext) {
	this := p
	_ = this

	localctx = NewTrailerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, PythonParserRULE_trailer)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(892)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PythonParserDOT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(886)
			p.Match(PythonParserDOT)
		}
		{
			p.SetState(887)
			p.Name()
		}
		p.SetState(889)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 131, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(888)
				p.Arguments()
			}

		}

	case PythonParserOPEN_PAREN, PythonParserOPEN_BRACKET:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(891)
			p.Arguments()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IArgumentsContext is an interface to support dynamic dispatch.
type IArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgumentsContext differentiates from other interfaces.
	IsArgumentsContext()
}

type ArgumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentsContext() *ArgumentsContext {
	var p = new(ArgumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_arguments
	return p
}

func (*ArgumentsContext) IsArgumentsContext() {}

func NewArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentsContext {
	var p = new(ArgumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_arguments

	return p
}

func (s *ArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentsContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PythonParserOPEN_PAREN, 0)
}

func (s *ArgumentsContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PythonParserCLOSE_PAREN, 0)
}

func (s *ArgumentsContext) Arglist() IArglistContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArglistContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArglistContext)
}

func (s *ArgumentsContext) OPEN_BRACKET() antlr.TerminalNode {
	return s.GetToken(PythonParserOPEN_BRACKET, 0)
}

func (s *ArgumentsContext) Subscriptlist() ISubscriptlistContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISubscriptlistContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISubscriptlistContext)
}

func (s *ArgumentsContext) CLOSE_BRACKET() antlr.TerminalNode {
	return s.GetToken(PythonParserCLOSE_BRACKET, 0)
}

func (s *ArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterArguments(s)
	}
}

func (s *ArgumentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitArguments(s)
	}
}

func (p *PythonParser) Arguments() (localctx IArgumentsContext) {
	this := p
	_ = this

	localctx = NewArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, PythonParserRULE_arguments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(903)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PythonParserOPEN_PAREN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(894)
			p.Match(PythonParserOPEN_PAREN)
		}
		p.SetState(896)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1261322287421849600) != 0 || (int64((_la-83)) & ^0x3f) == 0 && ((int64(1)<<(_la-83))&11007) != 0 {
			{
				p.SetState(895)
				p.Arglist()
			}

		}
		{
			p.SetState(898)
			p.Match(PythonParserCLOSE_PAREN)
		}

	case PythonParserOPEN_BRACKET:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(899)
			p.Match(PythonParserOPEN_BRACKET)
		}
		{
			p.SetState(900)
			p.Subscriptlist()
		}
		{
			p.SetState(901)
			p.Match(PythonParserCLOSE_BRACKET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IArglistContext is an interface to support dynamic dispatch.
type IArglistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArglistContext differentiates from other interfaces.
	IsArglistContext()
}

type ArglistContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArglistContext() *ArglistContext {
	var p = new(ArglistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_arglist
	return p
}

func (*ArglistContext) IsArglistContext() {}

func NewArglistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArglistContext {
	var p = new(ArglistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_arglist

	return p
}

func (s *ArglistContext) GetParser() antlr.Parser { return s.parser }

func (s *ArglistContext) AllArgument() []IArgumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IArgumentContext); ok {
			len++
		}
	}

	tst := make([]IArgumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IArgumentContext); ok {
			tst[i] = t.(IArgumentContext)
			i++
		}
	}

	return tst
}

func (s *ArglistContext) Argument(i int) IArgumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgumentContext)
}

func (s *ArglistContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PythonParserCOMMA)
}

func (s *ArglistContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserCOMMA, i)
}

func (s *ArglistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArglistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArglistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterArglist(s)
	}
}

func (s *ArglistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitArglist(s)
	}
}

func (p *PythonParser) Arglist() (localctx IArglistContext) {
	this := p
	_ = this

	localctx = NewArglistContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, PythonParserRULE_arglist)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(905)
		p.Argument()
	}
	p.SetState(910)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 135, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(906)
				p.Match(PythonParserCOMMA)
			}
			{
				p.SetState(907)
				p.Argument()
			}

		}
		p.SetState(912)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 135, p.GetParserRuleContext())
	}
	p.SetState(914)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PythonParserCOMMA {
		{
			p.SetState(913)
			p.Match(PythonParserCOMMA)
		}

	}

	return localctx
}

// IArgumentContext is an interface to support dynamic dispatch.
type IArgumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgumentContext differentiates from other interfaces.
	IsArgumentContext()
}

type ArgumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentContext() *ArgumentContext {
	var p = new(ArgumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_argument
	return p
}

func (*ArgumentContext) IsArgumentContext() {}

func NewArgumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentContext {
	var p = new(ArgumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_argument

	return p
}

func (s *ArgumentContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentContext) AllTest() []ITestContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITestContext); ok {
			len++
		}
	}

	tst := make([]ITestContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITestContext); ok {
			tst[i] = t.(ITestContext)
			i++
		}
	}

	return tst
}

func (s *ArgumentContext) Test(i int) ITestContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestContext)
}

func (s *ArgumentContext) Comp_for() IComp_forContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComp_forContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComp_forContext)
}

func (s *ArgumentContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(PythonParserASSIGN, 0)
}

func (s *ArgumentContext) POWER() antlr.TerminalNode {
	return s.GetToken(PythonParserPOWER, 0)
}

func (s *ArgumentContext) STAR() antlr.TerminalNode {
	return s.GetToken(PythonParserSTAR, 0)
}

func (s *ArgumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterArgument(s)
	}
}

func (s *ArgumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitArgument(s)
	}
}

func (p *PythonParser) Argument() (localctx IArgumentContext) {
	this := p
	_ = this

	localctx = NewArgumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, PythonParserRULE_argument)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(924)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PythonParserNONE, PythonParserLAMBDA, PythonParserNOT, PythonParserAWAIT, PythonParserPRINT, PythonParserEXEC, PythonParserTRUE, PythonParserFALSE, PythonParserELLIPSIS, PythonParserREVERSE_QUOTE, PythonParserADD, PythonParserMINUS, PythonParserNOT_OP, PythonParserSTRING, PythonParserDECIMAL_INTEGER, PythonParserOCT_INTEGER, PythonParserHEX_INTEGER, PythonParserBIN_INTEGER, PythonParserIMAG_NUMBER, PythonParserFLOAT_NUMBER, PythonParserOPEN_PAREN, PythonParserOPEN_BRACE, PythonParserOPEN_BRACKET, PythonParserNAME:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(916)
			p.Test()
		}
		p.SetState(920)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PythonParserFOR:
			{
				p.SetState(917)
				p.Comp_for()
			}

		case PythonParserASSIGN:
			{
				p.SetState(918)
				p.Match(PythonParserASSIGN)
			}
			{
				p.SetState(919)
				p.Test()
			}

		case PythonParserCOMMA, PythonParserCLOSE_PAREN:

		default:
		}

	case PythonParserSTAR, PythonParserPOWER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(922)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PythonParserSTAR || _la == PythonParserPOWER) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(923)
			p.Test()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISubscriptlistContext is an interface to support dynamic dispatch.
type ISubscriptlistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubscriptlistContext differentiates from other interfaces.
	IsSubscriptlistContext()
}

type SubscriptlistContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubscriptlistContext() *SubscriptlistContext {
	var p = new(SubscriptlistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_subscriptlist
	return p
}

func (*SubscriptlistContext) IsSubscriptlistContext() {}

func NewSubscriptlistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubscriptlistContext {
	var p = new(SubscriptlistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_subscriptlist

	return p
}

func (s *SubscriptlistContext) GetParser() antlr.Parser { return s.parser }

func (s *SubscriptlistContext) AllSubscript() []ISubscriptContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISubscriptContext); ok {
			len++
		}
	}

	tst := make([]ISubscriptContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISubscriptContext); ok {
			tst[i] = t.(ISubscriptContext)
			i++
		}
	}

	return tst
}

func (s *SubscriptlistContext) Subscript(i int) ISubscriptContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISubscriptContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISubscriptContext)
}

func (s *SubscriptlistContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PythonParserCOMMA)
}

func (s *SubscriptlistContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PythonParserCOMMA, i)
}

func (s *SubscriptlistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubscriptlistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubscriptlistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterSubscriptlist(s)
	}
}

func (s *SubscriptlistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitSubscriptlist(s)
	}
}

func (p *PythonParser) Subscriptlist() (localctx ISubscriptlistContext) {
	this := p
	_ = this

	localctx = NewSubscriptlistContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, PythonParserRULE_subscriptlist)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(926)
		p.Subscript()
	}
	p.SetState(931)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 139, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(927)
				p.Match(PythonParserCOMMA)
			}
			{
				p.SetState(928)
				p.Subscript()
			}

		}
		p.SetState(933)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 139, p.GetParserRuleContext())
	}
	p.SetState(935)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PythonParserCOMMA {
		{
			p.SetState(934)
			p.Match(PythonParserCOMMA)
		}

	}

	return localctx
}

// ISubscriptContext is an interface to support dynamic dispatch.
type ISubscriptContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubscriptContext differentiates from other interfaces.
	IsSubscriptContext()
}

type SubscriptContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubscriptContext() *SubscriptContext {
	var p = new(SubscriptContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_subscript
	return p
}

func (*SubscriptContext) IsSubscriptContext() {}

func NewSubscriptContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubscriptContext {
	var p = new(SubscriptContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_subscript

	return p
}

func (s *SubscriptContext) GetParser() antlr.Parser { return s.parser }

func (s *SubscriptContext) ELLIPSIS() antlr.TerminalNode {
	return s.GetToken(PythonParserELLIPSIS, 0)
}

func (s *SubscriptContext) AllTest() []ITestContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITestContext); ok {
			len++
		}
	}

	tst := make([]ITestContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITestContext); ok {
			tst[i] = t.(ITestContext)
			i++
		}
	}

	return tst
}

func (s *SubscriptContext) Test(i int) ITestContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestContext)
}

func (s *SubscriptContext) COLON() antlr.TerminalNode {
	return s.GetToken(PythonParserCOLON, 0)
}

func (s *SubscriptContext) Sliceop() ISliceopContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISliceopContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISliceopContext)
}

func (s *SubscriptContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubscriptContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubscriptContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterSubscript(s)
	}
}

func (s *SubscriptContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitSubscript(s)
	}
}

func (p *PythonParser) Subscript() (localctx ISubscriptContext) {
	this := p
	_ = this

	localctx = NewSubscriptContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, PythonParserRULE_subscript)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(955)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 146, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(937)
			p.Match(PythonParserELLIPSIS)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(938)
			p.Test()
		}
		p.SetState(946)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PythonParserCOLON {
			{
				p.SetState(939)
				p.Match(PythonParserCOLON)
			}
			p.SetState(941)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1261023220259094528) != 0 || (int64((_la-83)) & ^0x3f) == 0 && ((int64(1)<<(_la-83))&11007) != 0 {
				{
					p.SetState(940)
					p.Test()
				}

			}
			p.SetState(944)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PythonParserCOLON {
				{
					p.SetState(943)
					p.Sliceop()
				}

			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(948)
			p.Match(PythonParserCOLON)
		}
		p.SetState(950)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1261023220259094528) != 0 || (int64((_la-83)) & ^0x3f) == 0 && ((int64(1)<<(_la-83))&11007) != 0 {
			{
				p.SetState(949)
				p.Test()
			}

		}
		p.SetState(953)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PythonParserCOLON {
			{
				p.SetState(952)
				p.Sliceop()
			}

		}

	}

	return localctx
}

// ISliceopContext is an interface to support dynamic dispatch.
type ISliceopContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSliceopContext differentiates from other interfaces.
	IsSliceopContext()
}

type SliceopContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySliceopContext() *SliceopContext {
	var p = new(SliceopContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_sliceop
	return p
}

func (*SliceopContext) IsSliceopContext() {}

func NewSliceopContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceopContext {
	var p = new(SliceopContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_sliceop

	return p
}

func (s *SliceopContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceopContext) COLON() antlr.TerminalNode {
	return s.GetToken(PythonParserCOLON, 0)
}

func (s *SliceopContext) Test() ITestContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestContext)
}

func (s *SliceopContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceopContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceopContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterSliceop(s)
	}
}

func (s *SliceopContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitSliceop(s)
	}
}

func (p *PythonParser) Sliceop() (localctx ISliceopContext) {
	this := p
	_ = this

	localctx = NewSliceopContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, PythonParserRULE_sliceop)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(957)
		p.Match(PythonParserCOLON)
	}
	p.SetState(959)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1261023220259094528) != 0 || (int64((_la-83)) & ^0x3f) == 0 && ((int64(1)<<(_la-83))&11007) != 0 {
		{
			p.SetState(958)
			p.Test()
		}

	}

	return localctx
}

// IComp_forContext is an interface to support dynamic dispatch.
type IComp_forContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComp_forContext differentiates from other interfaces.
	IsComp_forContext()
}

type Comp_forContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComp_forContext() *Comp_forContext {
	var p = new(Comp_forContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_comp_for
	return p
}

func (*Comp_forContext) IsComp_forContext() {}

func NewComp_forContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Comp_forContext {
	var p = new(Comp_forContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_comp_for

	return p
}

func (s *Comp_forContext) GetParser() antlr.Parser { return s.parser }

func (s *Comp_forContext) FOR() antlr.TerminalNode {
	return s.GetToken(PythonParserFOR, 0)
}

func (s *Comp_forContext) Exprlist() IExprlistContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprlistContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprlistContext)
}

func (s *Comp_forContext) IN() antlr.TerminalNode {
	return s.GetToken(PythonParserIN, 0)
}

func (s *Comp_forContext) Logical_test() ILogical_testContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILogical_testContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILogical_testContext)
}

func (s *Comp_forContext) Comp_iter() IComp_iterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComp_iterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComp_iterContext)
}

func (s *Comp_forContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Comp_forContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Comp_forContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterComp_for(s)
	}
}

func (s *Comp_forContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitComp_for(s)
	}
}

func (p *PythonParser) Comp_for() (localctx IComp_forContext) {
	this := p
	_ = this

	localctx = NewComp_forContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, PythonParserRULE_comp_for)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(961)
		p.Match(PythonParserFOR)
	}
	{
		p.SetState(962)
		p.Exprlist()
	}
	{
		p.SetState(963)
		p.Match(PythonParserIN)
	}
	{
		p.SetState(964)
		p.logical_test(0)
	}
	p.SetState(966)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PythonParserIF || _la == PythonParserFOR {
		{
			p.SetState(965)
			p.Comp_iter()
		}

	}

	return localctx
}

// IComp_iterContext is an interface to support dynamic dispatch.
type IComp_iterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComp_iterContext differentiates from other interfaces.
	IsComp_iterContext()
}

type Comp_iterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComp_iterContext() *Comp_iterContext {
	var p = new(Comp_iterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PythonParserRULE_comp_iter
	return p
}

func (*Comp_iterContext) IsComp_iterContext() {}

func NewComp_iterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Comp_iterContext {
	var p = new(Comp_iterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PythonParserRULE_comp_iter

	return p
}

func (s *Comp_iterContext) GetParser() antlr.Parser { return s.parser }

func (s *Comp_iterContext) Comp_for() IComp_forContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComp_forContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComp_forContext)
}

func (s *Comp_iterContext) IF() antlr.TerminalNode {
	return s.GetToken(PythonParserIF, 0)
}

func (s *Comp_iterContext) Test() ITestContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITestContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITestContext)
}

func (s *Comp_iterContext) Comp_iter() IComp_iterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComp_iterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComp_iterContext)
}

func (s *Comp_iterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Comp_iterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Comp_iterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.EnterComp_iter(s)
	}
}

func (s *Comp_iterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PythonParserListener); ok {
		listenerT.ExitComp_iter(s)
	}
}

func (p *PythonParser) Comp_iter() (localctx IComp_iterContext) {
	this := p
	_ = this

	localctx = NewComp_iterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, PythonParserRULE_comp_iter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(974)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PythonParserFOR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(968)
			p.Comp_for()
		}

	case PythonParserIF:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(969)
			p.Match(PythonParserIF)
		}
		{
			p.SetState(970)
			p.Test()
		}
		p.SetState(972)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PythonParserIF || _la == PythonParserFOR {
			{
				p.SetState(971)
				p.Comp_iter()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

func (p *PythonParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 12:
		var t *Except_clauseContext = nil
		if localctx != nil {
			t = localctx.(*Except_clauseContext)
		}
		return p.Except_clause_Sempred(t, predIndex)

	case 22:
		var t *Small_stmtContext = nil
		if localctx != nil {
			t = localctx.(*Small_stmtContext)
		}
		return p.Small_stmt_Sempred(t, predIndex)

	case 27:
		var t *Assign_partContext = nil
		if localctx != nil {
			t = localctx.(*Assign_partContext)
		}
		return p.Assign_part_Sempred(t, predIndex)

	case 39:
		var t *Logical_testContext = nil
		if localctx != nil {
			t = localctx.(*Logical_testContext)
		}
		return p.Logical_test_Sempred(t, predIndex)

	case 40:
		var t *ComparisonContext = nil
		if localctx != nil {
			t = localctx.(*ComparisonContext)
		}
		return p.Comparison_Sempred(t, predIndex)

	case 41:
		var t *ExprContext = nil
		if localctx != nil {
			t = localctx.(*ExprContext)
		}
		return p.Expr_Sempred(t, predIndex)

	case 46:
		var t *Dotted_nameContext = nil
		if localctx != nil {
			t = localctx.(*Dotted_nameContext)
		}
		return p.Dotted_name_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *PythonParser) Except_clause_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 0:
		return p.CheckVersion(2)

	case 1:
		return p.CheckVersion(3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *PythonParser) Small_stmt_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 2:
		return p.CheckVersion(2)

	case 3:
		return p.CheckVersion(2)

	case 4:
		return p.CheckVersion(3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *PythonParser) Assign_part_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 5:
		return p.CheckVersion(3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *PythonParser) Logical_test_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 6:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *PythonParser) Comparison_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 8:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *PythonParser) Expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 9:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 15:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *PythonParser) Dotted_name_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 16:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
