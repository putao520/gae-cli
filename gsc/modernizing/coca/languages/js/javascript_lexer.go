// Code generated from java-escape by ANTLR 4.11.1. DO NOT EDIT.

package parser

import (
	"fmt"
	"sync"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr/v4"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type JavaScriptLexer struct {
	JavaScriptBaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var javascriptlexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	channelNames           []string
	modeNames              []string
	literalNames           []string
	symbolicNames          []string
	ruleNames              []string
	predictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func javascriptlexerLexerInit() {
	staticData := &javascriptlexerLexerStaticData
	staticData.channelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR",
	}
	staticData.modeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.literalNames = []string{
		"", "", "", "", "", "'['", "']'", "'('", "')'", "'{'", "'}'", "';'",
		"','", "'='", "'?'", "':'", "'...'", "'.'", "'++'", "'--'", "'+'", "'-'",
		"'~'", "'!'", "'*'", "'/'", "'%'", "'**'", "'??'", "'#'", "'>>'", "'<<'",
		"'>>>'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'==='", "'!=='",
		"'&'", "'^'", "'|'", "'&&'", "'||'", "'*='", "'/='", "'%='", "'+='",
		"'-='", "'<<='", "'>>='", "'>>>='", "'&='", "'^='", "'|='", "'**='",
		"'=>'", "'null'", "", "", "", "", "", "", "", "", "", "", "'break'",
		"'do'", "'instanceof'", "'typeof'", "'case'", "'else'", "'new'", "'var'",
		"'catch'", "'finally'", "'return'", "'void'", "'continue'", "'for'",
		"'switch'", "'while'", "'debugger'", "'function'", "'this'", "'with'",
		"'default'", "'if'", "'throw'", "'delete'", "'in'", "'try'", "'as'",
		"'from'", "'class'", "'enum'", "'extends'", "'super'", "'const'", "'export'",
		"'import'", "'async'", "'await'", "'implements'", "'let'", "'private'",
		"'public'", "'interface'", "'package'", "'protected'", "'static'", "'yield'",
	}
	staticData.symbolicNames = []string{
		"", "HashBangLine", "MultiLineComment", "SingleLineComment", "RegularExpressionLiteral",
		"OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace",
		"CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", "Colon",
		"Ellipsis", "Dot", "PlusPlus", "MinusMinus", "Plus", "Minus", "BitNot",
		"Not", "Multiply", "Divide", "Modulus", "Power", "NullCoalesce", "Hashtag",
		"RightShiftArithmetic", "LeftShiftArithmetic", "RightShiftLogical",
		"LessThan", "MoreThan", "LessThanEquals", "GreaterThanEquals", "Equals_",
		"NotEquals", "IdentityEquals", "IdentityNotEquals", "BitAnd", "BitXOr",
		"BitOr", "And", "Or", "MultiplyAssign", "DivideAssign", "ModulusAssign",
		"PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign",
		"RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", "BitOrAssign",
		"PowerAssign", "ARROW", "NullLiteral", "BooleanLiteral", "DecimalLiteral",
		"HexIntegerLiteral", "OctalIntegerLiteral", "OctalIntegerLiteral2",
		"BinaryIntegerLiteral", "BigHexIntegerLiteral", "BigOctalIntegerLiteral",
		"BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", "Break", "Do",
		"Instanceof", "Typeof", "Case", "Else", "New", "Var", "Catch", "Finally",
		"Return", "Void", "Continue", "For", "Switch", "While", "Debugger",
		"Function", "This", "With", "Default", "If", "Throw", "Delete", "In",
		"Try", "As", "From", "Class", "Enum", "Extends", "Super", "Const", "Export",
		"Import", "Async", "Await", "Implements", "Let", "Private", "Public",
		"Interface", "Package", "Protected", "Static", "Yield", "Identifier",
		"StringLiteral", "TemplateStringLiteral", "WhiteSpaces", "LineTerminator",
		"HtmlComment", "CDataComment", "UnexpectedCharacter",
	}
	staticData.ruleNames = []string{
		"HashBangLine", "MultiLineComment", "SingleLineComment", "RegularExpressionLiteral",
		"OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace",
		"CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", "Colon",
		"Ellipsis", "Dot", "PlusPlus", "MinusMinus", "Plus", "Minus", "BitNot",
		"Not", "Multiply", "Divide", "Modulus", "Power", "NullCoalesce", "Hashtag",
		"RightShiftArithmetic", "LeftShiftArithmetic", "RightShiftLogical",
		"LessThan", "MoreThan", "LessThanEquals", "GreaterThanEquals", "Equals_",
		"NotEquals", "IdentityEquals", "IdentityNotEquals", "BitAnd", "BitXOr",
		"BitOr", "And", "Or", "MultiplyAssign", "DivideAssign", "ModulusAssign",
		"PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign",
		"RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", "BitOrAssign",
		"PowerAssign", "ARROW", "NullLiteral", "BooleanLiteral", "DecimalLiteral",
		"HexIntegerLiteral", "OctalIntegerLiteral", "OctalIntegerLiteral2",
		"BinaryIntegerLiteral", "BigHexIntegerLiteral", "BigOctalIntegerLiteral",
		"BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", "Break", "Do",
		"Instanceof", "Typeof", "Case", "Else", "New", "Var", "Catch", "Finally",
		"Return", "Void", "Continue", "For", "Switch", "While", "Debugger",
		"Function", "This", "With", "Default", "If", "Throw", "Delete", "In",
		"Try", "As", "From", "Class", "Enum", "Extends", "Super", "Const", "Export",
		"Import", "Async", "Await", "Implements", "Let", "Private", "Public",
		"Interface", "Package", "Protected", "Static", "Yield", "Identifier",
		"StringLiteral", "TemplateStringLiteral", "WhiteSpaces", "LineTerminator",
		"HtmlComment", "CDataComment", "UnexpectedCharacter", "DoubleStringCharacter",
		"SingleStringCharacter", "EscapeSequence", "CharacterEscapeSequence",
		"HexEscapeSequence", "UnicodeEscapeSequence", "ExtendedUnicodeEscapeSequence",
		"SingleEscapeCharacter", "NonEscapeCharacter", "EscapeCharacter", "LineContinuation",
		"HexDigit", "DecimalIntegerLiteral", "ExponentPart", "IdentifierPart",
		"IdentifierStart", "UnicodeLetter", "UnicodeCombiningMark", "UnicodeDigit",
		"UnicodeConnectorPunctuation", "RegularExpressionFirstChar", "RegularExpressionChar",
		"RegularExpressionClassChar", "RegularExpressionBackslashSequence",
	}
	staticData.predictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 123, 1154, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3,
		2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9,
		2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2,
		15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20,
		7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7,
		25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30,
		2, 31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2,
		36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41,
		7, 41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7,
		46, 2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51,
		2, 52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2,
		57, 7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62,
		7, 62, 2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7,
		67, 2, 68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72,
		2, 73, 7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2,
		78, 7, 78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83,
		7, 83, 2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7,
		88, 2, 89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93,
		2, 94, 7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2,
		99, 7, 99, 2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103,
		2, 104, 7, 104, 2, 105, 7, 105, 2, 106, 7, 106, 2, 107, 7, 107, 2, 108,
		7, 108, 2, 109, 7, 109, 2, 110, 7, 110, 2, 111, 7, 111, 2, 112, 7, 112,
		2, 113, 7, 113, 2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 2, 117,
		7, 117, 2, 118, 7, 118, 2, 119, 7, 119, 2, 120, 7, 120, 2, 121, 7, 121,
		2, 122, 7, 122, 2, 123, 7, 123, 2, 124, 7, 124, 2, 125, 7, 125, 2, 126,
		7, 126, 2, 127, 7, 127, 2, 128, 7, 128, 2, 129, 7, 129, 2, 130, 7, 130,
		2, 131, 7, 131, 2, 132, 7, 132, 2, 133, 7, 133, 2, 134, 7, 134, 2, 135,
		7, 135, 2, 136, 7, 136, 2, 137, 7, 137, 2, 138, 7, 138, 2, 139, 7, 139,
		2, 140, 7, 140, 2, 141, 7, 141, 2, 142, 7, 142, 2, 143, 7, 143, 2, 144,
		7, 144, 2, 145, 7, 145, 2, 146, 7, 146, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 5,
		0, 301, 8, 0, 10, 0, 12, 0, 304, 9, 0, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 310,
		8, 1, 10, 1, 12, 1, 313, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
		1, 2, 1, 2, 5, 2, 324, 8, 2, 10, 2, 12, 2, 327, 9, 2, 1, 2, 1, 2, 1, 3,
		1, 3, 1, 3, 5, 3, 334, 8, 3, 10, 3, 12, 3, 337, 9, 3, 1, 3, 1, 3, 1, 3,
		5, 3, 342, 8, 3, 10, 3, 12, 3, 345, 9, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6,
		1, 6, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1,
		11, 1, 11, 1, 12, 1, 12, 1, 13, 1, 13, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15,
		1, 15, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1, 19, 1,
		19, 1, 20, 1, 20, 1, 21, 1, 21, 1, 22, 1, 22, 1, 23, 1, 23, 1, 24, 1, 24,
		1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1,
		29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 1, 31, 1, 31, 1, 31, 1, 31, 1, 32,
		1, 32, 1, 33, 1, 33, 1, 34, 1, 34, 1, 34, 1, 35, 1, 35, 1, 35, 1, 36, 1,
		36, 1, 36, 1, 37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 1, 38, 1, 39, 1, 39,
		1, 39, 1, 39, 1, 40, 1, 40, 1, 41, 1, 41, 1, 42, 1, 42, 1, 43, 1, 43, 1,
		43, 1, 44, 1, 44, 1, 44, 1, 45, 1, 45, 1, 45, 1, 46, 1, 46, 1, 46, 1, 47,
		1, 47, 1, 47, 1, 48, 1, 48, 1, 48, 1, 49, 1, 49, 1, 49, 1, 50, 1, 50, 1,
		50, 1, 50, 1, 51, 1, 51, 1, 51, 1, 51, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52,
		1, 53, 1, 53, 1, 53, 1, 54, 1, 54, 1, 54, 1, 55, 1, 55, 1, 55, 1, 56, 1,
		56, 1, 56, 1, 56, 1, 57, 1, 57, 1, 57, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58,
		1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 3, 59, 509,
		8, 59, 1, 60, 1, 60, 1, 60, 1, 60, 5, 60, 515, 8, 60, 10, 60, 12, 60, 518,
		9, 60, 1, 60, 3, 60, 521, 8, 60, 1, 60, 1, 60, 1, 60, 5, 60, 526, 8, 60,
		10, 60, 12, 60, 529, 9, 60, 1, 60, 3, 60, 532, 8, 60, 1, 60, 1, 60, 3,
		60, 536, 8, 60, 3, 60, 538, 8, 60, 1, 61, 1, 61, 1, 61, 1, 61, 5, 61, 544,
		8, 61, 10, 61, 12, 61, 547, 9, 61, 1, 62, 1, 62, 4, 62, 551, 8, 62, 11,
		62, 12, 62, 552, 1, 62, 1, 62, 1, 63, 1, 63, 1, 63, 1, 63, 5, 63, 561,
		8, 63, 10, 63, 12, 63, 564, 9, 63, 1, 64, 1, 64, 1, 64, 1, 64, 5, 64, 570,
		8, 64, 10, 64, 12, 64, 573, 9, 64, 1, 65, 1, 65, 1, 65, 1, 65, 5, 65, 579,
		8, 65, 10, 65, 12, 65, 582, 9, 65, 1, 65, 1, 65, 1, 66, 1, 66, 1, 66, 1,
		66, 5, 66, 590, 8, 66, 10, 66, 12, 66, 593, 9, 66, 1, 66, 1, 66, 1, 67,
		1, 67, 1, 67, 1, 67, 5, 67, 601, 8, 67, 10, 67, 12, 67, 604, 9, 67, 1,
		67, 1, 67, 1, 68, 1, 68, 1, 68, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69,
		1, 70, 1, 70, 1, 70, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 1,
		71, 1, 71, 1, 71, 1, 71, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72,
		1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1,
		75, 1, 75, 1, 75, 1, 75, 1, 76, 1, 76, 1, 76, 1, 76, 1, 77, 1, 77, 1, 77,
		1, 77, 1, 77, 1, 77, 1, 78, 1, 78, 1, 78, 1, 78, 1, 78, 1, 78, 1, 78, 1,
		78, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 80, 1, 80, 1, 80,
		1, 80, 1, 80, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1,
		81, 1, 82, 1, 82, 1, 82, 1, 82, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83,
		1, 83, 1, 84, 1, 84, 1, 84, 1, 84, 1, 84, 1, 84, 1, 85, 1, 85, 1, 85, 1,
		85, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85, 1, 86, 1, 86, 1, 86, 1, 86, 1, 86,
		1, 86, 1, 86, 1, 86, 1, 86, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 88, 1,
		88, 1, 88, 1, 88, 1, 88, 1, 89, 1, 89, 1, 89, 1, 89, 1, 89, 1, 89, 1, 89,
		1, 89, 1, 90, 1, 90, 1, 90, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1,
		92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 93, 1, 93, 1, 93, 1, 94,
		1, 94, 1, 94, 1, 94, 1, 95, 1, 95, 1, 95, 1, 96, 1, 96, 1, 96, 1, 96, 1,
		96, 1, 97, 1, 97, 1, 97, 1, 97, 1, 97, 1, 97, 1, 98, 1, 98, 1, 98, 1, 98,
		1, 98, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 100,
		1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 101, 1, 101, 1, 101, 1, 101,
		1, 101, 1, 101, 1, 102, 1, 102, 1, 102, 1, 102, 1, 102, 1, 102, 1, 102,
		1, 103, 1, 103, 1, 103, 1, 103, 1, 103, 1, 103, 1, 103, 1, 104, 1, 104,
		1, 104, 1, 104, 1, 104, 1, 104, 1, 105, 1, 105, 1, 105, 1, 105, 1, 105,
		1, 105, 1, 106, 1, 106, 1, 106, 1, 106, 1, 106, 1, 106, 1, 106, 1, 106,
		1, 106, 1, 106, 1, 106, 1, 106, 1, 106, 1, 107, 1, 107, 1, 107, 1, 107,
		1, 107, 1, 107, 1, 108, 1, 108, 1, 108, 1, 108, 1, 108, 1, 108, 1, 108,
		1, 108, 1, 108, 1, 108, 1, 109, 1, 109, 1, 109, 1, 109, 1, 109, 1, 109,
		1, 109, 1, 109, 1, 109, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110,
		1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 1, 111, 1, 111, 1, 111,
		1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 111, 1, 112, 1, 112,
		1, 112, 1, 112, 1, 112, 1, 112, 1, 112, 1, 112, 1, 112, 1, 112, 1, 112,
		1, 112, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113,
		1, 113, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114, 1, 114,
		1, 115, 1, 115, 5, 115, 923, 8, 115, 10, 115, 12, 115, 926, 9, 115, 1,
		116, 1, 116, 5, 116, 930, 8, 116, 10, 116, 12, 116, 933, 9, 116, 1, 116,
		1, 116, 1, 116, 5, 116, 938, 8, 116, 10, 116, 12, 116, 941, 9, 116, 1,
		116, 3, 116, 944, 8, 116, 1, 116, 1, 116, 1, 117, 1, 117, 1, 117, 1, 117,
		5, 117, 952, 8, 117, 10, 117, 12, 117, 955, 9, 117, 1, 117, 1, 117, 1,
		118, 4, 118, 960, 8, 118, 11, 118, 12, 118, 961, 1, 118, 1, 118, 1, 119,
		1, 119, 1, 119, 1, 119, 1, 120, 1, 120, 1, 120, 1, 120, 1, 120, 1, 120,
		5, 120, 976, 8, 120, 10, 120, 12, 120, 979, 9, 120, 1, 120, 1, 120, 1,
		120, 1, 120, 1, 120, 1, 120, 1, 121, 1, 121, 1, 121, 1, 121, 1, 121, 1,
		121, 1, 121, 1, 121, 1, 121, 1, 121, 1, 121, 5, 121, 998, 8, 121, 10, 121,
		12, 121, 1001, 9, 121, 1, 121, 1, 121, 1, 121, 1, 121, 1, 121, 1, 121,
		1, 122, 1, 122, 1, 122, 1, 122, 1, 123, 1, 123, 1, 123, 1, 123, 3, 123,
		1017, 8, 123, 1, 124, 1, 124, 1, 124, 1, 124, 3, 124, 1023, 8, 124, 1,
		125, 1, 125, 1, 125, 1, 125, 1, 125, 3, 125, 1030, 8, 125, 1, 126, 1, 126,
		3, 126, 1034, 8, 126, 1, 127, 1, 127, 1, 127, 1, 127, 1, 128, 1, 128, 1,
		128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 4, 128, 1050,
		8, 128, 11, 128, 12, 128, 1051, 1, 128, 1, 128, 3, 128, 1056, 8, 128, 1,
		129, 1, 129, 1, 129, 4, 129, 1061, 8, 129, 11, 129, 12, 129, 1062, 1, 129,
		1, 129, 1, 130, 1, 130, 1, 131, 1, 131, 1, 132, 1, 132, 3, 132, 1073, 8,
		132, 1, 133, 1, 133, 1, 133, 1, 134, 1, 134, 1, 135, 1, 135, 1, 135, 5,
		135, 1083, 8, 135, 10, 135, 12, 135, 1086, 9, 135, 3, 135, 1088, 8, 135,
		1, 136, 1, 136, 3, 136, 1092, 8, 136, 1, 136, 4, 136, 1095, 8, 136, 11,
		136, 12, 136, 1096, 1, 137, 1, 137, 1, 137, 1, 137, 1, 137, 3, 137, 1104,
		8, 137, 1, 138, 1, 138, 1, 138, 1, 138, 3, 138, 1110, 8, 138, 1, 139, 3,
		139, 1113, 8, 139, 1, 140, 3, 140, 1116, 8, 140, 1, 141, 3, 141, 1119,
		8, 141, 1, 142, 3, 142, 1122, 8, 142, 1, 143, 1, 143, 1, 143, 1, 143, 5,
		143, 1128, 8, 143, 10, 143, 12, 143, 1131, 9, 143, 1, 143, 3, 143, 1134,
		8, 143, 1, 144, 1, 144, 1, 144, 1, 144, 5, 144, 1140, 8, 144, 10, 144,
		12, 144, 1143, 9, 144, 1, 144, 3, 144, 1146, 8, 144, 1, 145, 1, 145, 3,
		145, 1150, 8, 145, 1, 146, 1, 146, 1, 146, 3, 311, 977, 999, 0, 147, 1,
		1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11,
		23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39, 20,
		41, 21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 28, 57, 29,
		59, 30, 61, 31, 63, 32, 65, 33, 67, 34, 69, 35, 71, 36, 73, 37, 75, 38,
		77, 39, 79, 40, 81, 41, 83, 42, 85, 43, 87, 44, 89, 45, 91, 46, 93, 47,
		95, 48, 97, 49, 99, 50, 101, 51, 103, 52, 105, 53, 107, 54, 109, 55, 111,
		56, 113, 57, 115, 58, 117, 59, 119, 60, 121, 61, 123, 62, 125, 63, 127,
		64, 129, 65, 131, 66, 133, 67, 135, 68, 137, 69, 139, 70, 141, 71, 143,
		72, 145, 73, 147, 74, 149, 75, 151, 76, 153, 77, 155, 78, 157, 79, 159,
		80, 161, 81, 163, 82, 165, 83, 167, 84, 169, 85, 171, 86, 173, 87, 175,
		88, 177, 89, 179, 90, 181, 91, 183, 92, 185, 93, 187, 94, 189, 95, 191,
		96, 193, 97, 195, 98, 197, 99, 199, 100, 201, 101, 203, 102, 205, 103,
		207, 104, 209, 105, 211, 106, 213, 107, 215, 108, 217, 109, 219, 110, 221,
		111, 223, 112, 225, 113, 227, 114, 229, 115, 231, 116, 233, 117, 235, 118,
		237, 119, 239, 120, 241, 121, 243, 122, 245, 123, 247, 0, 249, 0, 251,
		0, 253, 0, 255, 0, 257, 0, 259, 0, 261, 0, 263, 0, 265, 0, 267, 0, 269,
		0, 271, 0, 273, 0, 275, 0, 277, 0, 279, 0, 281, 0, 283, 0, 285, 0, 287,
		0, 289, 0, 291, 0, 293, 0, 1, 0, 30, 3, 0, 10, 10, 13, 13, 8232, 8233,
		1, 0, 48, 57, 2, 0, 48, 57, 95, 95, 2, 0, 88, 88, 120, 120, 3, 0, 48, 57,
		65, 70, 97, 102, 1, 0, 48, 55, 2, 0, 79, 79, 111, 111, 2, 0, 48, 55, 95,
		95, 2, 0, 66, 66, 98, 98, 1, 0, 48, 49, 2, 0, 48, 49, 95, 95, 1, 0, 96,
		96, 4, 0, 9, 9, 11, 12, 32, 32, 160, 160, 4, 0, 10, 10, 13, 13, 34, 34,
		92, 92, 4, 0, 10, 10, 13, 13, 39, 39, 92, 92, 9, 0, 34, 34, 39, 39, 92,
		92, 98, 98, 102, 102, 110, 110, 114, 114, 116, 116, 118, 118, 12, 0, 10,
		10, 13, 13, 34, 34, 39, 39, 48, 57, 92, 92, 98, 98, 102, 102, 110, 110,
		114, 114, 116, 118, 120, 120, 3, 0, 48, 57, 117, 117, 120, 120, 4, 0, 48,
		57, 65, 70, 95, 95, 97, 102, 1, 0, 49, 57, 2, 0, 69, 69, 101, 101, 2, 0,
		43, 43, 45, 45, 2, 0, 36, 36, 95, 95, 255, 0, 65, 90, 97, 122, 170, 170,
		181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688,
		696, 699, 705, 720, 721, 736, 740, 750, 750, 890, 890, 902, 902, 904, 906,
		908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1164, 1220,
		1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369,
		1377, 1415, 1488, 1514, 1520, 1522, 1569, 1594, 1600, 1610, 1649, 1747,
		1749, 1749, 1765, 1766, 1786, 1788, 1808, 1808, 1810, 1836, 1920, 1957,
		2309, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2437, 2444, 2447, 2448,
		2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2524, 2525, 2527, 2529,
		2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611,
		2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2699,
		2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745,
		2749, 2749, 2768, 2768, 2784, 2784, 2821, 2828, 2831, 2832, 2835, 2856,
		2858, 2864, 2866, 2867, 2870, 2873, 2877, 2877, 2908, 2909, 2911, 2913,
		2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975,
		2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3077, 3084, 3086, 3088,
		3090, 3112, 3114, 3123, 3125, 3129, 3168, 3169, 3205, 3212, 3214, 3216,
		3218, 3240, 3242, 3251, 3253, 3257, 3294, 3294, 3296, 3297, 3333, 3340,
		3342, 3344, 3346, 3368, 3370, 3385, 3424, 3425, 3461, 3478, 3482, 3505,
		3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654,
		3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735,
		3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760,
		3762, 3763, 3773, 3780, 3782, 3782, 3804, 3805, 3840, 3840, 3904, 3946,
		3976, 3979, 4096, 4129, 4131, 4135, 4137, 4138, 4176, 4181, 4256, 4293,
		4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678,
		4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742,
		4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798,
		4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878,
		4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 5024, 5108,
		5121, 5750, 5761, 5786, 5792, 5866, 6016, 6067, 6176, 6263, 6272, 6312,
		7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013,
		8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116,
		8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155,
		8160, 8172, 8178, 8180, 8182, 8188, 8319, 8319, 8450, 8450, 8455, 8455,
		8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488,
		8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12329,
		12337, 12341, 12344, 12346, 12353, 12436, 12445, 12446, 12449, 12538, 12540,
		12542, 12549, 12588, 12593, 12686, 12704, 12727, 13312, 19903, 19968, 42124,
		44032, 44032, 55203, 55203, 63744, 64045, 64256, 64262, 64275, 64279, 64285,
		64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,
		64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,
		65019, 65136, 65138, 65140, 65140, 65142, 65276, 65313, 65338, 65345, 65370,
		65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 100,
		0, 768, 846, 864, 866, 1155, 1158, 1425, 1441, 1443, 1465, 1467, 1469,
		1471, 1471, 1473, 1474, 1476, 1476, 1611, 1621, 1648, 1648, 1750, 1756,
		1759, 1764, 1767, 1768, 1770, 1773, 1809, 1809, 1840, 1866, 1958, 1968,
		2305, 2307, 2364, 2364, 2366, 2381, 2385, 2388, 2402, 2403, 2433, 2435,
		2492, 2500, 2503, 2504, 2507, 2509, 2519, 2519, 2530, 2531, 2562, 2562,
		2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2672, 2673, 2689, 2691,
		2748, 2748, 2750, 2757, 2759, 2761, 2763, 2765, 2817, 2819, 2876, 2876,
		2878, 2883, 2887, 2888, 2891, 2893, 2902, 2903, 2946, 2947, 3006, 3010,
		3014, 3016, 3018, 3021, 3031, 3031, 3073, 3075, 3134, 3140, 3142, 3144,
		3146, 3149, 3157, 3158, 3202, 3203, 3262, 3268, 3270, 3272, 3274, 3277,
		3285, 3286, 3330, 3331, 3390, 3395, 3398, 3400, 3402, 3405, 3415, 3415,
		3458, 3459, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571,
		3633, 3633, 3636, 3642, 3655, 3662, 3761, 3761, 3764, 3769, 3771, 3772,
		3784, 3789, 3864, 3865, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3903,
		3953, 3972, 3974, 3975, 3984, 3991, 3993, 4028, 4038, 4038, 4140, 4146,
		4150, 4153, 4182, 4185, 6068, 6099, 6313, 6313, 8400, 8412, 8417, 8417,
		12330, 12335, 12441, 12442, 64286, 64286, 65056, 65059, 20, 0, 48, 57,
		1632, 1641, 1776, 1785, 2406, 2415, 2534, 2543, 2662, 2671, 2790, 2799,
		2918, 2927, 3047, 3055, 3174, 3183, 3302, 3311, 3430, 3439, 3664, 3673,
		3792, 3801, 3872, 3881, 4160, 4169, 4969, 4977, 6112, 6121, 6160, 6169,
		65296, 65305, 7, 0, 95, 95, 8255, 8256, 12539, 12539, 65075, 65076, 65101,
		65103, 65343, 65343, 65381, 65381, 6, 0, 10, 10, 13, 13, 42, 42, 47, 47,
		91, 92, 8232, 8233, 5, 0, 10, 10, 13, 13, 47, 47, 91, 92, 8232, 8233, 4,
		0, 10, 10, 13, 13, 92, 93, 8232, 8233, 1188, 0, 1, 1, 0, 0, 0, 0, 3, 1,
		0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1,
		0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19,
		1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0,
		27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0,
		0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0,
		0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0,
		0, 0, 0, 51, 1, 0, 0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1,
		0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 63, 1, 0, 0, 0, 0, 65,
		1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 71, 1, 0, 0, 0, 0,
		73, 1, 0, 0, 0, 0, 75, 1, 0, 0, 0, 0, 77, 1, 0, 0, 0, 0, 79, 1, 0, 0, 0,
		0, 81, 1, 0, 0, 0, 0, 83, 1, 0, 0, 0, 0, 85, 1, 0, 0, 0, 0, 87, 1, 0, 0,
		0, 0, 89, 1, 0, 0, 0, 0, 91, 1, 0, 0, 0, 0, 93, 1, 0, 0, 0, 0, 95, 1, 0,
		0, 0, 0, 97, 1, 0, 0, 0, 0, 99, 1, 0, 0, 0, 0, 101, 1, 0, 0, 0, 0, 103,
		1, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 107, 1, 0, 0, 0, 0, 109, 1, 0, 0, 0,
		0, 111, 1, 0, 0, 0, 0, 113, 1, 0, 0, 0, 0, 115, 1, 0, 0, 0, 0, 117, 1,
		0, 0, 0, 0, 119, 1, 0, 0, 0, 0, 121, 1, 0, 0, 0, 0, 123, 1, 0, 0, 0, 0,
		125, 1, 0, 0, 0, 0, 127, 1, 0, 0, 0, 0, 129, 1, 0, 0, 0, 0, 131, 1, 0,
		0, 0, 0, 133, 1, 0, 0, 0, 0, 135, 1, 0, 0, 0, 0, 137, 1, 0, 0, 0, 0, 139,
		1, 0, 0, 0, 0, 141, 1, 0, 0, 0, 0, 143, 1, 0, 0, 0, 0, 145, 1, 0, 0, 0,
		0, 147, 1, 0, 0, 0, 0, 149, 1, 0, 0, 0, 0, 151, 1, 0, 0, 0, 0, 153, 1,
		0, 0, 0, 0, 155, 1, 0, 0, 0, 0, 157, 1, 0, 0, 0, 0, 159, 1, 0, 0, 0, 0,
		161, 1, 0, 0, 0, 0, 163, 1, 0, 0, 0, 0, 165, 1, 0, 0, 0, 0, 167, 1, 0,
		0, 0, 0, 169, 1, 0, 0, 0, 0, 171, 1, 0, 0, 0, 0, 173, 1, 0, 0, 0, 0, 175,
		1, 0, 0, 0, 0, 177, 1, 0, 0, 0, 0, 179, 1, 0, 0, 0, 0, 181, 1, 0, 0, 0,
		0, 183, 1, 0, 0, 0, 0, 185, 1, 0, 0, 0, 0, 187, 1, 0, 0, 0, 0, 189, 1,
		0, 0, 0, 0, 191, 1, 0, 0, 0, 0, 193, 1, 0, 0, 0, 0, 195, 1, 0, 0, 0, 0,
		197, 1, 0, 0, 0, 0, 199, 1, 0, 0, 0, 0, 201, 1, 0, 0, 0, 0, 203, 1, 0,
		0, 0, 0, 205, 1, 0, 0, 0, 0, 207, 1, 0, 0, 0, 0, 209, 1, 0, 0, 0, 0, 211,
		1, 0, 0, 0, 0, 213, 1, 0, 0, 0, 0, 215, 1, 0, 0, 0, 0, 217, 1, 0, 0, 0,
		0, 219, 1, 0, 0, 0, 0, 221, 1, 0, 0, 0, 0, 223, 1, 0, 0, 0, 0, 225, 1,
		0, 0, 0, 0, 227, 1, 0, 0, 0, 0, 229, 1, 0, 0, 0, 0, 231, 1, 0, 0, 0, 0,
		233, 1, 0, 0, 0, 0, 235, 1, 0, 0, 0, 0, 237, 1, 0, 0, 0, 0, 239, 1, 0,
		0, 0, 0, 241, 1, 0, 0, 0, 0, 243, 1, 0, 0, 0, 0, 245, 1, 0, 0, 0, 1, 295,
		1, 0, 0, 0, 3, 305, 1, 0, 0, 0, 5, 319, 1, 0, 0, 0, 7, 330, 1, 0, 0, 0,
		9, 346, 1, 0, 0, 0, 11, 348, 1, 0, 0, 0, 13, 350, 1, 0, 0, 0, 15, 352,
		1, 0, 0, 0, 17, 354, 1, 0, 0, 0, 19, 357, 1, 0, 0, 0, 21, 360, 1, 0, 0,
		0, 23, 362, 1, 0, 0, 0, 25, 364, 1, 0, 0, 0, 27, 366, 1, 0, 0, 0, 29, 368,
		1, 0, 0, 0, 31, 370, 1, 0, 0, 0, 33, 374, 1, 0, 0, 0, 35, 376, 1, 0, 0,
		0, 37, 379, 1, 0, 0, 0, 39, 382, 1, 0, 0, 0, 41, 384, 1, 0, 0, 0, 43, 386,
		1, 0, 0, 0, 45, 388, 1, 0, 0, 0, 47, 390, 1, 0, 0, 0, 49, 392, 1, 0, 0,
		0, 51, 394, 1, 0, 0, 0, 53, 396, 1, 0, 0, 0, 55, 399, 1, 0, 0, 0, 57, 402,
		1, 0, 0, 0, 59, 404, 1, 0, 0, 0, 61, 407, 1, 0, 0, 0, 63, 410, 1, 0, 0,
		0, 65, 414, 1, 0, 0, 0, 67, 416, 1, 0, 0, 0, 69, 418, 1, 0, 0, 0, 71, 421,
		1, 0, 0, 0, 73, 424, 1, 0, 0, 0, 75, 427, 1, 0, 0, 0, 77, 430, 1, 0, 0,
		0, 79, 434, 1, 0, 0, 0, 81, 438, 1, 0, 0, 0, 83, 440, 1, 0, 0, 0, 85, 442,
		1, 0, 0, 0, 87, 444, 1, 0, 0, 0, 89, 447, 1, 0, 0, 0, 91, 450, 1, 0, 0,
		0, 93, 453, 1, 0, 0, 0, 95, 456, 1, 0, 0, 0, 97, 459, 1, 0, 0, 0, 99, 462,
		1, 0, 0, 0, 101, 465, 1, 0, 0, 0, 103, 469, 1, 0, 0, 0, 105, 473, 1, 0,
		0, 0, 107, 478, 1, 0, 0, 0, 109, 481, 1, 0, 0, 0, 111, 484, 1, 0, 0, 0,
		113, 487, 1, 0, 0, 0, 115, 491, 1, 0, 0, 0, 117, 494, 1, 0, 0, 0, 119,
		508, 1, 0, 0, 0, 121, 537, 1, 0, 0, 0, 123, 539, 1, 0, 0, 0, 125, 548,
		1, 0, 0, 0, 127, 556, 1, 0, 0, 0, 129, 565, 1, 0, 0, 0, 131, 574, 1, 0,
		0, 0, 133, 585, 1, 0, 0, 0, 135, 596, 1, 0, 0, 0, 137, 607, 1, 0, 0, 0,
		139, 610, 1, 0, 0, 0, 141, 616, 1, 0, 0, 0, 143, 619, 1, 0, 0, 0, 145,
		630, 1, 0, 0, 0, 147, 637, 1, 0, 0, 0, 149, 642, 1, 0, 0, 0, 151, 647,
		1, 0, 0, 0, 153, 651, 1, 0, 0, 0, 155, 655, 1, 0, 0, 0, 157, 661, 1, 0,
		0, 0, 159, 669, 1, 0, 0, 0, 161, 676, 1, 0, 0, 0, 163, 681, 1, 0, 0, 0,
		165, 690, 1, 0, 0, 0, 167, 694, 1, 0, 0, 0, 169, 701, 1, 0, 0, 0, 171,
		707, 1, 0, 0, 0, 173, 716, 1, 0, 0, 0, 175, 725, 1, 0, 0, 0, 177, 730,
		1, 0, 0, 0, 179, 735, 1, 0, 0, 0, 181, 743, 1, 0, 0, 0, 183, 746, 1, 0,
		0, 0, 185, 752, 1, 0, 0, 0, 187, 759, 1, 0, 0, 0, 189, 762, 1, 0, 0, 0,
		191, 766, 1, 0, 0, 0, 193, 769, 1, 0, 0, 0, 195, 774, 1, 0, 0, 0, 197,
		780, 1, 0, 0, 0, 199, 785, 1, 0, 0, 0, 201, 793, 1, 0, 0, 0, 203, 799,
		1, 0, 0, 0, 205, 805, 1, 0, 0, 0, 207, 812, 1, 0, 0, 0, 209, 819, 1, 0,
		0, 0, 211, 825, 1, 0, 0, 0, 213, 831, 1, 0, 0, 0, 215, 844, 1, 0, 0, 0,
		217, 850, 1, 0, 0, 0, 219, 860, 1, 0, 0, 0, 221, 869, 1, 0, 0, 0, 223,
		881, 1, 0, 0, 0, 225, 891, 1, 0, 0, 0, 227, 903, 1, 0, 0, 0, 229, 912,
		1, 0, 0, 0, 231, 920, 1, 0, 0, 0, 233, 943, 1, 0, 0, 0, 235, 947, 1, 0,
		0, 0, 237, 959, 1, 0, 0, 0, 239, 965, 1, 0, 0, 0, 241, 969, 1, 0, 0, 0,
		243, 986, 1, 0, 0, 0, 245, 1008, 1, 0, 0, 0, 247, 1016, 1, 0, 0, 0, 249,
		1022, 1, 0, 0, 0, 251, 1029, 1, 0, 0, 0, 253, 1033, 1, 0, 0, 0, 255, 1035,
		1, 0, 0, 0, 257, 1055, 1, 0, 0, 0, 259, 1057, 1, 0, 0, 0, 261, 1066, 1,
		0, 0, 0, 263, 1068, 1, 0, 0, 0, 265, 1072, 1, 0, 0, 0, 267, 1074, 1, 0,
		0, 0, 269, 1077, 1, 0, 0, 0, 271, 1087, 1, 0, 0, 0, 273, 1089, 1, 0, 0,
		0, 275, 1103, 1, 0, 0, 0, 277, 1109, 1, 0, 0, 0, 279, 1112, 1, 0, 0, 0,
		281, 1115, 1, 0, 0, 0, 283, 1118, 1, 0, 0, 0, 285, 1121, 1, 0, 0, 0, 287,
		1133, 1, 0, 0, 0, 289, 1145, 1, 0, 0, 0, 291, 1149, 1, 0, 0, 0, 293, 1151,
		1, 0, 0, 0, 295, 296, 4, 0, 0, 0, 296, 297, 5, 35, 0, 0, 297, 298, 5, 33,
		0, 0, 298, 302, 1, 0, 0, 0, 299, 301, 8, 0, 0, 0, 300, 299, 1, 0, 0, 0,
		301, 304, 1, 0, 0, 0, 302, 300, 1, 0, 0, 0, 302, 303, 1, 0, 0, 0, 303,
		2, 1, 0, 0, 0, 304, 302, 1, 0, 0, 0, 305, 306, 5, 47, 0, 0, 306, 307, 5,
		42, 0, 0, 307, 311, 1, 0, 0, 0, 308, 310, 9, 0, 0, 0, 309, 308, 1, 0, 0,
		0, 310, 313, 1, 0, 0, 0, 311, 312, 1, 0, 0, 0, 311, 309, 1, 0, 0, 0, 312,
		314, 1, 0, 0, 0, 313, 311, 1, 0, 0, 0, 314, 315, 5, 42, 0, 0, 315, 316,
		5, 47, 0, 0, 316, 317, 1, 0, 0, 0, 317, 318, 6, 1, 0, 0, 318, 4, 1, 0,
		0, 0, 319, 320, 5, 47, 0, 0, 320, 321, 5, 47, 0, 0, 321, 325, 1, 0, 0,
		0, 322, 324, 8, 0, 0, 0, 323, 322, 1, 0, 0, 0, 324, 327, 1, 0, 0, 0, 325,
		323, 1, 0, 0, 0, 325, 326, 1, 0, 0, 0, 326, 328, 1, 0, 0, 0, 327, 325,
		1, 0, 0, 0, 328, 329, 6, 2, 0, 0, 329, 6, 1, 0, 0, 0, 330, 331, 5, 47,
		0, 0, 331, 335, 3, 287, 143, 0, 332, 334, 3, 289, 144, 0, 333, 332, 1,
		0, 0, 0, 334, 337, 1, 0, 0, 0, 335, 333, 1, 0, 0, 0, 335, 336, 1, 0, 0,
		0, 336, 338, 1, 0, 0, 0, 337, 335, 1, 0, 0, 0, 338, 339, 4, 3, 1, 0, 339,
		343, 5, 47, 0, 0, 340, 342, 3, 275, 137, 0, 341, 340, 1, 0, 0, 0, 342,
		345, 1, 0, 0, 0, 343, 341, 1, 0, 0, 0, 343, 344, 1, 0, 0, 0, 344, 8, 1,
		0, 0, 0, 345, 343, 1, 0, 0, 0, 346, 347, 5, 91, 0, 0, 347, 10, 1, 0, 0,
		0, 348, 349, 5, 93, 0, 0, 349, 12, 1, 0, 0, 0, 350, 351, 5, 40, 0, 0, 351,
		14, 1, 0, 0, 0, 352, 353, 5, 41, 0, 0, 353, 16, 1, 0, 0, 0, 354, 355, 5,
		123, 0, 0, 355, 356, 6, 8, 1, 0, 356, 18, 1, 0, 0, 0, 357, 358, 5, 125,
		0, 0, 358, 359, 6, 9, 2, 0, 359, 20, 1, 0, 0, 0, 360, 361, 5, 59, 0, 0,
		361, 22, 1, 0, 0, 0, 362, 363, 5, 44, 0, 0, 363, 24, 1, 0, 0, 0, 364, 365,
		5, 61, 0, 0, 365, 26, 1, 0, 0, 0, 366, 367, 5, 63, 0, 0, 367, 28, 1, 0,
		0, 0, 368, 369, 5, 58, 0, 0, 369, 30, 1, 0, 0, 0, 370, 371, 5, 46, 0, 0,
		371, 372, 5, 46, 0, 0, 372, 373, 5, 46, 0, 0, 373, 32, 1, 0, 0, 0, 374,
		375, 5, 46, 0, 0, 375, 34, 1, 0, 0, 0, 376, 377, 5, 43, 0, 0, 377, 378,
		5, 43, 0, 0, 378, 36, 1, 0, 0, 0, 379, 380, 5, 45, 0, 0, 380, 381, 5, 45,
		0, 0, 381, 38, 1, 0, 0, 0, 382, 383, 5, 43, 0, 0, 383, 40, 1, 0, 0, 0,
		384, 385, 5, 45, 0, 0, 385, 42, 1, 0, 0, 0, 386, 387, 5, 126, 0, 0, 387,
		44, 1, 0, 0, 0, 388, 389, 5, 33, 0, 0, 389, 46, 1, 0, 0, 0, 390, 391, 5,
		42, 0, 0, 391, 48, 1, 0, 0, 0, 392, 393, 5, 47, 0, 0, 393, 50, 1, 0, 0,
		0, 394, 395, 5, 37, 0, 0, 395, 52, 1, 0, 0, 0, 396, 397, 5, 42, 0, 0, 397,
		398, 5, 42, 0, 0, 398, 54, 1, 0, 0, 0, 399, 400, 5, 63, 0, 0, 400, 401,
		5, 63, 0, 0, 401, 56, 1, 0, 0, 0, 402, 403, 5, 35, 0, 0, 403, 58, 1, 0,
		0, 0, 404, 405, 5, 62, 0, 0, 405, 406, 5, 62, 0, 0, 406, 60, 1, 0, 0, 0,
		407, 408, 5, 60, 0, 0, 408, 409, 5, 60, 0, 0, 409, 62, 1, 0, 0, 0, 410,
		411, 5, 62, 0, 0, 411, 412, 5, 62, 0, 0, 412, 413, 5, 62, 0, 0, 413, 64,
		1, 0, 0, 0, 414, 415, 5, 60, 0, 0, 415, 66, 1, 0, 0, 0, 416, 417, 5, 62,
		0, 0, 417, 68, 1, 0, 0, 0, 418, 419, 5, 60, 0, 0, 419, 420, 5, 61, 0, 0,
		420, 70, 1, 0, 0, 0, 421, 422, 5, 62, 0, 0, 422, 423, 5, 61, 0, 0, 423,
		72, 1, 0, 0, 0, 424, 425, 5, 61, 0, 0, 425, 426, 5, 61, 0, 0, 426, 74,
		1, 0, 0, 0, 427, 428, 5, 33, 0, 0, 428, 429, 5, 61, 0, 0, 429, 76, 1, 0,
		0, 0, 430, 431, 5, 61, 0, 0, 431, 432, 5, 61, 0, 0, 432, 433, 5, 61, 0,
		0, 433, 78, 1, 0, 0, 0, 434, 435, 5, 33, 0, 0, 435, 436, 5, 61, 0, 0, 436,
		437, 5, 61, 0, 0, 437, 80, 1, 0, 0, 0, 438, 439, 5, 38, 0, 0, 439, 82,
		1, 0, 0, 0, 440, 441, 5, 94, 0, 0, 441, 84, 1, 0, 0, 0, 442, 443, 5, 124,
		0, 0, 443, 86, 1, 0, 0, 0, 444, 445, 5, 38, 0, 0, 445, 446, 5, 38, 0, 0,
		446, 88, 1, 0, 0, 0, 447, 448, 5, 124, 0, 0, 448, 449, 5, 124, 0, 0, 449,
		90, 1, 0, 0, 0, 450, 451, 5, 42, 0, 0, 451, 452, 5, 61, 0, 0, 452, 92,
		1, 0, 0, 0, 453, 454, 5, 47, 0, 0, 454, 455, 5, 61, 0, 0, 455, 94, 1, 0,
		0, 0, 456, 457, 5, 37, 0, 0, 457, 458, 5, 61, 0, 0, 458, 96, 1, 0, 0, 0,
		459, 460, 5, 43, 0, 0, 460, 461, 5, 61, 0, 0, 461, 98, 1, 0, 0, 0, 462,
		463, 5, 45, 0, 0, 463, 464, 5, 61, 0, 0, 464, 100, 1, 0, 0, 0, 465, 466,
		5, 60, 0, 0, 466, 467, 5, 60, 0, 0, 467, 468, 5, 61, 0, 0, 468, 102, 1,
		0, 0, 0, 469, 470, 5, 62, 0, 0, 470, 471, 5, 62, 0, 0, 471, 472, 5, 61,
		0, 0, 472, 104, 1, 0, 0, 0, 473, 474, 5, 62, 0, 0, 474, 475, 5, 62, 0,
		0, 475, 476, 5, 62, 0, 0, 476, 477, 5, 61, 0, 0, 477, 106, 1, 0, 0, 0,
		478, 479, 5, 38, 0, 0, 479, 480, 5, 61, 0, 0, 480, 108, 1, 0, 0, 0, 481,
		482, 5, 94, 0, 0, 482, 483, 5, 61, 0, 0, 483, 110, 1, 0, 0, 0, 484, 485,
		5, 124, 0, 0, 485, 486, 5, 61, 0, 0, 486, 112, 1, 0, 0, 0, 487, 488, 5,
		42, 0, 0, 488, 489, 5, 42, 0, 0, 489, 490, 5, 61, 0, 0, 490, 114, 1, 0,
		0, 0, 491, 492, 5, 61, 0, 0, 492, 493, 5, 62, 0, 0, 493, 116, 1, 0, 0,
		0, 494, 495, 5, 110, 0, 0, 495, 496, 5, 117, 0, 0, 496, 497, 5, 108, 0,
		0, 497, 498, 5, 108, 0, 0, 498, 118, 1, 0, 0, 0, 499, 500, 5, 116, 0, 0,
		500, 501, 5, 114, 0, 0, 501, 502, 5, 117, 0, 0, 502, 509, 5, 101, 0, 0,
		503, 504, 5, 102, 0, 0, 504, 505, 5, 97, 0, 0, 505, 506, 5, 108, 0, 0,
		506, 507, 5, 115, 0, 0, 507, 509, 5, 101, 0, 0, 508, 499, 1, 0, 0, 0, 508,
		503, 1, 0, 0, 0, 509, 120, 1, 0, 0, 0, 510, 511, 3, 271, 135, 0, 511, 512,
		5, 46, 0, 0, 512, 516, 7, 1, 0, 0, 513, 515, 7, 2, 0, 0, 514, 513, 1, 0,
		0, 0, 515, 518, 1, 0, 0, 0, 516, 514, 1, 0, 0, 0, 516, 517, 1, 0, 0, 0,
		517, 520, 1, 0, 0, 0, 518, 516, 1, 0, 0, 0, 519, 521, 3, 273, 136, 0, 520,
		519, 1, 0, 0, 0, 520, 521, 1, 0, 0, 0, 521, 538, 1, 0, 0, 0, 522, 523,
		5, 46, 0, 0, 523, 527, 7, 1, 0, 0, 524, 526, 7, 2, 0, 0, 525, 524, 1, 0,
		0, 0, 526, 529, 1, 0, 0, 0, 527, 525, 1, 0, 0, 0, 527, 528, 1, 0, 0, 0,
		528, 531, 1, 0, 0, 0, 529, 527, 1, 0, 0, 0, 530, 532, 3, 273, 136, 0, 531,
		530, 1, 0, 0, 0, 531, 532, 1, 0, 0, 0, 532, 538, 1, 0, 0, 0, 533, 535,
		3, 271, 135, 0, 534, 536, 3, 273, 136, 0, 535, 534, 1, 0, 0, 0, 535, 536,
		1, 0, 0, 0, 536, 538, 1, 0, 0, 0, 537, 510, 1, 0, 0, 0, 537, 522, 1, 0,
		0, 0, 537, 533, 1, 0, 0, 0, 538, 122, 1, 0, 0, 0, 539, 540, 5, 48, 0, 0,
		540, 541, 7, 3, 0, 0, 541, 545, 7, 4, 0, 0, 542, 544, 3, 269, 134, 0, 543,
		542, 1, 0, 0, 0, 544, 547, 1, 0, 0, 0, 545, 543, 1, 0, 0, 0, 545, 546,
		1, 0, 0, 0, 546, 124, 1, 0, 0, 0, 547, 545, 1, 0, 0, 0, 548, 550, 5, 48,
		0, 0, 549, 551, 7, 5, 0, 0, 550, 549, 1, 0, 0, 0, 551, 552, 1, 0, 0, 0,
		552, 550, 1, 0, 0, 0, 552, 553, 1, 0, 0, 0, 553, 554, 1, 0, 0, 0, 554,
		555, 4, 62, 2, 0, 555, 126, 1, 0, 0, 0, 556, 557, 5, 48, 0, 0, 557, 558,
		7, 6, 0, 0, 558, 562, 7, 5, 0, 0, 559, 561, 7, 7, 0, 0, 560, 559, 1, 0,
		0, 0, 561, 564, 1, 0, 0, 0, 562, 560, 1, 0, 0, 0, 562, 563, 1, 0, 0, 0,
		563, 128, 1, 0, 0, 0, 564, 562, 1, 0, 0, 0, 565, 566, 5, 48, 0, 0, 566,
		567, 7, 8, 0, 0, 567, 571, 7, 9, 0, 0, 568, 570, 7, 10, 0, 0, 569, 568,
		1, 0, 0, 0, 570, 573, 1, 0, 0, 0, 571, 569, 1, 0, 0, 0, 571, 572, 1, 0,
		0, 0, 572, 130, 1, 0, 0, 0, 573, 571, 1, 0, 0, 0, 574, 575, 5, 48, 0, 0,
		575, 576, 7, 3, 0, 0, 576, 580, 7, 4, 0, 0, 577, 579, 3, 269, 134, 0, 578,
		577, 1, 0, 0, 0, 579, 582, 1, 0, 0, 0, 580, 578, 1, 0, 0, 0, 580, 581,
		1, 0, 0, 0, 581, 583, 1, 0, 0, 0, 582, 580, 1, 0, 0, 0, 583, 584, 5, 110,
		0, 0, 584, 132, 1, 0, 0, 0, 585, 586, 5, 48, 0, 0, 586, 587, 7, 6, 0, 0,
		587, 591, 7, 5, 0, 0, 588, 590, 7, 7, 0, 0, 589, 588, 1, 0, 0, 0, 590,
		593, 1, 0, 0, 0, 591, 589, 1, 0, 0, 0, 591, 592, 1, 0, 0, 0, 592, 594,
		1, 0, 0, 0, 593, 591, 1, 0, 0, 0, 594, 595, 5, 110, 0, 0, 595, 134, 1,
		0, 0, 0, 596, 597, 5, 48, 0, 0, 597, 598, 7, 8, 0, 0, 598, 602, 7, 9, 0,
		0, 599, 601, 7, 10, 0, 0, 600, 599, 1, 0, 0, 0, 601, 604, 1, 0, 0, 0, 602,
		600, 1, 0, 0, 0, 602, 603, 1, 0, 0, 0, 603, 605, 1, 0, 0, 0, 604, 602,
		1, 0, 0, 0, 605, 606, 5, 110, 0, 0, 606, 136, 1, 0, 0, 0, 607, 608, 3,
		271, 135, 0, 608, 609, 5, 110, 0, 0, 609, 138, 1, 0, 0, 0, 610, 611, 5,
		98, 0, 0, 611, 612, 5, 114, 0, 0, 612, 613, 5, 101, 0, 0, 613, 614, 5,
		97, 0, 0, 614, 615, 5, 107, 0, 0, 615, 140, 1, 0, 0, 0, 616, 617, 5, 100,
		0, 0, 617, 618, 5, 111, 0, 0, 618, 142, 1, 0, 0, 0, 619, 620, 5, 105, 0,
		0, 620, 621, 5, 110, 0, 0, 621, 622, 5, 115, 0, 0, 622, 623, 5, 116, 0,
		0, 623, 624, 5, 97, 0, 0, 624, 625, 5, 110, 0, 0, 625, 626, 5, 99, 0, 0,
		626, 627, 5, 101, 0, 0, 627, 628, 5, 111, 0, 0, 628, 629, 5, 102, 0, 0,
		629, 144, 1, 0, 0, 0, 630, 631, 5, 116, 0, 0, 631, 632, 5, 121, 0, 0, 632,
		633, 5, 112, 0, 0, 633, 634, 5, 101, 0, 0, 634, 635, 5, 111, 0, 0, 635,
		636, 5, 102, 0, 0, 636, 146, 1, 0, 0, 0, 637, 638, 5, 99, 0, 0, 638, 639,
		5, 97, 0, 0, 639, 640, 5, 115, 0, 0, 640, 641, 5, 101, 0, 0, 641, 148,
		1, 0, 0, 0, 642, 643, 5, 101, 0, 0, 643, 644, 5, 108, 0, 0, 644, 645, 5,
		115, 0, 0, 645, 646, 5, 101, 0, 0, 646, 150, 1, 0, 0, 0, 647, 648, 5, 110,
		0, 0, 648, 649, 5, 101, 0, 0, 649, 650, 5, 119, 0, 0, 650, 152, 1, 0, 0,
		0, 651, 652, 5, 118, 0, 0, 652, 653, 5, 97, 0, 0, 653, 654, 5, 114, 0,
		0, 654, 154, 1, 0, 0, 0, 655, 656, 5, 99, 0, 0, 656, 657, 5, 97, 0, 0,
		657, 658, 5, 116, 0, 0, 658, 659, 5, 99, 0, 0, 659, 660, 5, 104, 0, 0,
		660, 156, 1, 0, 0, 0, 661, 662, 5, 102, 0, 0, 662, 663, 5, 105, 0, 0, 663,
		664, 5, 110, 0, 0, 664, 665, 5, 97, 0, 0, 665, 666, 5, 108, 0, 0, 666,
		667, 5, 108, 0, 0, 667, 668, 5, 121, 0, 0, 668, 158, 1, 0, 0, 0, 669, 670,
		5, 114, 0, 0, 670, 671, 5, 101, 0, 0, 671, 672, 5, 116, 0, 0, 672, 673,
		5, 117, 0, 0, 673, 674, 5, 114, 0, 0, 674, 675, 5, 110, 0, 0, 675, 160,
		1, 0, 0, 0, 676, 677, 5, 118, 0, 0, 677, 678, 5, 111, 0, 0, 678, 679, 5,
		105, 0, 0, 679, 680, 5, 100, 0, 0, 680, 162, 1, 0, 0, 0, 681, 682, 5, 99,
		0, 0, 682, 683, 5, 111, 0, 0, 683, 684, 5, 110, 0, 0, 684, 685, 5, 116,
		0, 0, 685, 686, 5, 105, 0, 0, 686, 687, 5, 110, 0, 0, 687, 688, 5, 117,
		0, 0, 688, 689, 5, 101, 0, 0, 689, 164, 1, 0, 0, 0, 690, 691, 5, 102, 0,
		0, 691, 692, 5, 111, 0, 0, 692, 693, 5, 114, 0, 0, 693, 166, 1, 0, 0, 0,
		694, 695, 5, 115, 0, 0, 695, 696, 5, 119, 0, 0, 696, 697, 5, 105, 0, 0,
		697, 698, 5, 116, 0, 0, 698, 699, 5, 99, 0, 0, 699, 700, 5, 104, 0, 0,
		700, 168, 1, 0, 0, 0, 701, 702, 5, 119, 0, 0, 702, 703, 5, 104, 0, 0, 703,
		704, 5, 105, 0, 0, 704, 705, 5, 108, 0, 0, 705, 706, 5, 101, 0, 0, 706,
		170, 1, 0, 0, 0, 707, 708, 5, 100, 0, 0, 708, 709, 5, 101, 0, 0, 709, 710,
		5, 98, 0, 0, 710, 711, 5, 117, 0, 0, 711, 712, 5, 103, 0, 0, 712, 713,
		5, 103, 0, 0, 713, 714, 5, 101, 0, 0, 714, 715, 5, 114, 0, 0, 715, 172,
		1, 0, 0, 0, 716, 717, 5, 102, 0, 0, 717, 718, 5, 117, 0, 0, 718, 719, 5,
		110, 0, 0, 719, 720, 5, 99, 0, 0, 720, 721, 5, 116, 0, 0, 721, 722, 5,
		105, 0, 0, 722, 723, 5, 111, 0, 0, 723, 724, 5, 110, 0, 0, 724, 174, 1,
		0, 0, 0, 725, 726, 5, 116, 0, 0, 726, 727, 5, 104, 0, 0, 727, 728, 5, 105,
		0, 0, 728, 729, 5, 115, 0, 0, 729, 176, 1, 0, 0, 0, 730, 731, 5, 119, 0,
		0, 731, 732, 5, 105, 0, 0, 732, 733, 5, 116, 0, 0, 733, 734, 5, 104, 0,
		0, 734, 178, 1, 0, 0, 0, 735, 736, 5, 100, 0, 0, 736, 737, 5, 101, 0, 0,
		737, 738, 5, 102, 0, 0, 738, 739, 5, 97, 0, 0, 739, 740, 5, 117, 0, 0,
		740, 741, 5, 108, 0, 0, 741, 742, 5, 116, 0, 0, 742, 180, 1, 0, 0, 0, 743,
		744, 5, 105, 0, 0, 744, 745, 5, 102, 0, 0, 745, 182, 1, 0, 0, 0, 746, 747,
		5, 116, 0, 0, 747, 748, 5, 104, 0, 0, 748, 749, 5, 114, 0, 0, 749, 750,
		5, 111, 0, 0, 750, 751, 5, 119, 0, 0, 751, 184, 1, 0, 0, 0, 752, 753, 5,
		100, 0, 0, 753, 754, 5, 101, 0, 0, 754, 755, 5, 108, 0, 0, 755, 756, 5,
		101, 0, 0, 756, 757, 5, 116, 0, 0, 757, 758, 5, 101, 0, 0, 758, 186, 1,
		0, 0, 0, 759, 760, 5, 105, 0, 0, 760, 761, 5, 110, 0, 0, 761, 188, 1, 0,
		0, 0, 762, 763, 5, 116, 0, 0, 763, 764, 5, 114, 0, 0, 764, 765, 5, 121,
		0, 0, 765, 190, 1, 0, 0, 0, 766, 767, 5, 97, 0, 0, 767, 768, 5, 115, 0,
		0, 768, 192, 1, 0, 0, 0, 769, 770, 5, 102, 0, 0, 770, 771, 5, 114, 0, 0,
		771, 772, 5, 111, 0, 0, 772, 773, 5, 109, 0, 0, 773, 194, 1, 0, 0, 0, 774,
		775, 5, 99, 0, 0, 775, 776, 5, 108, 0, 0, 776, 777, 5, 97, 0, 0, 777, 778,
		5, 115, 0, 0, 778, 779, 5, 115, 0, 0, 779, 196, 1, 0, 0, 0, 780, 781, 5,
		101, 0, 0, 781, 782, 5, 110, 0, 0, 782, 783, 5, 117, 0, 0, 783, 784, 5,
		109, 0, 0, 784, 198, 1, 0, 0, 0, 785, 786, 5, 101, 0, 0, 786, 787, 5, 120,
		0, 0, 787, 788, 5, 116, 0, 0, 788, 789, 5, 101, 0, 0, 789, 790, 5, 110,
		0, 0, 790, 791, 5, 100, 0, 0, 791, 792, 5, 115, 0, 0, 792, 200, 1, 0, 0,
		0, 793, 794, 5, 115, 0, 0, 794, 795, 5, 117, 0, 0, 795, 796, 5, 112, 0,
		0, 796, 797, 5, 101, 0, 0, 797, 798, 5, 114, 0, 0, 798, 202, 1, 0, 0, 0,
		799, 800, 5, 99, 0, 0, 800, 801, 5, 111, 0, 0, 801, 802, 5, 110, 0, 0,
		802, 803, 5, 115, 0, 0, 803, 804, 5, 116, 0, 0, 804, 204, 1, 0, 0, 0, 805,
		806, 5, 101, 0, 0, 806, 807, 5, 120, 0, 0, 807, 808, 5, 112, 0, 0, 808,
		809, 5, 111, 0, 0, 809, 810, 5, 114, 0, 0, 810, 811, 5, 116, 0, 0, 811,
		206, 1, 0, 0, 0, 812, 813, 5, 105, 0, 0, 813, 814, 5, 109, 0, 0, 814, 815,
		5, 112, 0, 0, 815, 816, 5, 111, 0, 0, 816, 817, 5, 114, 0, 0, 817, 818,
		5, 116, 0, 0, 818, 208, 1, 0, 0, 0, 819, 820, 5, 97, 0, 0, 820, 821, 5,
		115, 0, 0, 821, 822, 5, 121, 0, 0, 822, 823, 5, 110, 0, 0, 823, 824, 5,
		99, 0, 0, 824, 210, 1, 0, 0, 0, 825, 826, 5, 97, 0, 0, 826, 827, 5, 119,
		0, 0, 827, 828, 5, 97, 0, 0, 828, 829, 5, 105, 0, 0, 829, 830, 5, 116,
		0, 0, 830, 212, 1, 0, 0, 0, 831, 832, 5, 105, 0, 0, 832, 833, 5, 109, 0,
		0, 833, 834, 5, 112, 0, 0, 834, 835, 5, 108, 0, 0, 835, 836, 5, 101, 0,
		0, 836, 837, 5, 109, 0, 0, 837, 838, 5, 101, 0, 0, 838, 839, 5, 110, 0,
		0, 839, 840, 5, 116, 0, 0, 840, 841, 5, 115, 0, 0, 841, 842, 1, 0, 0, 0,
		842, 843, 4, 106, 3, 0, 843, 214, 1, 0, 0, 0, 844, 845, 5, 108, 0, 0, 845,
		846, 5, 101, 0, 0, 846, 847, 5, 116, 0, 0, 847, 848, 1, 0, 0, 0, 848, 849,
		4, 107, 4, 0, 849, 216, 1, 0, 0, 0, 850, 851, 5, 112, 0, 0, 851, 852, 5,
		114, 0, 0, 852, 853, 5, 105, 0, 0, 853, 854, 5, 118, 0, 0, 854, 855, 5,
		97, 0, 0, 855, 856, 5, 116, 0, 0, 856, 857, 5, 101, 0, 0, 857, 858, 1,
		0, 0, 0, 858, 859, 4, 108, 5, 0, 859, 218, 1, 0, 0, 0, 860, 861, 5, 112,
		0, 0, 861, 862, 5, 117, 0, 0, 862, 863, 5, 98, 0, 0, 863, 864, 5, 108,
		0, 0, 864, 865, 5, 105, 0, 0, 865, 866, 5, 99, 0, 0, 866, 867, 1, 0, 0,
		0, 867, 868, 4, 109, 6, 0, 868, 220, 1, 0, 0, 0, 869, 870, 5, 105, 0, 0,
		870, 871, 5, 110, 0, 0, 871, 872, 5, 116, 0, 0, 872, 873, 5, 101, 0, 0,
		873, 874, 5, 114, 0, 0, 874, 875, 5, 102, 0, 0, 875, 876, 5, 97, 0, 0,
		876, 877, 5, 99, 0, 0, 877, 878, 5, 101, 0, 0, 878, 879, 1, 0, 0, 0, 879,
		880, 4, 110, 7, 0, 880, 222, 1, 0, 0, 0, 881, 882, 5, 112, 0, 0, 882, 883,
		5, 97, 0, 0, 883, 884, 5, 99, 0, 0, 884, 885, 5, 107, 0, 0, 885, 886, 5,
		97, 0, 0, 886, 887, 5, 103, 0, 0, 887, 888, 5, 101, 0, 0, 888, 889, 1,
		0, 0, 0, 889, 890, 4, 111, 8, 0, 890, 224, 1, 0, 0, 0, 891, 892, 5, 112,
		0, 0, 892, 893, 5, 114, 0, 0, 893, 894, 5, 111, 0, 0, 894, 895, 5, 116,
		0, 0, 895, 896, 5, 101, 0, 0, 896, 897, 5, 99, 0, 0, 897, 898, 5, 116,
		0, 0, 898, 899, 5, 101, 0, 0, 899, 900, 5, 100, 0, 0, 900, 901, 1, 0, 0,
		0, 901, 902, 4, 112, 9, 0, 902, 226, 1, 0, 0, 0, 903, 904, 5, 115, 0, 0,
		904, 905, 5, 116, 0, 0, 905, 906, 5, 97, 0, 0, 906, 907, 5, 116, 0, 0,
		907, 908, 5, 105, 0, 0, 908, 909, 5, 99, 0, 0, 909, 910, 1, 0, 0, 0, 910,
		911, 4, 113, 10, 0, 911, 228, 1, 0, 0, 0, 912, 913, 5, 121, 0, 0, 913,
		914, 5, 105, 0, 0, 914, 915, 5, 101, 0, 0, 915, 916, 5, 108, 0, 0, 916,
		917, 5, 100, 0, 0, 917, 918, 1, 0, 0, 0, 918, 919, 4, 114, 11, 0, 919,
		230, 1, 0, 0, 0, 920, 924, 3, 277, 138, 0, 921, 923, 3, 275, 137, 0, 922,
		921, 1, 0, 0, 0, 923, 926, 1, 0, 0, 0, 924, 922, 1, 0, 0, 0, 924, 925,
		1, 0, 0, 0, 925, 232, 1, 0, 0, 0, 926, 924, 1, 0, 0, 0, 927, 931, 5, 34,
		0, 0, 928, 930, 3, 247, 123, 0, 929, 928, 1, 0, 0, 0, 930, 933, 1, 0, 0,
		0, 931, 929, 1, 0, 0, 0, 931, 932, 1, 0, 0, 0, 932, 934, 1, 0, 0, 0, 933,
		931, 1, 0, 0, 0, 934, 944, 5, 34, 0, 0, 935, 939, 5, 39, 0, 0, 936, 938,
		3, 249, 124, 0, 937, 936, 1, 0, 0, 0, 938, 941, 1, 0, 0, 0, 939, 937, 1,
		0, 0, 0, 939, 940, 1, 0, 0, 0, 940, 942, 1, 0, 0, 0, 941, 939, 1, 0, 0,
		0, 942, 944, 5, 39, 0, 0, 943, 927, 1, 0, 0, 0, 943, 935, 1, 0, 0, 0, 944,
		945, 1, 0, 0, 0, 945, 946, 6, 116, 3, 0, 946, 234, 1, 0, 0, 0, 947, 953,
		5, 96, 0, 0, 948, 949, 5, 92, 0, 0, 949, 952, 5, 96, 0, 0, 950, 952, 8,
		11, 0, 0, 951, 948, 1, 0, 0, 0, 951, 950, 1, 0, 0, 0, 952, 955, 1, 0, 0,
		0, 953, 951, 1, 0, 0, 0, 953, 954, 1, 0, 0, 0, 954, 956, 1, 0, 0, 0, 955,
		953, 1, 0, 0, 0, 956, 957, 5, 96, 0, 0, 957, 236, 1, 0, 0, 0, 958, 960,
		7, 12, 0, 0, 959, 958, 1, 0, 0, 0, 960, 961, 1, 0, 0, 0, 961, 959, 1, 0,
		0, 0, 961, 962, 1, 0, 0, 0, 962, 963, 1, 0, 0, 0, 963, 964, 6, 118, 0,
		0, 964, 238, 1, 0, 0, 0, 965, 966, 7, 0, 0, 0, 966, 967, 1, 0, 0, 0, 967,
		968, 6, 119, 0, 0, 968, 240, 1, 0, 0, 0, 969, 970, 5, 60, 0, 0, 970, 971,
		5, 33, 0, 0, 971, 972, 5, 45, 0, 0, 972, 973, 5, 45, 0, 0, 973, 977, 1,
		0, 0, 0, 974, 976, 9, 0, 0, 0, 975, 974, 1, 0, 0, 0, 976, 979, 1, 0, 0,
		0, 977, 978, 1, 0, 0, 0, 977, 975, 1, 0, 0, 0, 978, 980, 1, 0, 0, 0, 979,
		977, 1, 0, 0, 0, 980, 981, 5, 45, 0, 0, 981, 982, 5, 45, 0, 0, 982, 983,
		5, 62, 0, 0, 983, 984, 1, 0, 0, 0, 984, 985, 6, 120, 0, 0, 985, 242, 1,
		0, 0, 0, 986, 987, 5, 60, 0, 0, 987, 988, 5, 33, 0, 0, 988, 989, 5, 91,
		0, 0, 989, 990, 5, 67, 0, 0, 990, 991, 5, 68, 0, 0, 991, 992, 5, 65, 0,
		0, 992, 993, 5, 84, 0, 0, 993, 994, 5, 65, 0, 0, 994, 995, 5, 91, 0, 0,
		995, 999, 1, 0, 0, 0, 996, 998, 9, 0, 0, 0, 997, 996, 1, 0, 0, 0, 998,
		1001, 1, 0, 0, 0, 999, 1000, 1, 0, 0, 0, 999, 997, 1, 0, 0, 0, 1000, 1002,
		1, 0, 0, 0, 1001, 999, 1, 0, 0, 0, 1002, 1003, 5, 93, 0, 0, 1003, 1004,
		5, 93, 0, 0, 1004, 1005, 5, 62, 0, 0, 1005, 1006, 1, 0, 0, 0, 1006, 1007,
		6, 121, 0, 0, 1007, 244, 1, 0, 0, 0, 1008, 1009, 9, 0, 0, 0, 1009, 1010,
		1, 0, 0, 0, 1010, 1011, 6, 122, 4, 0, 1011, 246, 1, 0, 0, 0, 1012, 1017,
		8, 13, 0, 0, 1013, 1014, 5, 92, 0, 0, 1014, 1017, 3, 251, 125, 0, 1015,
		1017, 3, 267, 133, 0, 1016, 1012, 1, 0, 0, 0, 1016, 1013, 1, 0, 0, 0, 1016,
		1015, 1, 0, 0, 0, 1017, 248, 1, 0, 0, 0, 1018, 1023, 8, 14, 0, 0, 1019,
		1020, 5, 92, 0, 0, 1020, 1023, 3, 251, 125, 0, 1021, 1023, 3, 267, 133,
		0, 1022, 1018, 1, 0, 0, 0, 1022, 1019, 1, 0, 0, 0, 1022, 1021, 1, 0, 0,
		0, 1023, 250, 1, 0, 0, 0, 1024, 1030, 3, 253, 126, 0, 1025, 1030, 5, 48,
		0, 0, 1026, 1030, 3, 255, 127, 0, 1027, 1030, 3, 257, 128, 0, 1028, 1030,
		3, 259, 129, 0, 1029, 1024, 1, 0, 0, 0, 1029, 1025, 1, 0, 0, 0, 1029, 1026,
		1, 0, 0, 0, 1029, 1027, 1, 0, 0, 0, 1029, 1028, 1, 0, 0, 0, 1030, 252,
		1, 0, 0, 0, 1031, 1034, 3, 261, 130, 0, 1032, 1034, 3, 263, 131, 0, 1033,
		1031, 1, 0, 0, 0, 1033, 1032, 1, 0, 0, 0, 1034, 254, 1, 0, 0, 0, 1035,
		1036, 5, 120, 0, 0, 1036, 1037, 3, 269, 134, 0, 1037, 1038, 3, 269, 134,
		0, 1038, 256, 1, 0, 0, 0, 1039, 1040, 5, 117, 0, 0, 1040, 1041, 3, 269,
		134, 0, 1041, 1042, 3, 269, 134, 0, 1042, 1043, 3, 269, 134, 0, 1043, 1044,
		3, 269, 134, 0, 1044, 1056, 1, 0, 0, 0, 1045, 1046, 5, 117, 0, 0, 1046,
		1047, 5, 123, 0, 0, 1047, 1049, 3, 269, 134, 0, 1048, 1050, 3, 269, 134,
		0, 1049, 1048, 1, 0, 0, 0, 1050, 1051, 1, 0, 0, 0, 1051, 1049, 1, 0, 0,
		0, 1051, 1052, 1, 0, 0, 0, 1052, 1053, 1, 0, 0, 0, 1053, 1054, 5, 125,
		0, 0, 1054, 1056, 1, 0, 0, 0, 1055, 1039, 1, 0, 0, 0, 1055, 1045, 1, 0,
		0, 0, 1056, 258, 1, 0, 0, 0, 1057, 1058, 5, 117, 0, 0, 1058, 1060, 5, 123,
		0, 0, 1059, 1061, 3, 269, 134, 0, 1060, 1059, 1, 0, 0, 0, 1061, 1062, 1,
		0, 0, 0, 1062, 1060, 1, 0, 0, 0, 1062, 1063, 1, 0, 0, 0, 1063, 1064, 1,
		0, 0, 0, 1064, 1065, 5, 125, 0, 0, 1065, 260, 1, 0, 0, 0, 1066, 1067, 7,
		15, 0, 0, 1067, 262, 1, 0, 0, 0, 1068, 1069, 8, 16, 0, 0, 1069, 264, 1,
		0, 0, 0, 1070, 1073, 3, 261, 130, 0, 1071, 1073, 7, 17, 0, 0, 1072, 1070,
		1, 0, 0, 0, 1072, 1071, 1, 0, 0, 0, 1073, 266, 1, 0, 0, 0, 1074, 1075,
		5, 92, 0, 0, 1075, 1076, 7, 0, 0, 0, 1076, 268, 1, 0, 0, 0, 1077, 1078,
		7, 18, 0, 0, 1078, 270, 1, 0, 0, 0, 1079, 1088, 5, 48, 0, 0, 1080, 1084,
		7, 19, 0, 0, 1081, 1083, 7, 2, 0, 0, 1082, 1081, 1, 0, 0, 0, 1083, 1086,
		1, 0, 0, 0, 1084, 1082, 1, 0, 0, 0, 1084, 1085, 1, 0, 0, 0, 1085, 1088,
		1, 0, 0, 0, 1086, 1084, 1, 0, 0, 0, 1087, 1079, 1, 0, 0, 0, 1087, 1080,
		1, 0, 0, 0, 1088, 272, 1, 0, 0, 0, 1089, 1091, 7, 20, 0, 0, 1090, 1092,
		7, 21, 0, 0, 1091, 1090, 1, 0, 0, 0, 1091, 1092, 1, 0, 0, 0, 1092, 1094,
		1, 0, 0, 0, 1093, 1095, 7, 2, 0, 0, 1094, 1093, 1, 0, 0, 0, 1095, 1096,
		1, 0, 0, 0, 1096, 1094, 1, 0, 0, 0, 1096, 1097, 1, 0, 0, 0, 1097, 274,
		1, 0, 0, 0, 1098, 1104, 3, 277, 138, 0, 1099, 1104, 3, 281, 140, 0, 1100,
		1104, 3, 283, 141, 0, 1101, 1104, 3, 285, 142, 0, 1102, 1104, 2, 8204,
		8205, 0, 1103, 1098, 1, 0, 0, 0, 1103, 1099, 1, 0, 0, 0, 1103, 1100, 1,
		0, 0, 0, 1103, 1101, 1, 0, 0, 0, 1103, 1102, 1, 0, 0, 0, 1104, 276, 1,
		0, 0, 0, 1105, 1110, 3, 279, 139, 0, 1106, 1110, 7, 22, 0, 0, 1107, 1108,
		5, 92, 0, 0, 1108, 1110, 3, 257, 128, 0, 1109, 1105, 1, 0, 0, 0, 1109,
		1106, 1, 0, 0, 0, 1109, 1107, 1, 0, 0, 0, 1110, 278, 1, 0, 0, 0, 1111,
		1113, 7, 23, 0, 0, 1112, 1111, 1, 0, 0, 0, 1113, 280, 1, 0, 0, 0, 1114,
		1116, 7, 24, 0, 0, 1115, 1114, 1, 0, 0, 0, 1116, 282, 1, 0, 0, 0, 1117,
		1119, 7, 25, 0, 0, 1118, 1117, 1, 0, 0, 0, 1119, 284, 1, 0, 0, 0, 1120,
		1122, 7, 26, 0, 0, 1121, 1120, 1, 0, 0, 0, 1122, 286, 1, 0, 0, 0, 1123,
		1134, 8, 27, 0, 0, 1124, 1134, 3, 293, 146, 0, 1125, 1129, 5, 91, 0, 0,
		1126, 1128, 3, 291, 145, 0, 1127, 1126, 1, 0, 0, 0, 1128, 1131, 1, 0, 0,
		0, 1129, 1127, 1, 0, 0, 0, 1129, 1130, 1, 0, 0, 0, 1130, 1132, 1, 0, 0,
		0, 1131, 1129, 1, 0, 0, 0, 1132, 1134, 5, 93, 0, 0, 1133, 1123, 1, 0, 0,
		0, 1133, 1124, 1, 0, 0, 0, 1133, 1125, 1, 0, 0, 0, 1134, 288, 1, 0, 0,
		0, 1135, 1146, 8, 28, 0, 0, 1136, 1146, 3, 293, 146, 0, 1137, 1141, 5,
		91, 0, 0, 1138, 1140, 3, 291, 145, 0, 1139, 1138, 1, 0, 0, 0, 1140, 1143,
		1, 0, 0, 0, 1141, 1139, 1, 0, 0, 0, 1141, 1142, 1, 0, 0, 0, 1142, 1144,
		1, 0, 0, 0, 1143, 1141, 1, 0, 0, 0, 1144, 1146, 5, 93, 0, 0, 1145, 1135,
		1, 0, 0, 0, 1145, 1136, 1, 0, 0, 0, 1145, 1137, 1, 0, 0, 0, 1146, 290,
		1, 0, 0, 0, 1147, 1150, 8, 29, 0, 0, 1148, 1150, 3, 293, 146, 0, 1149,
		1147, 1, 0, 0, 0, 1149, 1148, 1, 0, 0, 0, 1150, 292, 1, 0, 0, 0, 1151,
		1152, 5, 92, 0, 0, 1152, 1153, 8, 0, 0, 0, 1153, 294, 1, 0, 0, 0, 52, 0,
		302, 311, 325, 335, 343, 508, 516, 520, 527, 531, 535, 537, 545, 552, 562,
		571, 580, 591, 602, 924, 931, 939, 943, 951, 953, 961, 977, 999, 1016,
		1022, 1029, 1033, 1051, 1055, 1062, 1072, 1084, 1087, 1091, 1096, 1103,
		1109, 1112, 1115, 1118, 1121, 1129, 1133, 1141, 1145, 1149, 5, 0, 1, 0,
		1, 8, 0, 1, 9, 1, 1, 116, 2, 0, 2, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// JavaScriptLexerInit initializes any static state used to implement JavaScriptLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewJavaScriptLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func JavaScriptLexerInit() {
	staticData := &javascriptlexerLexerStaticData
	staticData.once.Do(javascriptlexerLexerInit)
}

// NewJavaScriptLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewJavaScriptLexer(input antlr.CharStream) *JavaScriptLexer {
	JavaScriptLexerInit()
	l := new(JavaScriptLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &javascriptlexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.predictionContextCache)
	l.channelNames = staticData.channelNames
	l.modeNames = staticData.modeNames
	l.RuleNames = staticData.ruleNames
	l.LiteralNames = staticData.literalNames
	l.SymbolicNames = staticData.symbolicNames
	l.GrammarFileName = "JavaScriptLexer.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// JavaScriptLexer tokens.
const (
	JavaScriptLexerHashBangLine               = 1
	JavaScriptLexerMultiLineComment           = 2
	JavaScriptLexerSingleLineComment          = 3
	JavaScriptLexerRegularExpressionLiteral   = 4
	JavaScriptLexerOpenBracket                = 5
	JavaScriptLexerCloseBracket               = 6
	JavaScriptLexerOpenParen                  = 7
	JavaScriptLexerCloseParen                 = 8
	JavaScriptLexerOpenBrace                  = 9
	JavaScriptLexerCloseBrace                 = 10
	JavaScriptLexerSemiColon                  = 11
	JavaScriptLexerComma                      = 12
	JavaScriptLexerAssign                     = 13
	JavaScriptLexerQuestionMark               = 14
	JavaScriptLexerColon                      = 15
	JavaScriptLexerEllipsis                   = 16
	JavaScriptLexerDot                        = 17
	JavaScriptLexerPlusPlus                   = 18
	JavaScriptLexerMinusMinus                 = 19
	JavaScriptLexerPlus                       = 20
	JavaScriptLexerMinus                      = 21
	JavaScriptLexerBitNot                     = 22
	JavaScriptLexerNot                        = 23
	JavaScriptLexerMultiply                   = 24
	JavaScriptLexerDivide                     = 25
	JavaScriptLexerModulus                    = 26
	JavaScriptLexerPower                      = 27
	JavaScriptLexerNullCoalesce               = 28
	JavaScriptLexerHashtag                    = 29
	JavaScriptLexerRightShiftArithmetic       = 30
	JavaScriptLexerLeftShiftArithmetic        = 31
	JavaScriptLexerRightShiftLogical          = 32
	JavaScriptLexerLessThan                   = 33
	JavaScriptLexerMoreThan                   = 34
	JavaScriptLexerLessThanEquals             = 35
	JavaScriptLexerGreaterThanEquals          = 36
	JavaScriptLexerEquals_                    = 37
	JavaScriptLexerNotEquals                  = 38
	JavaScriptLexerIdentityEquals             = 39
	JavaScriptLexerIdentityNotEquals          = 40
	JavaScriptLexerBitAnd                     = 41
	JavaScriptLexerBitXOr                     = 42
	JavaScriptLexerBitOr                      = 43
	JavaScriptLexerAnd                        = 44
	JavaScriptLexerOr                         = 45
	JavaScriptLexerMultiplyAssign             = 46
	JavaScriptLexerDivideAssign               = 47
	JavaScriptLexerModulusAssign              = 48
	JavaScriptLexerPlusAssign                 = 49
	JavaScriptLexerMinusAssign                = 50
	JavaScriptLexerLeftShiftArithmeticAssign  = 51
	JavaScriptLexerRightShiftArithmeticAssign = 52
	JavaScriptLexerRightShiftLogicalAssign    = 53
	JavaScriptLexerBitAndAssign               = 54
	JavaScriptLexerBitXorAssign               = 55
	JavaScriptLexerBitOrAssign                = 56
	JavaScriptLexerPowerAssign                = 57
	JavaScriptLexerARROW                      = 58
	JavaScriptLexerNullLiteral                = 59
	JavaScriptLexerBooleanLiteral             = 60
	JavaScriptLexerDecimalLiteral             = 61
	JavaScriptLexerHexIntegerLiteral          = 62
	JavaScriptLexerOctalIntegerLiteral        = 63
	JavaScriptLexerOctalIntegerLiteral2       = 64
	JavaScriptLexerBinaryIntegerLiteral       = 65
	JavaScriptLexerBigHexIntegerLiteral       = 66
	JavaScriptLexerBigOctalIntegerLiteral     = 67
	JavaScriptLexerBigBinaryIntegerLiteral    = 68
	JavaScriptLexerBigDecimalIntegerLiteral   = 69
	JavaScriptLexerBreak                      = 70
	JavaScriptLexerDo                         = 71
	JavaScriptLexerInstanceof                 = 72
	JavaScriptLexerTypeof                     = 73
	JavaScriptLexerCase                       = 74
	JavaScriptLexerElse                       = 75
	JavaScriptLexerNew                        = 76
	JavaScriptLexerVar                        = 77
	JavaScriptLexerCatch                      = 78
	JavaScriptLexerFinally                    = 79
	JavaScriptLexerReturn                     = 80
	JavaScriptLexerVoid                       = 81
	JavaScriptLexerContinue                   = 82
	JavaScriptLexerFor                        = 83
	JavaScriptLexerSwitch                     = 84
	JavaScriptLexerWhile                      = 85
	JavaScriptLexerDebugger                   = 86
	JavaScriptLexerFunction                   = 87
	JavaScriptLexerThis                       = 88
	JavaScriptLexerWith                       = 89
	JavaScriptLexerDefault                    = 90
	JavaScriptLexerIf                         = 91
	JavaScriptLexerThrow                      = 92
	JavaScriptLexerDelete                     = 93
	JavaScriptLexerIn                         = 94
	JavaScriptLexerTry                        = 95
	JavaScriptLexerAs                         = 96
	JavaScriptLexerFrom                       = 97
	JavaScriptLexerClass                      = 98
	JavaScriptLexerEnum                       = 99
	JavaScriptLexerExtends                    = 100
	JavaScriptLexerSuper                      = 101
	JavaScriptLexerConst                      = 102
	JavaScriptLexerExport                     = 103
	JavaScriptLexerImport                     = 104
	JavaScriptLexerAsync                      = 105
	JavaScriptLexerAwait                      = 106
	JavaScriptLexerImplements                 = 107
	JavaScriptLexerLet                        = 108
	JavaScriptLexerPrivate                    = 109
	JavaScriptLexerPublic                     = 110
	JavaScriptLexerInterface                  = 111
	JavaScriptLexerPackage                    = 112
	JavaScriptLexerProtected                  = 113
	JavaScriptLexerStatic                     = 114
	JavaScriptLexerYield                      = 115
	JavaScriptLexerIdentifier                 = 116
	JavaScriptLexerStringLiteral              = 117
	JavaScriptLexerTemplateStringLiteral      = 118
	JavaScriptLexerWhiteSpaces                = 119
	JavaScriptLexerLineTerminator             = 120
	JavaScriptLexerHtmlComment                = 121
	JavaScriptLexerCDataComment               = 122
	JavaScriptLexerUnexpectedCharacter        = 123
)

// JavaScriptLexerERROR is the JavaScriptLexer channel.
const JavaScriptLexerERROR = 2

func (l *JavaScriptLexer) Action(localctx antlr.RuleContext, ruleIndex, actionIndex int) {
	switch ruleIndex {
	case 8:
		l.OpenBrace_Action(localctx, actionIndex)

	case 9:
		l.CloseBrace_Action(localctx, actionIndex)

	case 116:
		l.StringLiteral_Action(localctx, actionIndex)

	default:
		panic("No registered action for: " + fmt.Sprint(ruleIndex))
	}
}

func (l *JavaScriptLexer) OpenBrace_Action(localctx antlr.RuleContext, actionIndex int) {
	this := l
	_ = this

	switch actionIndex {
	case 0:
		l.ProcessOpenBrace()

	default:
		panic("No registered action for: " + fmt.Sprint(actionIndex))
	}
}
func (l *JavaScriptLexer) CloseBrace_Action(localctx antlr.RuleContext, actionIndex int) {
	this := l
	_ = this

	switch actionIndex {
	case 1:
		l.ProcessCloseBrace()

	default:
		panic("No registered action for: " + fmt.Sprint(actionIndex))
	}
}
func (l *JavaScriptLexer) StringLiteral_Action(localctx antlr.RuleContext, actionIndex int) {
	this := l
	_ = this

	switch actionIndex {
	case 2:
		l.ProcessStringLiteral()

	default:
		panic("No registered action for: " + fmt.Sprint(actionIndex))
	}
}

func (l *JavaScriptLexer) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 0:
		return l.HashBangLine_Sempred(localctx, predIndex)

	case 3:
		return l.RegularExpressionLiteral_Sempred(localctx, predIndex)

	case 62:
		return l.OctalIntegerLiteral_Sempred(localctx, predIndex)

	case 106:
		return l.Implements_Sempred(localctx, predIndex)

	case 107:
		return l.Let_Sempred(localctx, predIndex)

	case 108:
		return l.Private_Sempred(localctx, predIndex)

	case 109:
		return l.Public_Sempred(localctx, predIndex)

	case 110:
		return l.Interface_Sempred(localctx, predIndex)

	case 111:
		return l.Package_Sempred(localctx, predIndex)

	case 112:
		return l.Protected_Sempred(localctx, predIndex)

	case 113:
		return l.Static_Sempred(localctx, predIndex)

	case 114:
		return l.Yield_Sempred(localctx, predIndex)

	default:
		panic("No registered predicate for: " + fmt.Sprint(ruleIndex))
	}
}

func (p *JavaScriptLexer) HashBangLine_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 0:
		return p.IsStartOfFile()

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *JavaScriptLexer) RegularExpressionLiteral_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 1:
		return p.IsRegexPossible()

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *JavaScriptLexer) OctalIntegerLiteral_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 2:
		return !p.IsStrictMode()

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *JavaScriptLexer) Implements_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 3:
		return p.IsStrictMode()

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *JavaScriptLexer) Let_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 4:
		return p.IsStrictMode()

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *JavaScriptLexer) Private_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 5:
		return p.IsStrictMode()

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *JavaScriptLexer) Public_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 6:
		return p.IsStrictMode()

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *JavaScriptLexer) Interface_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 7:
		return p.IsStrictMode()

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *JavaScriptLexer) Package_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 8:
		return p.IsStrictMode()

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *JavaScriptLexer) Protected_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 9:
		return p.IsStrictMode()

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *JavaScriptLexer) Static_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 10:
		return p.IsStrictMode()

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *JavaScriptLexer) Yield_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 11:
		return p.IsStrictMode()

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
